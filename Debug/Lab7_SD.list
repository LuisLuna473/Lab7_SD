
Lab7_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  08007df4  08007df4  00008df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008430  08008430  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  08008430  08008430  00009430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008438  08008438  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008438  08008438  00009438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800843c  0800843c  0000943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008440  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000252c  20000074  080084b4  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025a0  080084b4  0000a5a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f20a  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002859  00000000  00000000  000192ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0001bb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2a  00000000  00000000  0001c848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023323  00000000  00000000  0001d272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014021  00000000  00000000  00040595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc244  00000000  00000000  000545b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001207fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a94  00000000  00000000  00120840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001242d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ddc 	.word	0x08007ddc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007ddc 	.word	0x08007ddc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2140      	movs	r1, #64	@ 0x40
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <SELECT+0x18>)
 80005ba:	f001 fd8d 	bl	80020d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f001 fa22 	bl	8001a08 <HAL_Delay>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020400 	.word	0x40020400

080005cc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2140      	movs	r1, #64	@ 0x40
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <DESELECT+0x18>)
 80005d6:	f001 fd7f 	bl	80020d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f001 fa14 	bl	8001a08 <HAL_Delay>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40020400 	.word	0x40020400

080005e8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005f2:	bf00      	nop
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <SPI_TxByte+0x30>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d1f8      	bne.n	80005f4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000602:	1df9      	adds	r1, r7, #7
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	2201      	movs	r2, #1
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <SPI_TxByte+0x30>)
 800060a:	f002 fb6a 	bl	8002ce2 <HAL_SPI_Transmit>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000098 	.word	0x20000098

0800061c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000628:	bf00      	nop
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <SPI_TxBuffer+0x30>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	2b02      	cmp	r3, #2
 8000636:	d1f8      	bne.n	800062a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000638:	887a      	ldrh	r2, [r7, #2]
 800063a:	2364      	movs	r3, #100	@ 0x64
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	4803      	ldr	r0, [pc, #12]	@ (800064c <SPI_TxBuffer+0x30>)
 8000640:	f002 fb4f 	bl	8002ce2 <HAL_SPI_Transmit>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000098 	.word	0x20000098

08000650 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000656:	23ff      	movs	r3, #255	@ 0xff
 8000658:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800065a:	bf00      	nop
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <SPI_RxByte+0x34>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	2b02      	cmp	r3, #2
 8000668:	d1f8      	bne.n	800065c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800066a:	1dba      	adds	r2, r7, #6
 800066c:	1df9      	adds	r1, r7, #7
 800066e:	2364      	movs	r3, #100	@ 0x64
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2301      	movs	r3, #1
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <SPI_RxByte+0x34>)
 8000676:	f002 fc78 	bl	8002f6a <HAL_SPI_TransmitReceive>

	return data;
 800067a:	79bb      	ldrb	r3, [r7, #6]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000098 	.word	0x20000098

08000688 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000690:	f7ff ffde 	bl	8000650 <SPI_RxByte>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	701a      	strb	r2, [r3, #0]
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <SD_ReadyWait+0x30>)
 80006ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006b0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006b2:	f7ff ffcd 	bl	8000650 <SPI_RxByte>
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2bff      	cmp	r3, #255	@ 0xff
 80006be:	d003      	beq.n	80006c8 <SD_ReadyWait+0x24>
 80006c0:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <SD_ReadyWait+0x30>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1f4      	bne.n	80006b2 <SD_ReadyWait+0xe>

	return res;
 80006c8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000092 	.word	0x20000092

080006d8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006de:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80006e2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006e4:	f7ff ff72 	bl	80005cc <DESELECT>
	for(int i = 0; i < 10; i++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	e005      	b.n	80006fa <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006ee:	20ff      	movs	r0, #255	@ 0xff
 80006f0:	f7ff ff7a 	bl	80005e8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b09      	cmp	r3, #9
 80006fe:	ddf6      	ble.n	80006ee <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000700:	f7ff ff56 	bl	80005b0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000704:	2340      	movs	r3, #64	@ 0x40
 8000706:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000718:	2395      	movs	r3, #149	@ 0x95
 800071a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800071c:	463b      	mov	r3, r7
 800071e:	2106      	movs	r1, #6
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff7b 	bl	800061c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000726:	e002      	b.n	800072e <SD_PowerOn+0x56>
	{
		cnt--;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3b01      	subs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800072e:	f7ff ff8f 	bl	8000650 <SPI_RxByte>
 8000732:	4603      	mov	r3, r0
 8000734:	2b01      	cmp	r3, #1
 8000736:	d002      	beq.n	800073e <SD_PowerOn+0x66>
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f4      	bne.n	8000728 <SD_PowerOn+0x50>
	}

	DESELECT();
 800073e:	f7ff ff45 	bl	80005cc <DESELECT>
	SPI_TxByte(0XFF);
 8000742:	20ff      	movs	r0, #255	@ 0xff
 8000744:	f7ff ff50 	bl	80005e8 <SPI_TxByte>

	PowerFlag = 1;
 8000748:	4b03      	ldr	r3, [pc, #12]	@ (8000758 <SD_PowerOn+0x80>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000095 	.word	0x20000095

0800075c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000760:	4b03      	ldr	r3, [pc, #12]	@ (8000770 <SD_PowerOff+0x14>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	20000095 	.word	0x20000095

08000774 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000778:	4b03      	ldr	r3, [pc, #12]	@ (8000788 <SD_CheckPower+0x14>)
 800077a:	781b      	ldrb	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000095 	.word	0x20000095

0800078c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <SD_RxDataBlock+0x58>)
 8000798:	22c8      	movs	r2, #200	@ 0xc8
 800079a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800079c:	f7ff ff58 	bl	8000650 <SPI_RxByte>
 80007a0:	4603      	mov	r3, r0
 80007a2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	2bff      	cmp	r3, #255	@ 0xff
 80007a8:	d103      	bne.n	80007b2 <SD_RxDataBlock+0x26>
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <SD_RxDataBlock+0x58>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f4      	bne.n	800079c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	2bfe      	cmp	r3, #254	@ 0xfe
 80007b6:	d001      	beq.n	80007bc <SD_RxDataBlock+0x30>
 80007b8:	2300      	movs	r3, #0
 80007ba:	e00f      	b.n	80007dc <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff60 	bl	8000688 <SPI_RxBytePtr>
	} while(len--);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	1e5a      	subs	r2, r3, #1
 80007cc:	603a      	str	r2, [r7, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f4      	bne.n	80007bc <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80007d2:	f7ff ff3d 	bl	8000650 <SPI_RxByte>
	SPI_RxByte();
 80007d6:	f7ff ff3b 	bl	8000650 <SPI_RxByte>

	return TRUE;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000090 	.word	0x20000090

080007e8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007f8:	f7ff ff54 	bl	80006a4 <SD_ReadyWait>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2bff      	cmp	r3, #255	@ 0xff
 8000800:	d001      	beq.n	8000806 <SD_TxDataBlock+0x1e>
 8000802:	2300      	movs	r3, #0
 8000804:	e02f      	b.n	8000866 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff feed 	bl	80005e8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	2bfd      	cmp	r3, #253	@ 0xfd
 8000812:	d020      	beq.n	8000856 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000814:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff feff 	bl	800061c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800081e:	f7ff ff17 	bl	8000650 <SPI_RxByte>
		SPI_RxByte();
 8000822:	f7ff ff15 	bl	8000650 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000826:	e00b      	b.n	8000840 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000828:	f7ff ff12 	bl	8000650 <SPI_RxByte>
 800082c:	4603      	mov	r3, r0
 800082e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	f003 031f 	and.w	r3, r3, #31
 8000836:	2b05      	cmp	r3, #5
 8000838:	d006      	beq.n	8000848 <SD_TxDataBlock+0x60>
			i++;
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	3301      	adds	r3, #1
 800083e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	2b40      	cmp	r3, #64	@ 0x40
 8000844:	d9f0      	bls.n	8000828 <SD_TxDataBlock+0x40>
 8000846:	e000      	b.n	800084a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000848:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800084a:	bf00      	nop
 800084c:	f7ff ff00 	bl	8000650 <SPI_RxByte>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0fa      	beq.n	800084c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	f003 031f 	and.w	r3, r3, #31
 800085c:	2b05      	cmp	r3, #5
 800085e:	d101      	bne.n	8000864 <SD_TxDataBlock+0x7c>
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	6039      	str	r1, [r7, #0]
 8000878:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800087a:	f7ff ff13 	bl	80006a4 <SD_ReadyWait>
 800087e:	4603      	mov	r3, r0
 8000880:	2bff      	cmp	r3, #255	@ 0xff
 8000882:	d001      	beq.n	8000888 <SD_SendCmd+0x1a>
 8000884:	23ff      	movs	r3, #255	@ 0xff
 8000886:	e042      	b.n	800090e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff feac 	bl	80005e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	0e1b      	lsrs	r3, r3, #24
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fea6 	bl	80005e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	0c1b      	lsrs	r3, r3, #16
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fea0 	bl	80005e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	0a1b      	lsrs	r3, r3, #8
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe9a 	bl	80005e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe95 	bl	80005e8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b40      	cmp	r3, #64	@ 0x40
 80008c2:	d102      	bne.n	80008ca <SD_SendCmd+0x5c>
 80008c4:	2395      	movs	r3, #149	@ 0x95
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	e007      	b.n	80008da <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b48      	cmp	r3, #72	@ 0x48
 80008ce:	d102      	bne.n	80008d6 <SD_SendCmd+0x68>
 80008d0:	2387      	movs	r3, #135	@ 0x87
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	e001      	b.n	80008da <SD_SendCmd+0x6c>
	else crc = 1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fe83 	bl	80005e8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b4c      	cmp	r3, #76	@ 0x4c
 80008e6:	d101      	bne.n	80008ec <SD_SendCmd+0x7e>
 80008e8:	f7ff feb2 	bl	8000650 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008ec:	230a      	movs	r3, #10
 80008ee:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008f0:	f7ff feae 	bl	8000650 <SPI_RxByte>
 80008f4:	4603      	mov	r3, r0
 80008f6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	da05      	bge.n	800090c <SD_SendCmd+0x9e>
 8000900:	7bbb      	ldrb	r3, [r7, #14]
 8000902:	3b01      	subs	r3, #1
 8000904:	73bb      	strb	r3, [r7, #14]
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1f1      	bne.n	80008f0 <SD_SendCmd+0x82>

	return res;
 800090c:	7b7b      	ldrb	r3, [r7, #13]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SD_disk_initialize+0x14>
 8000928:	2301      	movs	r3, #1
 800092a:	e0d1      	b.n	8000ad0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800092c:	4b6a      	ldr	r3, [pc, #424]	@ (8000ad8 <SD_disk_initialize+0x1c0>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	2b00      	cmp	r3, #0
 8000938:	d003      	beq.n	8000942 <SD_disk_initialize+0x2a>
 800093a:	4b67      	ldr	r3, [pc, #412]	@ (8000ad8 <SD_disk_initialize+0x1c0>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	e0c6      	b.n	8000ad0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000942:	f7ff fec9 	bl	80006d8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000946:	f7ff fe33 	bl	80005b0 <SELECT>

	/* check disk type */
	type = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800094e:	2100      	movs	r1, #0
 8000950:	2040      	movs	r0, #64	@ 0x40
 8000952:	f7ff ff8c 	bl	800086e <SD_SendCmd>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	f040 80a1 	bne.w	8000aa0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800095e:	4b5f      	ldr	r3, [pc, #380]	@ (8000adc <SD_disk_initialize+0x1c4>)
 8000960:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000964:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000966:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800096a:	2048      	movs	r0, #72	@ 0x48
 800096c:	f7ff ff7f 	bl	800086e <SD_SendCmd>
 8000970:	4603      	mov	r3, r0
 8000972:	2b01      	cmp	r3, #1
 8000974:	d155      	bne.n	8000a22 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000976:	2300      	movs	r3, #0
 8000978:	73fb      	strb	r3, [r7, #15]
 800097a:	e00c      	b.n	8000996 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800097c:	7bfc      	ldrb	r4, [r7, #15]
 800097e:	f7ff fe67 	bl	8000650 <SPI_RxByte>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	f104 0310 	add.w	r3, r4, #16
 800098a:	443b      	add	r3, r7
 800098c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	3301      	adds	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	2b03      	cmp	r3, #3
 800099a:	d9ef      	bls.n	800097c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800099c:	7abb      	ldrb	r3, [r7, #10]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d17e      	bne.n	8000aa0 <SD_disk_initialize+0x188>
 80009a2:	7afb      	ldrb	r3, [r7, #11]
 80009a4:	2baa      	cmp	r3, #170	@ 0xaa
 80009a6:	d17b      	bne.n	8000aa0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009a8:	2100      	movs	r1, #0
 80009aa:	2077      	movs	r0, #119	@ 0x77
 80009ac:	f7ff ff5f 	bl	800086e <SD_SendCmd>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d807      	bhi.n	80009c6 <SD_disk_initialize+0xae>
 80009b6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009ba:	2069      	movs	r0, #105	@ 0x69
 80009bc:	f7ff ff57 	bl	800086e <SD_SendCmd>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d004      	beq.n	80009d0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80009c6:	4b45      	ldr	r3, [pc, #276]	@ (8000adc <SD_disk_initialize+0x1c4>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1ec      	bne.n	80009a8 <SD_disk_initialize+0x90>
 80009ce:	e000      	b.n	80009d2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009d0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009d2:	4b42      	ldr	r3, [pc, #264]	@ (8000adc <SD_disk_initialize+0x1c4>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d062      	beq.n	8000aa0 <SD_disk_initialize+0x188>
 80009da:	2100      	movs	r1, #0
 80009dc:	207a      	movs	r0, #122	@ 0x7a
 80009de:	f7ff ff46 	bl	800086e <SD_SendCmd>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d15b      	bne.n	8000aa0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e00c      	b.n	8000a08 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009ee:	7bfc      	ldrb	r4, [r7, #15]
 80009f0:	f7ff fe2e 	bl	8000650 <SPI_RxByte>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	f104 0310 	add.w	r3, r4, #16
 80009fc:	443b      	add	r3, r7
 80009fe:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	3301      	adds	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d9ef      	bls.n	80009ee <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a0e:	7a3b      	ldrb	r3, [r7, #8]
 8000a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SD_disk_initialize+0x104>
 8000a18:	230c      	movs	r3, #12
 8000a1a:	e000      	b.n	8000a1e <SD_disk_initialize+0x106>
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	73bb      	strb	r3, [r7, #14]
 8000a20:	e03e      	b.n	8000aa0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a22:	2100      	movs	r1, #0
 8000a24:	2077      	movs	r0, #119	@ 0x77
 8000a26:	f7ff ff22 	bl	800086e <SD_SendCmd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d808      	bhi.n	8000a42 <SD_disk_initialize+0x12a>
 8000a30:	2100      	movs	r1, #0
 8000a32:	2069      	movs	r0, #105	@ 0x69
 8000a34:	f7ff ff1b 	bl	800086e <SD_SendCmd>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d801      	bhi.n	8000a42 <SD_disk_initialize+0x12a>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	e000      	b.n	8000a44 <SD_disk_initialize+0x12c>
 8000a42:	2301      	movs	r3, #1
 8000a44:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a46:	7bbb      	ldrb	r3, [r7, #14]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d10e      	bne.n	8000a6a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2077      	movs	r0, #119	@ 0x77
 8000a50:	f7ff ff0d 	bl	800086e <SD_SendCmd>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d80e      	bhi.n	8000a78 <SD_disk_initialize+0x160>
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2069      	movs	r0, #105	@ 0x69
 8000a5e:	f7ff ff06 	bl	800086e <SD_SendCmd>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d107      	bne.n	8000a78 <SD_disk_initialize+0x160>
 8000a68:	e00c      	b.n	8000a84 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2041      	movs	r0, #65	@ 0x41
 8000a6e:	f7ff fefe 	bl	800086e <SD_SendCmd>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <SD_disk_initialize+0x1c4>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1e2      	bne.n	8000a46 <SD_disk_initialize+0x12e>
 8000a80:	e000      	b.n	8000a84 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a82:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <SD_disk_initialize+0x1c4>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d007      	beq.n	8000a9c <SD_disk_initialize+0x184>
 8000a8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a90:	2050      	movs	r0, #80	@ 0x50
 8000a92:	f7ff feec 	bl	800086e <SD_SendCmd>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SD_disk_initialize+0x188>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae0 <SD_disk_initialize+0x1c8>)
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000aa6:	f7ff fd91 	bl	80005cc <DESELECT>
	SPI_RxByte();
 8000aaa:	f7ff fdd1 	bl	8000650 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d008      	beq.n	8000ac6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <SD_disk_initialize+0x1c0>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <SD_disk_initialize+0x1c0>)
 8000ac2:	701a      	strb	r2, [r3, #0]
 8000ac4:	e001      	b.n	8000aca <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ac6:	f7ff fe49 	bl	800075c <SD_PowerOff>
	}

	return Stat;
 8000aca:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <SD_disk_initialize+0x1c0>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000090 	.word	0x20000090
 8000ae0:	20000094 	.word	0x20000094

08000ae4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SD_disk_status+0x14>
 8000af4:	2301      	movs	r3, #1
 8000af6:	e002      	b.n	8000afe <SD_disk_status+0x1a>
	return Stat;
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <SD_disk_status+0x28>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000000 	.word	0x20000000

08000b10 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <SD_disk_read+0x1c>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <SD_disk_read+0x20>
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	e051      	b.n	8000bd4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b30:	4b2a      	ldr	r3, [pc, #168]	@ (8000bdc <SD_disk_read+0xcc>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SD_disk_read+0x32>
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e048      	b.n	8000bd4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b42:	4b27      	ldr	r3, [pc, #156]	@ (8000be0 <SD_disk_read+0xd0>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d102      	bne.n	8000b54 <SD_disk_read+0x44>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	025b      	lsls	r3, r3, #9
 8000b52:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b54:	f7ff fd2c 	bl	80005b0 <SELECT>

	if (count == 1)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d111      	bne.n	8000b82 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2051      	movs	r0, #81	@ 0x51
 8000b62:	f7ff fe84 	bl	800086e <SD_SendCmd>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d129      	bne.n	8000bc0 <SD_disk_read+0xb0>
 8000b6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b70:	68b8      	ldr	r0, [r7, #8]
 8000b72:	f7ff fe0b 	bl	800078c <SD_RxDataBlock>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d021      	beq.n	8000bc0 <SD_disk_read+0xb0>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	e01e      	b.n	8000bc0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	2052      	movs	r0, #82	@ 0x52
 8000b86:	f7ff fe72 	bl	800086e <SD_SendCmd>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d117      	bne.n	8000bc0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b94:	68b8      	ldr	r0, [r7, #8]
 8000b96:	f7ff fdf9 	bl	800078c <SD_RxDataBlock>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00a      	beq.n	8000bb6 <SD_disk_read+0xa6>
				buff += 512;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ba6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1ed      	bne.n	8000b90 <SD_disk_read+0x80>
 8000bb4:	e000      	b.n	8000bb8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bb6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	204c      	movs	r0, #76	@ 0x4c
 8000bbc:	f7ff fe57 	bl	800086e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bc0:	f7ff fd04 	bl	80005cc <DESELECT>
	SPI_RxByte();
 8000bc4:	f7ff fd44 	bl	8000650 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf14      	ite	ne
 8000bce:	2301      	movne	r3, #1
 8000bd0:	2300      	moveq	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000094 	.word	0x20000094

08000be4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d102      	bne.n	8000c00 <SD_disk_write+0x1c>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <SD_disk_write+0x20>
 8000c00:	2304      	movs	r3, #4
 8000c02:	e06b      	b.n	8000cdc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c04:	4b37      	ldr	r3, [pc, #220]	@ (8000ce4 <SD_disk_write+0x100>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SD_disk_write+0x32>
 8000c12:	2303      	movs	r3, #3
 8000c14:	e062      	b.n	8000cdc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c16:	4b33      	ldr	r3, [pc, #204]	@ (8000ce4 <SD_disk_write+0x100>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SD_disk_write+0x44>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e059      	b.n	8000cdc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <SD_disk_write+0x104>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <SD_disk_write+0x56>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	025b      	lsls	r3, r3, #9
 8000c38:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c3a:	f7ff fcb9 	bl	80005b0 <SELECT>

	if (count == 1)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d110      	bne.n	8000c66 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	2058      	movs	r0, #88	@ 0x58
 8000c48:	f7ff fe11 	bl	800086e <SD_SendCmd>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d13a      	bne.n	8000cc8 <SD_disk_write+0xe4>
 8000c52:	21fe      	movs	r1, #254	@ 0xfe
 8000c54:	68b8      	ldr	r0, [r7, #8]
 8000c56:	f7ff fdc7 	bl	80007e8 <SD_TxDataBlock>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d033      	beq.n	8000cc8 <SD_disk_write+0xe4>
			count = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	e030      	b.n	8000cc8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c66:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <SD_disk_write+0x104>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d007      	beq.n	8000c82 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c72:	2100      	movs	r1, #0
 8000c74:	2077      	movs	r0, #119	@ 0x77
 8000c76:	f7ff fdfa 	bl	800086e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c7a:	6839      	ldr	r1, [r7, #0]
 8000c7c:	2057      	movs	r0, #87	@ 0x57
 8000c7e:	f7ff fdf6 	bl	800086e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	2059      	movs	r0, #89	@ 0x59
 8000c86:	f7ff fdf2 	bl	800086e <SD_SendCmd>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d11b      	bne.n	8000cc8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c90:	21fc      	movs	r1, #252	@ 0xfc
 8000c92:	68b8      	ldr	r0, [r7, #8]
 8000c94:	f7ff fda8 	bl	80007e8 <SD_TxDataBlock>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00a      	beq.n	8000cb4 <SD_disk_write+0xd0>
				buff += 512;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ca4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1ee      	bne.n	8000c90 <SD_disk_write+0xac>
 8000cb2:	e000      	b.n	8000cb6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cb4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cb6:	21fd      	movs	r1, #253	@ 0xfd
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fd95 	bl	80007e8 <SD_TxDataBlock>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <SD_disk_write+0xe4>
			{
				count = 1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cc8:	f7ff fc80 	bl	80005cc <DESELECT>
	SPI_RxByte();
 8000ccc:	f7ff fcc0 	bl	8000650 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000094 	.word	0x20000094

08000cec <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b08b      	sub	sp, #44	@ 0x2c
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	603a      	str	r2, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SD_disk_ioctl+0x1e>
 8000d06:	2304      	movs	r3, #4
 8000d08:	e113      	b.n	8000f32 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d10:	79bb      	ldrb	r3, [r7, #6]
 8000d12:	2b05      	cmp	r3, #5
 8000d14:	d124      	bne.n	8000d60 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d012      	beq.n	8000d44 <SD_disk_ioctl+0x58>
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	dc1a      	bgt.n	8000d58 <SD_disk_ioctl+0x6c>
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <SD_disk_ioctl+0x40>
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d006      	beq.n	8000d38 <SD_disk_ioctl+0x4c>
 8000d2a:	e015      	b.n	8000d58 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d2c:	f7ff fd16 	bl	800075c <SD_PowerOff>
			res = RES_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d36:	e0fa      	b.n	8000f2e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d38:	f7ff fcce 	bl	80006d8 <SD_PowerOn>
			res = RES_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d42:	e0f4      	b.n	8000f2e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	1c5c      	adds	r4, r3, #1
 8000d48:	f7ff fd14 	bl	8000774 <SD_CheckPower>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d56:	e0ea      	b.n	8000f2e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d5e:	e0e6      	b.n	8000f2e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d60:	4b76      	ldr	r3, [pc, #472]	@ (8000f3c <SD_disk_ioctl+0x250>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SD_disk_ioctl+0x86>
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e0df      	b.n	8000f32 <SD_disk_ioctl+0x246>

		SELECT();
 8000d72:	f7ff fc1d 	bl	80005b0 <SELECT>

		switch (ctrl)
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	2b0d      	cmp	r3, #13
 8000d7a:	f200 80c9 	bhi.w	8000f10 <SD_disk_ioctl+0x224>
 8000d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d84 <SD_disk_ioctl+0x98>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000e7b 	.word	0x08000e7b
 8000d88:	08000dbd 	.word	0x08000dbd
 8000d8c:	08000e6b 	.word	0x08000e6b
 8000d90:	08000f11 	.word	0x08000f11
 8000d94:	08000f11 	.word	0x08000f11
 8000d98:	08000f11 	.word	0x08000f11
 8000d9c:	08000f11 	.word	0x08000f11
 8000da0:	08000f11 	.word	0x08000f11
 8000da4:	08000f11 	.word	0x08000f11
 8000da8:	08000f11 	.word	0x08000f11
 8000dac:	08000f11 	.word	0x08000f11
 8000db0:	08000e8d 	.word	0x08000e8d
 8000db4:	08000eb1 	.word	0x08000eb1
 8000db8:	08000ed5 	.word	0x08000ed5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2049      	movs	r0, #73	@ 0x49
 8000dc0:	f7ff fd55 	bl	800086e <SD_SendCmd>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f040 80a6 	bne.w	8000f18 <SD_disk_ioctl+0x22c>
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fcda 	bl	800078c <SD_RxDataBlock>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 809c 	beq.w	8000f18 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000de0:	7b3b      	ldrb	r3, [r7, #12]
 8000de2:	099b      	lsrs	r3, r3, #6
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d10d      	bne.n	8000e06 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dea:	7d7b      	ldrb	r3, [r7, #21]
 8000dec:	461a      	mov	r2, r3
 8000dee:	7d3b      	ldrb	r3, [r7, #20]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	3301      	adds	r3, #1
 8000dfa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dfc:	8bfb      	ldrh	r3, [r7, #30]
 8000dfe:	029a      	lsls	r2, r3, #10
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e02d      	b.n	8000e62 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e06:	7c7b      	ldrb	r3, [r7, #17]
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	7dbb      	ldrb	r3, [r7, #22]
 8000e10:	09db      	lsrs	r3, r3, #7
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	7d7b      	ldrb	r3, [r7, #21]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	f003 0306 	and.w	r3, r3, #6
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e2e:	7d3b      	ldrb	r3, [r7, #20]
 8000e30:	099b      	lsrs	r3, r3, #6
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	7cfb      	ldrb	r3, [r7, #19]
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	7cbb      	ldrb	r3, [r7, #18]
 8000e42:	029b      	lsls	r3, r3, #10
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e54:	8bfa      	ldrh	r2, [r7, #30]
 8000e56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e5a:	3b09      	subs	r3, #9
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000e68:	e056      	b.n	8000f18 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e70:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e78:	e055      	b.n	8000f26 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e7a:	f7ff fc13 	bl	80006a4 <SD_ReadyWait>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2bff      	cmp	r3, #255	@ 0xff
 8000e82:	d14b      	bne.n	8000f1c <SD_disk_ioctl+0x230>
 8000e84:	2300      	movs	r3, #0
 8000e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e8a:	e047      	b.n	8000f1c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2049      	movs	r0, #73	@ 0x49
 8000e90:	f7ff fced 	bl	800086e <SD_SendCmd>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d142      	bne.n	8000f20 <SD_disk_ioctl+0x234>
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	6a38      	ldr	r0, [r7, #32]
 8000e9e:	f7ff fc75 	bl	800078c <SD_RxDataBlock>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d03b      	beq.n	8000f20 <SD_disk_ioctl+0x234>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eae:	e037      	b.n	8000f20 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	204a      	movs	r0, #74	@ 0x4a
 8000eb4:	f7ff fcdb 	bl	800086e <SD_SendCmd>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d132      	bne.n	8000f24 <SD_disk_ioctl+0x238>
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	6a38      	ldr	r0, [r7, #32]
 8000ec2:	f7ff fc63 	bl	800078c <SD_RxDataBlock>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d02b      	beq.n	8000f24 <SD_disk_ioctl+0x238>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ed2:	e027      	b.n	8000f24 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	207a      	movs	r0, #122	@ 0x7a
 8000ed8:	f7ff fcc9 	bl	800086e <SD_SendCmd>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d116      	bne.n	8000f10 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000ee8:	e00b      	b.n	8000f02 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000eea:	6a3c      	ldr	r4, [r7, #32]
 8000eec:	1c63      	adds	r3, r4, #1
 8000eee:	623b      	str	r3, [r7, #32]
 8000ef0:	f7ff fbae 	bl	8000650 <SPI_RxByte>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000efc:	3301      	adds	r3, #1
 8000efe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d9ef      	bls.n	8000eea <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f10:	2304      	movs	r3, #4
 8000f12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f16:	e006      	b.n	8000f26 <SD_disk_ioctl+0x23a>
			break;
 8000f18:	bf00      	nop
 8000f1a:	e004      	b.n	8000f26 <SD_disk_ioctl+0x23a>
			break;
 8000f1c:	bf00      	nop
 8000f1e:	e002      	b.n	8000f26 <SD_disk_ioctl+0x23a>
			break;
 8000f20:	bf00      	nop
 8000f22:	e000      	b.n	8000f26 <SD_disk_ioctl+0x23a>
			break;
 8000f24:	bf00      	nop
		}

		DESELECT();
 8000f26:	f7ff fb51 	bl	80005cc <DESELECT>
		SPI_RxByte();
 8000f2a:	f7ff fb91 	bl	8000650 <SPI_RxByte>
	}

	return res;
 8000f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	372c      	adds	r7, #44	@ 0x2c
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd90      	pop	{r4, r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000000 	.word	0x20000000

08000f40 <transmit_uart.0>:

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  void transmit_uart(char *string){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	f8c7 c000 	str.w	ip, [r7]
	  uint8_t len = strlen(string);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff f95f 	bl	8000210 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
	  HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	23c8      	movs	r3, #200	@ 0xc8
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <transmit_uart.0+0x2c>)
 8000f60:	f002 fad8 	bl	8003514 <HAL_UART_Transmit>
  }
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000f0 	.word	0x200000f0

08000f70 <main>:
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b09a      	sub	sp, #104	@ 0x68
 8000f74:	af00      	add	r7, sp, #0
int main(void)
 8000f76:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f7a:	667b      	str	r3, [r7, #100]	@ 0x64
  HAL_Init();
 8000f7c:	f000 fcd2 	bl	8001924 <HAL_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 fa22 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f000 fae0 	bl	8001548 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f88:	f000 fa7e 	bl	8001488 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000f8c:	f003 fac8 	bl	8004520 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000f90:	f000 fab0 	bl	80014f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8000f94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f98:	f000 fd36 	bl	8001a08 <HAL_Delay>

  HAL_UART_Receive_IT(&huart2, data, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	49a3      	ldr	r1, [pc, #652]	@ (800122c <main+0x2bc>)
 8000fa0:	48a3      	ldr	r0, [pc, #652]	@ (8001230 <main+0x2c0>)
 8000fa2:	f002 fb42 	bl	800362a <HAL_UART_Receive_IT>
	    		//agregar bandera de inicio si no se inicializo
	    }
  }

  start();*/
  fres = f_mount(&fs, "/", 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	49a2      	ldr	r1, [pc, #648]	@ (8001234 <main+0x2c4>)
 8000faa:	48a3      	ldr	r0, [pc, #652]	@ (8001238 <main+0x2c8>)
 8000fac:	f005 fd00 	bl	80069b0 <f_mount>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4ba1      	ldr	r3, [pc, #644]	@ (800123c <main+0x2cc>)
 8000fb6:	701a      	strb	r2, [r3, #0]
  	    if(fres == FR_OK){
 8000fb8:	4ba0      	ldr	r3, [pc, #640]	@ (800123c <main+0x2cc>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d109      	bne.n	8000fd4 <main+0x64>
  	  	  transmit_uart("Micro SD card is mounted succesfully!\n");
 8000fc0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fc4:	469c      	mov	ip, r3
 8000fc6:	489e      	ldr	r0, [pc, #632]	@ (8001240 <main+0x2d0>)
 8000fc8:	f7ff ffba 	bl	8000f40 <transmit_uart.0>
  	  	  start = 1;
 8000fcc:	4b9d      	ldr	r3, [pc, #628]	@ (8001244 <main+0x2d4>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e00c      	b.n	8000fee <main+0x7e>
  	    }else if(fres != FR_OK){
 8000fd4:	4b99      	ldr	r3, [pc, #612]	@ (800123c <main+0x2cc>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d008      	beq.n	8000fee <main+0x7e>
  	  	  transmit_uart("Micro SD card's mount error!\n");
 8000fdc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fe0:	469c      	mov	ip, r3
 8000fe2:	4899      	ldr	r0, [pc, #612]	@ (8001248 <main+0x2d8>)
 8000fe4:	f7ff ffac 	bl	8000f40 <transmit_uart.0>
  	  	  start = 0;
 8000fe8:	4b96      	ldr	r3, [pc, #600]	@ (8001244 <main+0x2d4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(start == 1){
 8000fee:	4b95      	ldr	r3, [pc, #596]	@ (8001244 <main+0x2d4>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d11a      	bne.n	800102c <main+0xbc>
		  transmit_uart("Elija una opcion\n");
 8000ff6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ffa:	469c      	mov	ip, r3
 8000ffc:	4893      	ldr	r0, [pc, #588]	@ (800124c <main+0x2dc>)
 8000ffe:	f7ff ff9f 	bl	8000f40 <transmit_uart.0>
		  transmit_uart("Imagen a\n");
 8001002:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001006:	469c      	mov	ip, r3
 8001008:	4891      	ldr	r0, [pc, #580]	@ (8001250 <main+0x2e0>)
 800100a:	f7ff ff99 	bl	8000f40 <transmit_uart.0>
		  transmit_uart("Imagen b\n");
 800100e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001012:	469c      	mov	ip, r3
 8001014:	488f      	ldr	r0, [pc, #572]	@ (8001254 <main+0x2e4>)
 8001016:	f7ff ff93 	bl	8000f40 <transmit_uart.0>
		  transmit_uart("Imagen c\n");
 800101a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800101e:	469c      	mov	ip, r3
 8001020:	488d      	ldr	r0, [pc, #564]	@ (8001258 <main+0x2e8>)
 8001022:	f7ff ff8d 	bl	8000f40 <transmit_uart.0>
		  start = 0;
 8001026:	4b87      	ldr	r3, [pc, #540]	@ (8001244 <main+0x2d4>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
	  }


	  if(data[0] == 'a'){
 800102c:	4b7f      	ldr	r3, [pc, #508]	@ (800122c <main+0x2bc>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b61      	cmp	r3, #97	@ 0x61
 8001032:	d17a      	bne.n	800112a <main+0x1ba>
		  fres = f_open(&fil, "mario.txt", FA_READ); //FA_OPEN_APPEND |  | FA_WRITE
 8001034:	2201      	movs	r2, #1
 8001036:	4989      	ldr	r1, [pc, #548]	@ (800125c <main+0x2ec>)
 8001038:	4889      	ldr	r0, [pc, #548]	@ (8001260 <main+0x2f0>)
 800103a:	f005 fcff 	bl	8006a3c <f_open>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b7e      	ldr	r3, [pc, #504]	@ (800123c <main+0x2cc>)
 8001044:	701a      	strb	r2, [r3, #0]
		  if(fres == FR_OK){
 8001046:	4b7d      	ldr	r3, [pc, #500]	@ (800123c <main+0x2cc>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d109      	bne.n	8001062 <main+0xf2>
			  transmit_uart("File opened for reading.\n");
 800104e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001052:	469c      	mov	ip, r3
 8001054:	4883      	ldr	r0, [pc, #524]	@ (8001264 <main+0x2f4>)
 8001056:	f7ff ff73 	bl	8000f40 <transmit_uart.0>
		  	  leer = 1;
 800105a:	4b83      	ldr	r3, [pc, #524]	@ (8001268 <main+0x2f8>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e00c      	b.n	800107c <main+0x10c>
		  }else if(fres != FR_OK){
 8001062:	4b76      	ldr	r3, [pc, #472]	@ (800123c <main+0x2cc>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d008      	beq.n	800107c <main+0x10c>
		  	  transmit_uart("File was not opened for reading!\n");
 800106a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800106e:	469c      	mov	ip, r3
 8001070:	487e      	ldr	r0, [pc, #504]	@ (800126c <main+0x2fc>)
 8001072:	f7ff ff65 	bl	8000f40 <transmit_uart.0>
		  	  leer = 0;
 8001076:	4b7c      	ldr	r3, [pc, #496]	@ (8001268 <main+0x2f8>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
		  }
		  if (leer == 1){
 800107c:	4b7a      	ldr	r3, [pc, #488]	@ (8001268 <main+0x2f8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d118      	bne.n	80010b6 <main+0x146>
		  	  while(f_gets(buffer, sizeof(buffer), &fil)){
 8001084:	e00c      	b.n	80010a0 <main+0x130>
		  		  char mRd[100];
		  		  sprintf(mRd, "%s", buffer);
 8001086:	463b      	mov	r3, r7
 8001088:	4a79      	ldr	r2, [pc, #484]	@ (8001270 <main+0x300>)
 800108a:	497a      	ldr	r1, [pc, #488]	@ (8001274 <main+0x304>)
 800108c:	4618      	mov	r0, r3
 800108e:	f006 fa05 	bl	800749c <siprintf>
		  		  transmit_uart(mRd);
 8001092:	463b      	mov	r3, r7
 8001094:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001098:	4694      	mov	ip, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff50 	bl	8000f40 <transmit_uart.0>
		  	  while(f_gets(buffer, sizeof(buffer), &fil)){
 80010a0:	4a6f      	ldr	r2, [pc, #444]	@ (8001260 <main+0x2f0>)
 80010a2:	2164      	movs	r1, #100	@ 0x64
 80010a4:	4872      	ldr	r0, [pc, #456]	@ (8001270 <main+0x300>)
 80010a6:	f006 f898 	bl	80071da <f_gets>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1ea      	bne.n	8001086 <main+0x116>
		  	  }

		  	  leer = 0;
 80010b0:	4b6d      	ldr	r3, [pc, #436]	@ (8001268 <main+0x2f8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
		  }
		  fres = f_close(&fil);
 80010b6:	486a      	ldr	r0, [pc, #424]	@ (8001260 <main+0x2f0>)
 80010b8:	f006 f865 	bl	8007186 <f_close>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	4b5e      	ldr	r3, [pc, #376]	@ (800123c <main+0x2cc>)
 80010c2:	701a      	strb	r2, [r3, #0]
		  if(fres == FR_OK){
 80010c4:	4b5d      	ldr	r3, [pc, #372]	@ (800123c <main+0x2cc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d106      	bne.n	80010da <main+0x16a>
			  transmit_uart("The file is closed\n");
 80010cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010d0:	469c      	mov	ip, r3
 80010d2:	4869      	ldr	r0, [pc, #420]	@ (8001278 <main+0x308>)
 80010d4:	f7ff ff34 	bl	8000f40 <transmit_uart.0>
 80010d8:	e009      	b.n	80010ee <main+0x17e>
		  }else if(fres != FR_OK){
 80010da:	4b58      	ldr	r3, [pc, #352]	@ (800123c <main+0x2cc>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <main+0x17e>
		  	  transmit_uart("The file was not closed\n");
 80010e2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e6:	469c      	mov	ip, r3
 80010e8:	4864      	ldr	r0, [pc, #400]	@ (800127c <main+0x30c>)
 80010ea:	f7ff ff29 	bl	8000f40 <transmit_uart.0>
		  }
		  f_mount(NULL,"",1);
 80010ee:	2201      	movs	r2, #1
 80010f0:	4963      	ldr	r1, [pc, #396]	@ (8001280 <main+0x310>)
 80010f2:	2000      	movs	r0, #0
 80010f4:	f005 fc5c 	bl	80069b0 <f_mount>
		  if(fres == FR_OK){
 80010f8:	4b50      	ldr	r3, [pc, #320]	@ (800123c <main+0x2cc>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d106      	bne.n	800110e <main+0x19e>
			  transmit_uart("The micro SD card is unmounted!\n");
 8001100:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001104:	469c      	mov	ip, r3
 8001106:	485f      	ldr	r0, [pc, #380]	@ (8001284 <main+0x314>)
 8001108:	f7ff ff1a 	bl	8000f40 <transmit_uart.0>
 800110c:	e009      	b.n	8001122 <main+0x1b2>
		  }else if(fres!= FR_OK){
 800110e:	4b4b      	ldr	r3, [pc, #300]	@ (800123c <main+0x2cc>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <main+0x1b2>
		  	  transmit_uart("The micro SD was not unmountad!\n");
 8001116:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800111a:	469c      	mov	ip, r3
 800111c:	485a      	ldr	r0, [pc, #360]	@ (8001288 <main+0x318>)
 800111e:	f7ff ff0f 	bl	8000f40 <transmit_uart.0>
		  }
		  data[0] = 'd';
 8001122:	4b42      	ldr	r3, [pc, #264]	@ (800122c <main+0x2bc>)
 8001124:	2264      	movs	r2, #100	@ 0x64
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e761      	b.n	8000fee <main+0x7e>
	  }else if(data[0] == 'b'){
 800112a:	4b40      	ldr	r3, [pc, #256]	@ (800122c <main+0x2bc>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b62      	cmp	r3, #98	@ 0x62
 8001130:	f040 80ae 	bne.w	8001290 <main+0x320>
		  fres = f_open(&fil, "dragon.txt", FA_READ); //FA_OPEN_APPEND |  | FA_WRITE
 8001134:	2201      	movs	r2, #1
 8001136:	4955      	ldr	r1, [pc, #340]	@ (800128c <main+0x31c>)
 8001138:	4849      	ldr	r0, [pc, #292]	@ (8001260 <main+0x2f0>)
 800113a:	f005 fc7f 	bl	8006a3c <f_open>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b3e      	ldr	r3, [pc, #248]	@ (800123c <main+0x2cc>)
 8001144:	701a      	strb	r2, [r3, #0]
		  if(fres == FR_OK){
 8001146:	4b3d      	ldr	r3, [pc, #244]	@ (800123c <main+0x2cc>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d109      	bne.n	8001162 <main+0x1f2>
			  transmit_uart("File opened for reading.\n");
 800114e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001152:	469c      	mov	ip, r3
 8001154:	4843      	ldr	r0, [pc, #268]	@ (8001264 <main+0x2f4>)
 8001156:	f7ff fef3 	bl	8000f40 <transmit_uart.0>
			  leer = 1;
 800115a:	4b43      	ldr	r3, [pc, #268]	@ (8001268 <main+0x2f8>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e00c      	b.n	800117c <main+0x20c>
		  }else if(fres != FR_OK){
 8001162:	4b36      	ldr	r3, [pc, #216]	@ (800123c <main+0x2cc>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d008      	beq.n	800117c <main+0x20c>
			  transmit_uart("File was not opened for reading!\n");
 800116a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800116e:	469c      	mov	ip, r3
 8001170:	483e      	ldr	r0, [pc, #248]	@ (800126c <main+0x2fc>)
 8001172:	f7ff fee5 	bl	8000f40 <transmit_uart.0>
			  leer = 0;
 8001176:	4b3c      	ldr	r3, [pc, #240]	@ (8001268 <main+0x2f8>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
		  }
		  if (leer == 1){
 800117c:	4b3a      	ldr	r3, [pc, #232]	@ (8001268 <main+0x2f8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d118      	bne.n	80011b6 <main+0x246>
			  while(f_gets(buffer, sizeof(buffer), &fil)){
 8001184:	e00c      	b.n	80011a0 <main+0x230>
				  char mRd[100];
		  		  sprintf(mRd, "%s", buffer);
 8001186:	463b      	mov	r3, r7
 8001188:	4a39      	ldr	r2, [pc, #228]	@ (8001270 <main+0x300>)
 800118a:	493a      	ldr	r1, [pc, #232]	@ (8001274 <main+0x304>)
 800118c:	4618      	mov	r0, r3
 800118e:	f006 f985 	bl	800749c <siprintf>
		  		  transmit_uart(mRd);
 8001192:	463b      	mov	r3, r7
 8001194:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001198:	4694      	mov	ip, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fed0 	bl	8000f40 <transmit_uart.0>
			  while(f_gets(buffer, sizeof(buffer), &fil)){
 80011a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001260 <main+0x2f0>)
 80011a2:	2164      	movs	r1, #100	@ 0x64
 80011a4:	4832      	ldr	r0, [pc, #200]	@ (8001270 <main+0x300>)
 80011a6:	f006 f818 	bl	80071da <f_gets>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ea      	bne.n	8001186 <main+0x216>
			  }

			  leer = 0;
 80011b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001268 <main+0x2f8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
		  }
		  fres = f_close(&fil);
 80011b6:	482a      	ldr	r0, [pc, #168]	@ (8001260 <main+0x2f0>)
 80011b8:	f005 ffe5 	bl	8007186 <f_close>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <main+0x2cc>)
 80011c2:	701a      	strb	r2, [r3, #0]
		  if(fres == FR_OK){
 80011c4:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <main+0x2cc>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d106      	bne.n	80011da <main+0x26a>
			  transmit_uart("The file is closed\n");
 80011cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011d0:	469c      	mov	ip, r3
 80011d2:	4829      	ldr	r0, [pc, #164]	@ (8001278 <main+0x308>)
 80011d4:	f7ff feb4 	bl	8000f40 <transmit_uart.0>
 80011d8:	e009      	b.n	80011ee <main+0x27e>
		  }else if(fres != FR_OK){
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <main+0x2cc>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <main+0x27e>
			  transmit_uart("The file was not closed\n");
 80011e2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011e6:	469c      	mov	ip, r3
 80011e8:	4824      	ldr	r0, [pc, #144]	@ (800127c <main+0x30c>)
 80011ea:	f7ff fea9 	bl	8000f40 <transmit_uart.0>
		  }
		  f_mount(NULL,"",1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	4923      	ldr	r1, [pc, #140]	@ (8001280 <main+0x310>)
 80011f2:	2000      	movs	r0, #0
 80011f4:	f005 fbdc 	bl	80069b0 <f_mount>
		  if(fres == FR_OK){
 80011f8:	4b10      	ldr	r3, [pc, #64]	@ (800123c <main+0x2cc>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d106      	bne.n	800120e <main+0x29e>
			  transmit_uart("The micro SD card is unmounted!\n");
 8001200:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001204:	469c      	mov	ip, r3
 8001206:	481f      	ldr	r0, [pc, #124]	@ (8001284 <main+0x314>)
 8001208:	f7ff fe9a 	bl	8000f40 <transmit_uart.0>
 800120c:	e009      	b.n	8001222 <main+0x2b2>
		  }else if(fres!= FR_OK){
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <main+0x2cc>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <main+0x2b2>
			  transmit_uart("The micro SD was not unmountad!\n");
 8001216:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800121a:	469c      	mov	ip, r3
 800121c:	481a      	ldr	r0, [pc, #104]	@ (8001288 <main+0x318>)
 800121e:	f7ff fe8f 	bl	8000f40 <transmit_uart.0>
		  }
		  data[0] = 'd';
 8001222:	4b02      	ldr	r3, [pc, #8]	@ (800122c <main+0x2bc>)
 8001224:	2264      	movs	r2, #100	@ 0x64
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	e6e1      	b.n	8000fee <main+0x7e>
 800122a:	bf00      	nop
 800122c:	20002208 	.word	0x20002208
 8001230:	200000f0 	.word	0x200000f0
 8001234:	08007df4 	.word	0x08007df4
 8001238:	20000138 	.word	0x20000138
 800123c:	200021a0 	.word	0x200021a0
 8001240:	08007df8 	.word	0x08007df8
 8001244:	20002212 	.word	0x20002212
 8001248:	08007e20 	.word	0x08007e20
 800124c:	08007e40 	.word	0x08007e40
 8001250:	08007e54 	.word	0x08007e54
 8001254:	08007e60 	.word	0x08007e60
 8001258:	08007e6c 	.word	0x08007e6c
 800125c:	08007e78 	.word	0x08007e78
 8001260:	20001170 	.word	0x20001170
 8001264:	08007e84 	.word	0x08007e84
 8001268:	20002213 	.word	0x20002213
 800126c:	08007ea0 	.word	0x08007ea0
 8001270:	200021a4 	.word	0x200021a4
 8001274:	08007ec4 	.word	0x08007ec4
 8001278:	08007ec8 	.word	0x08007ec8
 800127c:	08007edc 	.word	0x08007edc
 8001280:	08007ef8 	.word	0x08007ef8
 8001284:	08007efc 	.word	0x08007efc
 8001288:	08007f20 	.word	0x08007f20
 800128c:	08007f44 	.word	0x08007f44

	  }else if(data[0] == 'c'){
 8001290:	4b3f      	ldr	r3, [pc, #252]	@ (8001390 <main+0x420>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b63      	cmp	r3, #99	@ 0x63
 8001296:	f47f aeaa 	bne.w	8000fee <main+0x7e>
		  fres = f_open(&fil, "pikred.txt", FA_READ); //FA_OPEN_APPEND |  | FA_WRITE
 800129a:	2201      	movs	r2, #1
 800129c:	493d      	ldr	r1, [pc, #244]	@ (8001394 <main+0x424>)
 800129e:	483e      	ldr	r0, [pc, #248]	@ (8001398 <main+0x428>)
 80012a0:	f005 fbcc 	bl	8006a3c <f_open>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b3c      	ldr	r3, [pc, #240]	@ (800139c <main+0x42c>)
 80012aa:	701a      	strb	r2, [r3, #0]
		  if(fres == FR_OK){
 80012ac:	4b3b      	ldr	r3, [pc, #236]	@ (800139c <main+0x42c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <main+0x358>
			  transmit_uart("File opened for reading.\n");
 80012b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012b8:	469c      	mov	ip, r3
 80012ba:	4839      	ldr	r0, [pc, #228]	@ (80013a0 <main+0x430>)
 80012bc:	f7ff fe40 	bl	8000f40 <transmit_uart.0>
			  leer = 1;
 80012c0:	4b38      	ldr	r3, [pc, #224]	@ (80013a4 <main+0x434>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	e00c      	b.n	80012e2 <main+0x372>
		  }else if(fres != FR_OK){
 80012c8:	4b34      	ldr	r3, [pc, #208]	@ (800139c <main+0x42c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <main+0x372>
			  transmit_uart("File was not opened for reading!\n");
 80012d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012d4:	469c      	mov	ip, r3
 80012d6:	4834      	ldr	r0, [pc, #208]	@ (80013a8 <main+0x438>)
 80012d8:	f7ff fe32 	bl	8000f40 <transmit_uart.0>
			  leer = 0;
 80012dc:	4b31      	ldr	r3, [pc, #196]	@ (80013a4 <main+0x434>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
		  }
		  if (leer == 1){
 80012e2:	4b30      	ldr	r3, [pc, #192]	@ (80013a4 <main+0x434>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d118      	bne.n	800131c <main+0x3ac>
			  while(f_gets(buffer, sizeof(buffer), &fil)){
 80012ea:	e00c      	b.n	8001306 <main+0x396>
				  char mRd[100];
		  		  sprintf(mRd, "%s", buffer);
 80012ec:	463b      	mov	r3, r7
 80012ee:	4a2f      	ldr	r2, [pc, #188]	@ (80013ac <main+0x43c>)
 80012f0:	492f      	ldr	r1, [pc, #188]	@ (80013b0 <main+0x440>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 f8d2 	bl	800749c <siprintf>
		  		  transmit_uart(mRd);
 80012f8:	463b      	mov	r3, r7
 80012fa:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80012fe:	4694      	mov	ip, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fe1d 	bl	8000f40 <transmit_uart.0>
			  while(f_gets(buffer, sizeof(buffer), &fil)){
 8001306:	4a24      	ldr	r2, [pc, #144]	@ (8001398 <main+0x428>)
 8001308:	2164      	movs	r1, #100	@ 0x64
 800130a:	4828      	ldr	r0, [pc, #160]	@ (80013ac <main+0x43c>)
 800130c:	f005 ff65 	bl	80071da <f_gets>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ea      	bne.n	80012ec <main+0x37c>
			  }

			  leer = 0;
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <main+0x434>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
		  }
		  fres = f_close(&fil);
 800131c:	481e      	ldr	r0, [pc, #120]	@ (8001398 <main+0x428>)
 800131e:	f005 ff32 	bl	8007186 <f_close>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <main+0x42c>)
 8001328:	701a      	strb	r2, [r3, #0]
		  if(fres == FR_OK){
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <main+0x42c>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <main+0x3d0>
			  transmit_uart("The file is closed\n");
 8001332:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001336:	469c      	mov	ip, r3
 8001338:	481e      	ldr	r0, [pc, #120]	@ (80013b4 <main+0x444>)
 800133a:	f7ff fe01 	bl	8000f40 <transmit_uart.0>
 800133e:	e009      	b.n	8001354 <main+0x3e4>
		  }else if(fres != FR_OK){
 8001340:	4b16      	ldr	r3, [pc, #88]	@ (800139c <main+0x42c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <main+0x3e4>
			  transmit_uart("The file was not closed\n");
 8001348:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800134c:	469c      	mov	ip, r3
 800134e:	481a      	ldr	r0, [pc, #104]	@ (80013b8 <main+0x448>)
 8001350:	f7ff fdf6 	bl	8000f40 <transmit_uart.0>
		  }
		  f_mount(NULL,"",1);
 8001354:	2201      	movs	r2, #1
 8001356:	4919      	ldr	r1, [pc, #100]	@ (80013bc <main+0x44c>)
 8001358:	2000      	movs	r0, #0
 800135a:	f005 fb29 	bl	80069b0 <f_mount>
		  if(fres == FR_OK){
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <main+0x42c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d106      	bne.n	8001374 <main+0x404>
			  transmit_uart("The micro SD card is unmounted!\n");
 8001366:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800136a:	469c      	mov	ip, r3
 800136c:	4814      	ldr	r0, [pc, #80]	@ (80013c0 <main+0x450>)
 800136e:	f7ff fde7 	bl	8000f40 <transmit_uart.0>
 8001372:	e009      	b.n	8001388 <main+0x418>
		  }else if(fres!= FR_OK){
 8001374:	4b09      	ldr	r3, [pc, #36]	@ (800139c <main+0x42c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <main+0x418>
			  transmit_uart("The micro SD was not unmountad!\n");
 800137c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001380:	469c      	mov	ip, r3
 8001382:	4810      	ldr	r0, [pc, #64]	@ (80013c4 <main+0x454>)
 8001384:	f7ff fddc 	bl	8000f40 <transmit_uart.0>
		  }
		  data[0] = 'd';
 8001388:	4b01      	ldr	r3, [pc, #4]	@ (8001390 <main+0x420>)
 800138a:	2264      	movs	r2, #100	@ 0x64
 800138c:	701a      	strb	r2, [r3, #0]
	  if(start == 1){
 800138e:	e62e      	b.n	8000fee <main+0x7e>
 8001390:	20002208 	.word	0x20002208
 8001394:	08007f50 	.word	0x08007f50
 8001398:	20001170 	.word	0x20001170
 800139c:	200021a0 	.word	0x200021a0
 80013a0:	08007e84 	.word	0x08007e84
 80013a4:	20002213 	.word	0x20002213
 80013a8:	08007ea0 	.word	0x08007ea0
 80013ac:	200021a4 	.word	0x200021a4
 80013b0:	08007ec4 	.word	0x08007ec4
 80013b4:	08007ec8 	.word	0x08007ec8
 80013b8:	08007edc 	.word	0x08007edc
 80013bc:	08007ef8 	.word	0x08007ef8
 80013c0:	08007efc 	.word	0x08007efc
 80013c4:	08007f20 	.word	0x08007f20

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	@ 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	2234      	movs	r2, #52	@ 0x34
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f006 f880 	bl	80074dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <SystemClock_Config+0xb8>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	4a22      	ldr	r2, [pc, #136]	@ (8001480 <SystemClock_Config+0xb8>)
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fc:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <SystemClock_Config+0xb8>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <SystemClock_Config+0xbc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001414:	4a1b      	ldr	r2, [pc, #108]	@ (8001484 <SystemClock_Config+0xbc>)
 8001416:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <SystemClock_Config+0xbc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001428:	2302      	movs	r3, #2
 800142a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	2301      	movs	r3, #1
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001430:	2310      	movs	r3, #16
 8001432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001434:	2300      	movs	r3, #0
 8001436:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4618      	mov	r0, r3
 800143e:	f001 f929 	bl	8002694 <HAL_RCC_OscConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001448:	f000 f8e0 	bl	800160c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144c:	230f      	movs	r3, #15
 800144e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fe50 	bl	800210c <HAL_RCC_ClockConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001472:	f000 f8cb 	bl	800160c <Error_Handler>
  }
}
 8001476:	bf00      	nop
 8001478:	3750      	adds	r7, #80	@ 0x50
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40007000 	.word	0x40007000

08001488 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800148c:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <MX_SPI1_Init+0x64>)
 800148e:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <MX_SPI1_Init+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <MX_SPI1_Init+0x64>)
 8001494:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001498:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800149a:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_SPI1_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <MX_SPI1_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_SPI1_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <MX_SPI1_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <MX_SPI1_Init+0x64>)
 80014b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <MX_SPI1_Init+0x64>)
 80014bc:	2210      	movs	r2, #16
 80014be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <MX_SPI1_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <MX_SPI1_Init+0x64>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <MX_SPI1_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <MX_SPI1_Init+0x64>)
 80014d4:	220a      	movs	r2, #10
 80014d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	@ (80014ec <MX_SPI1_Init+0x64>)
 80014da:	f001 fb79 	bl	8002bd0 <HAL_SPI_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014e4:	f000 f892 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000098 	.word	0x20000098
 80014f0:	40013000 	.word	0x40013000

080014f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <MX_USART2_UART_Init+0x50>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001500:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 800152c:	f001 ffa2 	bl	8003474 <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001536:	f000 f869 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200000f0 	.word	0x200000f0
 8001544:	40004400 	.word	0x40004400

08001548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_GPIO_Init+0x98>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a1e      	ldr	r2, [pc, #120]	@ (80015e0 <MX_GPIO_Init+0x98>)
 8001568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_GPIO_Init+0x98>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <MX_GPIO_Init+0x98>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <MX_GPIO_Init+0x98>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <MX_GPIO_Init+0x98>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <MX_GPIO_Init+0x98>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a10      	ldr	r2, [pc, #64]	@ (80015e0 <MX_GPIO_Init+0x98>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <MX_GPIO_Init+0x98>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2140      	movs	r1, #64	@ 0x40
 80015b6:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <MX_GPIO_Init+0x9c>)
 80015b8:	f000 fd8e 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 80015bc:	2340      	movs	r3, #64	@ 0x40
 80015be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4619      	mov	r1, r3
 80015d2:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_GPIO_Init+0x9c>)
 80015d4:	f000 fbec 	bl	8001db0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d8:	bf00      	nop
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020400 	.word	0x40020400

080015e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, data, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	4904      	ldr	r1, [pc, #16]	@ (8001604 <HAL_UART_RxCpltCallback+0x1c>)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <HAL_UART_RxCpltCallback+0x20>)
 80015f6:	f002 f818 	bl	800362a <HAL_UART_Receive_IT>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20002208 	.word	0x20002208
 8001608:	200000f0 	.word	0x200000f0

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <Error_Handler+0x8>

08001618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	4a0f      	ldr	r2, [pc, #60]	@ (8001664 <HAL_MspInit+0x4c>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800162c:	6453      	str	r3, [r2, #68]	@ 0x44
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_MspInit+0x4c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a19      	ldr	r2, [pc, #100]	@ (80016ec <HAL_SPI_MspInit+0x84>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12b      	bne.n	80016e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 8001694:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001698:	6453      	str	r3, [r2, #68]	@ 0x44
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a10      	ldr	r2, [pc, #64]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_SPI_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016c2:	23e0      	movs	r3, #224	@ 0xe0
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016d2:	2305      	movs	r3, #5
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <HAL_SPI_MspInit+0x8c>)
 80016de:	f000 fb67 	bl	8001db0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	@ 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40013000 	.word	0x40013000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000

080016f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <HAL_UART_MspInit+0x94>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d133      	bne.n	8001782 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <HAL_UART_MspInit+0x98>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	4a1b      	ldr	r2, [pc, #108]	@ (8001790 <HAL_UART_MspInit+0x98>)
 8001724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001728:	6413      	str	r3, [r2, #64]	@ 0x40
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_UART_MspInit+0x98>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_UART_MspInit+0x98>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a14      	ldr	r2, [pc, #80]	@ (8001790 <HAL_UART_MspInit+0x98>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_UART_MspInit+0x98>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001752:	230c      	movs	r3, #12
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001762:	2307      	movs	r3, #7
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4809      	ldr	r0, [pc, #36]	@ (8001794 <HAL_UART_MspInit+0x9c>)
 800176e:	f000 fb1f 	bl	8001db0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2026      	movs	r0, #38	@ 0x26
 8001778:	f000 fa45 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800177c:	2026      	movs	r0, #38	@ 0x26
 800177e:	f000 fa5e 	bl	8001c3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	@ 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40004400 	.word	0x40004400
 8001790:	40023800 	.word	0x40023800
 8001794:	40020000 	.word	0x40020000

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <NMI_Handler+0x4>

080017a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <MemManage_Handler+0x4>

080017b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <UsageFault_Handler+0x4>

080017c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1>0){
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <SysTick_Handler+0x38>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <SysTick_Handler+0x18>
		Timer1--;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <SysTick_Handler+0x38>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <SysTick_Handler+0x38>)
 8001802:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2>0){
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <SysTick_Handler+0x3c>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <SysTick_Handler+0x2c>
		Timer2--;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <SysTick_Handler+0x3c>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	3b01      	subs	r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <SysTick_Handler+0x3c>)
 8001816:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001818:	f000 f8d6 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800181c:	f000 fa29 	bl	8001c72 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000090 	.word	0x20000090
 8001828:	20000092 	.word	0x20000092

0800182c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <USART2_IRQHandler+0x10>)
 8001832:	f001 ff1f 	bl	8003674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200000f0 	.word	0x200000f0

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	@ (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f005 fe3c 	bl	80074ec <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20020000 	.word	0x20020000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20002214 	.word	0x20002214
 80018a8:	200025a0 	.word	0x200025a0

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001908 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018d4:	f7ff ffea 	bl	80018ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d8:	480c      	ldr	r0, [pc, #48]	@ (800190c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018da:	490d      	ldr	r1, [pc, #52]	@ (8001910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f0:	4c0a      	ldr	r4, [pc, #40]	@ (800191c <LoopFillZerobss+0x22>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f005 fdfb 	bl	80074f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff fb35 	bl	8000f70 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001914:	08008440 	.word	0x08008440
  ldr r2, =_sbss
 8001918:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800191c:	200025a0 	.word	0x200025a0

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f94f 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	200f      	movs	r0, #15
 8001954:	f000 f808 	bl	8001968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fe5e 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_InitTick+0x54>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_InitTick+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f967 	bl	8001c5a <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d80a      	bhi.n	80019b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f000 f92f 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a8:	4a06      	ldr	r2, [pc, #24]	@ (80019c4 <HAL_InitTick+0x5c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000004 	.word	0x20000004
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	20000008 	.word	0x20000008

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2000000c 	.word	0x2000000c
 80019ec:	20002218 	.word	0x20002218

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20002218 	.word	0x20002218

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000000c 	.word	0x2000000c

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	@ (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	@ (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	@ (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	@ 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	@ 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff3e 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff8e 	bl	8001b44 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5d 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff31 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001c76:	f000 f802 	bl	8001c7e <HAL_SYSTICK_Callback>
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c9a:	f7ff fea9 	bl	80019f0 <HAL_GetTick>
 8001c9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d008      	beq.n	8001cbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2280      	movs	r2, #128	@ 0x80
 8001cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e052      	b.n	8001d64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0216 	bic.w	r2, r2, #22
 8001ccc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d103      	bne.n	8001cee <HAL_DMA_Abort+0x62>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0208 	bic.w	r2, r2, #8
 8001cfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0e:	e013      	b.n	8001d38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d10:	f7ff fe6e 	bl	80019f0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d90c      	bls.n	8001d38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2220      	movs	r2, #32
 8001d22:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2203      	movs	r2, #3
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e015      	b.n	8001d64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1e4      	bne.n	8001d10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4a:	223f      	movs	r2, #63	@ 0x3f
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d004      	beq.n	8001d8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2280      	movs	r2, #128	@ 0x80
 8001d84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00c      	b.n	8001da4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0201 	bic.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e165      	b.n	8002098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	f040 8154 	bne.w	8002092 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d005      	beq.n	8001e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d130      	bne.n	8001e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 0201 	and.w	r2, r3, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d017      	beq.n	8001ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d123      	bne.n	8001ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3208      	adds	r2, #8
 8001eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0203 	and.w	r2, r3, #3
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80ae 	beq.w	8002092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80020b0 <HAL_GPIO_Init+0x300>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	4a5c      	ldr	r2, [pc, #368]	@ (80020b0 <HAL_GPIO_Init+0x300>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f46:	4b5a      	ldr	r3, [pc, #360]	@ (80020b0 <HAL_GPIO_Init+0x300>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f52:	4a58      	ldr	r2, [pc, #352]	@ (80020b4 <HAL_GPIO_Init+0x304>)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4f      	ldr	r2, [pc, #316]	@ (80020b8 <HAL_GPIO_Init+0x308>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d025      	beq.n	8001fca <HAL_GPIO_Init+0x21a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4e      	ldr	r2, [pc, #312]	@ (80020bc <HAL_GPIO_Init+0x30c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01f      	beq.n	8001fc6 <HAL_GPIO_Init+0x216>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4d      	ldr	r2, [pc, #308]	@ (80020c0 <HAL_GPIO_Init+0x310>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d019      	beq.n	8001fc2 <HAL_GPIO_Init+0x212>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4c      	ldr	r2, [pc, #304]	@ (80020c4 <HAL_GPIO_Init+0x314>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0x20e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4b      	ldr	r2, [pc, #300]	@ (80020c8 <HAL_GPIO_Init+0x318>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00d      	beq.n	8001fba <HAL_GPIO_Init+0x20a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80020cc <HAL_GPIO_Init+0x31c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <HAL_GPIO_Init+0x206>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a49      	ldr	r2, [pc, #292]	@ (80020d0 <HAL_GPIO_Init+0x320>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_GPIO_Init+0x202>
 8001fae:	2306      	movs	r3, #6
 8001fb0:	e00c      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fb2:	2307      	movs	r3, #7
 8001fb4:	e00a      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	e008      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e004      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	f002 0203 	and.w	r2, r2, #3
 8001fd2:	0092      	lsls	r2, r2, #2
 8001fd4:	4093      	lsls	r3, r2
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fdc:	4935      	ldr	r1, [pc, #212]	@ (80020b4 <HAL_GPIO_Init+0x304>)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fea:	4b3a      	ldr	r3, [pc, #232]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800200e:	4a31      	ldr	r2, [pc, #196]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002014:	4b2f      	ldr	r3, [pc, #188]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002038:	4a26      	ldr	r2, [pc, #152]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800203e:	4b25      	ldr	r3, [pc, #148]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002062:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800208c:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3301      	adds	r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	2b0f      	cmp	r3, #15
 800209c:	f67f ae96 	bls.w	8001dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3724      	adds	r7, #36	@ 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40013800 	.word	0x40013800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40020400 	.word	0x40020400
 80020c0:	40020800 	.word	0x40020800
 80020c4:	40020c00 	.word	0x40020c00
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40021400 	.word	0x40021400
 80020d0:	40021800 	.word	0x40021800
 80020d4:	40013c00 	.word	0x40013c00

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f4:	e003      	b.n	80020fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	041a      	lsls	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	619a      	str	r2, [r3, #24]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0cc      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b68      	ldr	r3, [pc, #416]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d90c      	bls.n	8002148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b65      	ldr	r3, [pc, #404]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b63      	ldr	r3, [pc, #396]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0b8      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002160:	4b59      	ldr	r3, [pc, #356]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a58      	ldr	r2, [pc, #352]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800216a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002178:	4b53      	ldr	r3, [pc, #332]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a52      	ldr	r2, [pc, #328]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b50      	ldr	r3, [pc, #320]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	494d      	ldr	r1, [pc, #308]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d044      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b47      	ldr	r3, [pc, #284]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d119      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d003      	beq.n	80021ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b3f      	ldr	r3, [pc, #252]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3b      	ldr	r3, [pc, #236]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e067      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b37      	ldr	r3, [pc, #220]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4934      	ldr	r1, [pc, #208]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7ff fbf8 	bl	80019f0 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7ff fbf4 	bl	80019f0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e04f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b25      	ldr	r3, [pc, #148]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d20c      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b20      	ldr	r3, [pc, #128]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e032      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4916      	ldr	r1, [pc, #88]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227e:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	490e      	ldr	r1, [pc, #56]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002292:	f000 f855 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 8002296:	4602      	mov	r2, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	490a      	ldr	r1, [pc, #40]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	5ccb      	ldrb	r3, [r1, r3]
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	4a09      	ldr	r2, [pc, #36]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fb58 	bl	8001968 <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00
 80022c8:	40023800 	.word	0x40023800
 80022cc:	08007fa4 	.word	0x08007fa4
 80022d0:	20000004 	.word	0x20000004
 80022d4:	20000008 	.word	0x20000008

080022d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022dc:	4b03      	ldr	r3, [pc, #12]	@ (80022ec <HAL_RCC_GetHCLKFreq+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000004 	.word	0x20000004

080022f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f4:	f7ff fff0 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	0a9b      	lsrs	r3, r3, #10
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4903      	ldr	r1, [pc, #12]	@ (8002314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002306:	5ccb      	ldrb	r3, [r1, r3]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	08007fb4 	.word	0x08007fb4

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800231c:	f7ff ffdc 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0b5b      	lsrs	r3, r3, #13
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	@ (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	08007fb4 	.word	0x08007fb4

08002340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002344:	b0a6      	sub	sp, #152	@ 0x98
 8002346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002366:	4bc8      	ldr	r3, [pc, #800]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x348>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b0c      	cmp	r3, #12
 8002370:	f200 817e 	bhi.w	8002670 <HAL_RCC_GetSysClockFreq+0x330>
 8002374:	a201      	add	r2, pc, #4	@ (adr r2, 800237c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023b1 	.word	0x080023b1
 8002380:	08002671 	.word	0x08002671
 8002384:	08002671 	.word	0x08002671
 8002388:	08002671 	.word	0x08002671
 800238c:	080023b9 	.word	0x080023b9
 8002390:	08002671 	.word	0x08002671
 8002394:	08002671 	.word	0x08002671
 8002398:	08002671 	.word	0x08002671
 800239c:	080023c1 	.word	0x080023c1
 80023a0:	08002671 	.word	0x08002671
 80023a4:	08002671 	.word	0x08002671
 80023a8:	08002671 	.word	0x08002671
 80023ac:	0800252b 	.word	0x0800252b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4bb6      	ldr	r3, [pc, #728]	@ (800268c <HAL_RCC_GetSysClockFreq+0x34c>)
 80023b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80023b6:	e15f      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023b8:	4bb5      	ldr	r3, [pc, #724]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x350>)
 80023ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80023be:	e15b      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c0:	4bb1      	ldr	r3, [pc, #708]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x348>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023cc:	4bae      	ldr	r3, [pc, #696]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x348>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d031      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d8:	4bab      	ldr	r3, [pc, #684]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x348>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	2200      	movs	r2, #0
 80023e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80023ec:	2300      	movs	r3, #0
 80023ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80023f0:	4ba7      	ldr	r3, [pc, #668]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x350>)
 80023f2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80023f6:	462a      	mov	r2, r5
 80023f8:	fb03 f202 	mul.w	r2, r3, r2
 80023fc:	2300      	movs	r3, #0
 80023fe:	4621      	mov	r1, r4
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	4aa2      	ldr	r2, [pc, #648]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x350>)
 8002408:	4621      	mov	r1, r4
 800240a:	fba1 1202 	umull	r1, r2, r1, r2
 800240e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002410:	460a      	mov	r2, r1
 8002412:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002414:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002416:	4413      	add	r3, r2
 8002418:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800241a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800241e:	2200      	movs	r2, #0
 8002420:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002422:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002424:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002428:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800242c:	f7fd ff48 	bl	80002c0 <__aeabi_uldivmod>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4613      	mov	r3, r2
 8002436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800243a:	e064      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243c:	4b92      	ldr	r3, [pc, #584]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x348>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	2200      	movs	r2, #0
 8002444:	653b      	str	r3, [r7, #80]	@ 0x50
 8002446:	657a      	str	r2, [r7, #84]	@ 0x54
 8002448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800244a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002450:	2300      	movs	r3, #0
 8002452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002454:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002458:	4622      	mov	r2, r4
 800245a:	462b      	mov	r3, r5
 800245c:	f04f 0000 	mov.w	r0, #0
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	0159      	lsls	r1, r3, #5
 8002466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800246a:	0150      	lsls	r0, r2, #5
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4621      	mov	r1, r4
 8002472:	1a51      	subs	r1, r2, r1
 8002474:	6139      	str	r1, [r7, #16]
 8002476:	4629      	mov	r1, r5
 8002478:	eb63 0301 	sbc.w	r3, r3, r1
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800248a:	4659      	mov	r1, fp
 800248c:	018b      	lsls	r3, r1, #6
 800248e:	4651      	mov	r1, sl
 8002490:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002494:	4651      	mov	r1, sl
 8002496:	018a      	lsls	r2, r1, #6
 8002498:	4651      	mov	r1, sl
 800249a:	ebb2 0801 	subs.w	r8, r2, r1
 800249e:	4659      	mov	r1, fp
 80024a0:	eb63 0901 	sbc.w	r9, r3, r1
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024b8:	4690      	mov	r8, r2
 80024ba:	4699      	mov	r9, r3
 80024bc:	4623      	mov	r3, r4
 80024be:	eb18 0303 	adds.w	r3, r8, r3
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	462b      	mov	r3, r5
 80024c6:	eb49 0303 	adc.w	r3, r9, r3
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024d8:	4629      	mov	r1, r5
 80024da:	028b      	lsls	r3, r1, #10
 80024dc:	4621      	mov	r1, r4
 80024de:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024e2:	4621      	mov	r1, r4
 80024e4:	028a      	lsls	r2, r1, #10
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024ee:	2200      	movs	r2, #0
 80024f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80024f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80024f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024f8:	f7fd fee2 	bl	80002c0 <__aeabi_uldivmod>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4613      	mov	r3, r2
 8002502:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002506:	4b60      	ldr	r3, [pc, #384]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x348>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	0c1b      	lsrs	r3, r3, #16
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	3301      	adds	r3, #1
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002518:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800251c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002528:	e0a6      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800252a:	4b57      	ldr	r3, [pc, #348]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x348>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002536:	4b54      	ldr	r3, [pc, #336]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x348>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d02a      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002542:	4b51      	ldr	r3, [pc, #324]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x348>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	2200      	movs	r2, #0
 800254a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800254c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800254e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002550:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002554:	2100      	movs	r1, #0
 8002556:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x350>)
 8002558:	fb03 f201 	mul.w	r2, r3, r1
 800255c:	2300      	movs	r3, #0
 800255e:	fb00 f303 	mul.w	r3, r0, r3
 8002562:	4413      	add	r3, r2
 8002564:	4a4a      	ldr	r2, [pc, #296]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x350>)
 8002566:	fba0 1202 	umull	r1, r2, r0, r2
 800256a:	677a      	str	r2, [r7, #116]	@ 0x74
 800256c:	460a      	mov	r2, r1
 800256e:	673a      	str	r2, [r7, #112]	@ 0x70
 8002570:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002572:	4413      	add	r3, r2
 8002574:	677b      	str	r3, [r7, #116]	@ 0x74
 8002576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800257a:	2200      	movs	r2, #0
 800257c:	633b      	str	r3, [r7, #48]	@ 0x30
 800257e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002580:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002584:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002588:	f7fd fe9a 	bl	80002c0 <__aeabi_uldivmod>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4613      	mov	r3, r2
 8002592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002596:	e05b      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002598:	4b3b      	ldr	r3, [pc, #236]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x348>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	099b      	lsrs	r3, r3, #6
 800259e:	2200      	movs	r2, #0
 80025a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025aa:	623b      	str	r3, [r7, #32]
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025b4:	4642      	mov	r2, r8
 80025b6:	464b      	mov	r3, r9
 80025b8:	f04f 0000 	mov.w	r0, #0
 80025bc:	f04f 0100 	mov.w	r1, #0
 80025c0:	0159      	lsls	r1, r3, #5
 80025c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c6:	0150      	lsls	r0, r2, #5
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4641      	mov	r1, r8
 80025ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80025d2:	4649      	mov	r1, r9
 80025d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025ec:	ebb2 040a 	subs.w	r4, r2, sl
 80025f0:	eb63 050b 	sbc.w	r5, r3, fp
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	00eb      	lsls	r3, r5, #3
 80025fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002602:	00e2      	lsls	r2, r4, #3
 8002604:	4614      	mov	r4, r2
 8002606:	461d      	mov	r5, r3
 8002608:	4643      	mov	r3, r8
 800260a:	18e3      	adds	r3, r4, r3
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	464b      	mov	r3, r9
 8002610:	eb45 0303 	adc.w	r3, r5, r3
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002622:	4629      	mov	r1, r5
 8002624:	028b      	lsls	r3, r1, #10
 8002626:	4621      	mov	r1, r4
 8002628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800262c:	4621      	mov	r1, r4
 800262e:	028a      	lsls	r2, r1, #10
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002638:	2200      	movs	r2, #0
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	61fa      	str	r2, [r7, #28]
 800263e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002642:	f7fd fe3d 	bl	80002c0 <__aeabi_uldivmod>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4613      	mov	r3, r2
 800264c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002650:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x348>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0f1b      	lsrs	r3, r3, #28
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800265e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002662:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800266e:	e003      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002676:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002678:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800267c:	4618      	mov	r0, r3
 800267e:	3798      	adds	r7, #152	@ 0x98
 8002680:	46bd      	mov	sp, r7
 8002682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	017d7840 	.word	0x017d7840

08002694 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e28d      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 8083 	beq.w	80027ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026b4:	4b94      	ldr	r3, [pc, #592]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d019      	beq.n	80026f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026c0:	4b91      	ldr	r3, [pc, #580]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026d8:	d00c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026da:	4b8b      	ldr	r3, [pc, #556]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	d112      	bne.n	800270c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e6:	4b88      	ldr	r3, [pc, #544]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026f2:	d10b      	bne.n	800270c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	4b84      	ldr	r3, [pc, #528]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d05b      	beq.n	80027b8 <HAL_RCC_OscConfig+0x124>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d157      	bne.n	80027b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e25a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x90>
 8002716:	4b7c      	ldr	r3, [pc, #496]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7b      	ldr	r2, [pc, #492]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e01d      	b.n	8002760 <HAL_RCC_OscConfig+0xcc>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0xb4>
 800272e:	4b76      	ldr	r3, [pc, #472]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a75      	ldr	r2, [pc, #468]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 8002734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b73      	ldr	r3, [pc, #460]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a72      	ldr	r2, [pc, #456]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0xcc>
 8002748:	4b6f      	ldr	r3, [pc, #444]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a6e      	ldr	r2, [pc, #440]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 800274e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b6c      	ldr	r3, [pc, #432]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a6b      	ldr	r2, [pc, #428]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 800275a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7ff f942 	bl	80019f0 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7ff f93e 	bl	80019f0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	@ 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e21f      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b61      	ldr	r3, [pc, #388]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0xdc>
 800278e:	e014      	b.n	80027ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7ff f92e 	bl	80019f0 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002798:	f7ff f92a 	bl	80019f0 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	@ 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e20b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	4b57      	ldr	r3, [pc, #348]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x104>
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d06f      	beq.n	80028a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027c6:	4b50      	ldr	r3, [pc, #320]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d017      	beq.n	8002802 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d105      	bne.n	80027ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027de:	4b4a      	ldr	r3, [pc, #296]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ea:	4b47      	ldr	r3, [pc, #284]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027f2:	2b0c      	cmp	r3, #12
 80027f4:	d11c      	bne.n	8002830 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b44      	ldr	r3, [pc, #272]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d116      	bne.n	8002830 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	4b41      	ldr	r3, [pc, #260]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x186>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e1d3      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281a:	4b3b      	ldr	r3, [pc, #236]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4937      	ldr	r1, [pc, #220]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	e03a      	b.n	80028a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002838:	4b34      	ldr	r3, [pc, #208]	@ (800290c <HAL_RCC_OscConfig+0x278>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7ff f8d7 	bl	80019f0 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002846:	f7ff f8d3 	bl	80019f0 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e1b4      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	4b2b      	ldr	r3, [pc, #172]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	4b28      	ldr	r3, [pc, #160]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4925      	ldr	r1, [pc, #148]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
 8002878:	e015      	b.n	80028a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287a:	4b24      	ldr	r3, [pc, #144]	@ (800290c <HAL_RCC_OscConfig+0x278>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7ff f8b6 	bl	80019f0 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002888:	f7ff f8b2 	bl	80019f0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e193      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d036      	beq.n	8002920 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <HAL_RCC_OscConfig+0x27c>)
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7ff f896 	bl	80019f0 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c8:	f7ff f892 	bl	80019f0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e173      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <HAL_RCC_OscConfig+0x274>)
 80028dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x234>
 80028e6:	e01b      	b.n	8002920 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <HAL_RCC_OscConfig+0x27c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ee:	f7ff f87f 	bl	80019f0 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	e00e      	b.n	8002914 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f6:	f7ff f87b 	bl	80019f0 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d907      	bls.n	8002914 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e15c      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
 8002908:	40023800 	.word	0x40023800
 800290c:	42470000 	.word	0x42470000
 8002910:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	4b8a      	ldr	r3, [pc, #552]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ea      	bne.n	80028f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8097 	beq.w	8002a5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002932:	4b83      	ldr	r3, [pc, #524]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	4b7f      	ldr	r3, [pc, #508]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	4a7e      	ldr	r2, [pc, #504]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800294c:	6413      	str	r3, [r2, #64]	@ 0x40
 800294e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295a:	2301      	movs	r3, #1
 800295c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	4b79      	ldr	r3, [pc, #484]	@ (8002b44 <HAL_RCC_OscConfig+0x4b0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296a:	4b76      	ldr	r3, [pc, #472]	@ (8002b44 <HAL_RCC_OscConfig+0x4b0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a75      	ldr	r2, [pc, #468]	@ (8002b44 <HAL_RCC_OscConfig+0x4b0>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002976:	f7ff f83b 	bl	80019f0 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7ff f837 	bl	80019f0 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e118      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	4b6c      	ldr	r3, [pc, #432]	@ (8002b44 <HAL_RCC_OscConfig+0x4b0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x31e>
 80029a4:	4b66      	ldr	r3, [pc, #408]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a65      	ldr	r2, [pc, #404]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b0:	e01c      	b.n	80029ec <HAL_RCC_OscConfig+0x358>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x340>
 80029ba:	4b61      	ldr	r3, [pc, #388]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029be:	4a60      	ldr	r2, [pc, #384]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_OscConfig+0x358>
 80029d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d8:	4a59      	ldr	r2, [pc, #356]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e0:	4b57      	ldr	r3, [pc, #348]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	4a56      	ldr	r2, [pc, #344]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 80029e6:	f023 0304 	bic.w	r3, r3, #4
 80029ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d015      	beq.n	8002a20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fe fffc 	bl	80019f0 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fe fff8 	bl	80019f0 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0d7      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	4b4b      	ldr	r3, [pc, #300]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ee      	beq.n	80029fc <HAL_RCC_OscConfig+0x368>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fe ffe6 	bl	80019f0 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7fe ffe2 	bl	80019f0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0c1      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3e:	4b40      	ldr	r3, [pc, #256]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ee      	bne.n	8002a28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a50:	4b3b      	ldr	r3, [pc, #236]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	4a3a      	ldr	r2, [pc, #232]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80ad 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a66:	4b36      	ldr	r3, [pc, #216]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d060      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d145      	bne.n	8002b06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b33      	ldr	r3, [pc, #204]	@ (8002b48 <HAL_RCC_OscConfig+0x4b4>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe ffb6 	bl	80019f0 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a88:	f7fe ffb2 	bl	80019f0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e093      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	4b29      	ldr	r3, [pc, #164]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	071b      	lsls	r3, r3, #28
 8002ad2:	491b      	ldr	r1, [pc, #108]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <HAL_RCC_OscConfig+0x4b4>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe ff87 	bl	80019f0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe ff83 	bl	80019f0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e064      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af8:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x452>
 8002b04:	e05c      	b.n	8002bc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b06:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <HAL_RCC_OscConfig+0x4b4>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe ff70 	bl	80019f0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe ff6c 	bl	80019f0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e04d      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_RCC_OscConfig+0x4ac>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x480>
 8002b32:	e045      	b.n	8002bc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e040      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40007000 	.word	0x40007000
 8002b48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bcc <HAL_RCC_OscConfig+0x538>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d030      	beq.n	8002bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d129      	bne.n	8002bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d122      	bne.n	8002bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d119      	bne.n	8002bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	3b01      	subs	r3, #1
 8002b96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d10f      	bne.n	8002bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800

08002bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e07b      	b.n	8002cda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bf2:	d009      	beq.n	8002c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
 8002bfa:	e005      	b.n	8002c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe fd20 	bl	8001668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8c:	ea42 0103 	orr.w	r1, r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0104 	and.w	r1, r3, #4
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	f003 0210 	and.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b088      	sub	sp, #32
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cf2:	f7fe fe7d 	bl	80019f0 <HAL_GetTick>
 8002cf6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d001      	beq.n	8002d0c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e12a      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_SPI_Transmit+0x36>
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e122      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_SPI_Transmit+0x48>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e11b      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2203      	movs	r2, #3
 8002d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d78:	d10f      	bne.n	8002d9a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da4:	2b40      	cmp	r3, #64	@ 0x40
 8002da6:	d007      	beq.n	8002db8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dc0:	d152      	bne.n	8002e68 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SPI_Transmit+0xee>
 8002dca:	8b7b      	ldrh	r3, [r7, #26]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d145      	bne.n	8002e5c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	881a      	ldrh	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002df4:	e032      	b.n	8002e5c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d112      	bne.n	8002e2a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	881a      	ldrh	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e28:	e018      	b.n	8002e5c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e2a:	f7fe fde1 	bl	80019f0 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d803      	bhi.n	8002e42 <HAL_SPI_Transmit+0x160>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d102      	bne.n	8002e48 <HAL_SPI_Transmit+0x166>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e082      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1c7      	bne.n	8002df6 <HAL_SPI_Transmit+0x114>
 8002e66:	e053      	b.n	8002f10 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_SPI_Transmit+0x194>
 8002e70:	8b7b      	ldrh	r3, [r7, #26]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d147      	bne.n	8002f06 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	7812      	ldrb	r2, [r2, #0]
 8002e82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e9c:	e033      	b.n	8002f06 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d113      	bne.n	8002ed4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ed2:	e018      	b.n	8002f06 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ed4:	f7fe fd8c 	bl	80019f0 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d803      	bhi.n	8002eec <HAL_SPI_Transmit+0x20a>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d102      	bne.n	8002ef2 <HAL_SPI_Transmit+0x210>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e02d      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1c6      	bne.n	8002e9e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fa59 	bl	80033cc <SPI_EndRxTxTransaction>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b08a      	sub	sp, #40	@ 0x28
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f7c:	f7fe fd38 	bl	80019f0 <HAL_GetTick>
 8002f80:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f88:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f94:	7ffb      	ldrb	r3, [r7, #31]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d00c      	beq.n	8002fb4 <HAL_SPI_TransmitReceive+0x4a>
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fa0:	d106      	bne.n	8002fb0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <HAL_SPI_TransmitReceive+0x46>
 8002faa:	7ffb      	ldrb	r3, [r7, #31]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d001      	beq.n	8002fb4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e17f      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_SPI_TransmitReceive+0x5c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_SPI_TransmitReceive+0x5c>
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e174      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_SPI_TransmitReceive+0x6e>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e16d      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x34a>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d003      	beq.n	8002ff4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2205      	movs	r2, #5
 8002ff0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	887a      	ldrh	r2, [r7, #2]
 800300a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	887a      	ldrh	r2, [r7, #2]
 8003016:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	887a      	ldrh	r2, [r7, #2]
 800301c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003034:	2b40      	cmp	r3, #64	@ 0x40
 8003036:	d007      	beq.n	8003048 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003050:	d17e      	bne.n	8003150 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_SPI_TransmitReceive+0xf6>
 800305a:	8afb      	ldrh	r3, [r7, #22]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d16c      	bne.n	800313a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	881a      	ldrh	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	1c9a      	adds	r2, r3, #2
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003084:	e059      	b.n	800313a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b02      	cmp	r3, #2
 8003092:	d11b      	bne.n	80030cc <HAL_SPI_TransmitReceive+0x162>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <HAL_SPI_TransmitReceive+0x162>
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d113      	bne.n	80030cc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	881a      	ldrh	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	1c9a      	adds	r2, r3, #2
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d119      	bne.n	800310e <HAL_SPI_TransmitReceive+0x1a4>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d014      	beq.n	800310e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ee:	b292      	uxth	r2, r2
 80030f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f6:	1c9a      	adds	r2, r3, #2
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800310a:	2301      	movs	r3, #1
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800310e:	f7fe fc6f 	bl	80019f0 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800311a:	429a      	cmp	r2, r3
 800311c:	d80d      	bhi.n	800313a <HAL_SPI_TransmitReceive+0x1d0>
 800311e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d009      	beq.n	800313a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0bc      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1a0      	bne.n	8003086 <HAL_SPI_TransmitReceive+0x11c>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d19b      	bne.n	8003086 <HAL_SPI_TransmitReceive+0x11c>
 800314e:	e082      	b.n	8003256 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_SPI_TransmitReceive+0x1f4>
 8003158:	8afb      	ldrh	r3, [r7, #22]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d171      	bne.n	8003242 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	7812      	ldrb	r2, [r2, #0]
 800316a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003184:	e05d      	b.n	8003242 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b02      	cmp	r3, #2
 8003192:	d11c      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x264>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d017      	beq.n	80031ce <HAL_SPI_TransmitReceive+0x264>
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d114      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	7812      	ldrb	r2, [r2, #0]
 80031b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d119      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x2a6>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d014      	beq.n	8003210 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800320c:	2301      	movs	r3, #1
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003210:	f7fe fbee 	bl	80019f0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800321c:	429a      	cmp	r2, r3
 800321e:	d803      	bhi.n	8003228 <HAL_SPI_TransmitReceive+0x2be>
 8003220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d102      	bne.n	800322e <HAL_SPI_TransmitReceive+0x2c4>
 8003228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e038      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d19c      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x21c>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d197      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003256:	6a3a      	ldr	r2, [r7, #32]
 8003258:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f8b6 	bl	80033cc <SPI_EndRxTxTransaction>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e01d      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80032b2:	2300      	movs	r3, #0
  }
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3728      	adds	r7, #40	@ 0x28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032cc:	f7fe fb90 	bl	80019f0 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032dc:	f7fe fb88 	bl	80019f0 <HAL_GetTick>
 80032e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032e2:	4b39      	ldr	r3, [pc, #228]	@ (80033c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	015b      	lsls	r3, r3, #5
 80032e8:	0d1b      	lsrs	r3, r3, #20
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f2:	e054      	b.n	800339e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d050      	beq.n	800339e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032fc:	f7fe fb78 	bl	80019f0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	429a      	cmp	r2, r3
 800330a:	d902      	bls.n	8003312 <SPI_WaitFlagStateUntilTimeout+0x56>
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d13d      	bne.n	800338e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003320:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800332a:	d111      	bne.n	8003350 <SPI_WaitFlagStateUntilTimeout+0x94>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003334:	d004      	beq.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800333e:	d107      	bne.n	8003350 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800334e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003358:	d10f      	bne.n	800337a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e017      	b.n	80033be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	3b01      	subs	r3, #1
 800339c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d19b      	bne.n	80032f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000004 	.word	0x20000004

080033cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2201      	movs	r2, #1
 80033e0:	2102      	movs	r1, #2
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f7ff ff6a 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f2:	f043 0220 	orr.w	r2, r3, #32
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e032      	b.n	8003464 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033fe:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <SPI_EndRxTxTransaction+0xa0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1b      	ldr	r2, [pc, #108]	@ (8003470 <SPI_EndRxTxTransaction+0xa4>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	0d5b      	lsrs	r3, r3, #21
 800340a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800341c:	d112      	bne.n	8003444 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2200      	movs	r2, #0
 8003426:	2180      	movs	r1, #128	@ 0x80
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7ff ff47 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d016      	beq.n	8003462 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003438:	f043 0220 	orr.w	r2, r3, #32
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e00f      	b.n	8003464 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3b01      	subs	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800345a:	2b80      	cmp	r3, #128	@ 0x80
 800345c:	d0f2      	beq.n	8003444 <SPI_EndRxTxTransaction+0x78>
 800345e:	e000      	b.n	8003462 <SPI_EndRxTxTransaction+0x96>
        break;
 8003460:	bf00      	nop
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000004 	.word	0x20000004
 8003470:	165e9f81 	.word	0x165e9f81

08003474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e042      	b.n	800350c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe f92c 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2224      	movs	r2, #36	@ 0x24
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fdbd 	bl	8004038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	@ 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b20      	cmp	r3, #32
 8003532:	d175      	bne.n	8003620 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_UART_Transmit+0x2c>
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e06e      	b.n	8003622 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2221      	movs	r2, #33	@ 0x21
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003552:	f7fe fa4d 	bl	80019f0 <HAL_GetTick>
 8003556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356c:	d108      	bne.n	8003580 <HAL_UART_Transmit+0x6c>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e003      	b.n	8003588 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003588:	e02e      	b.n	80035e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	2180      	movs	r1, #128	@ 0x80
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fb1f 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e03a      	b.n	8003622 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	3302      	adds	r3, #2
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	e007      	b.n	80035da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	3301      	adds	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1cb      	bne.n	800358a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2140      	movs	r1, #64	@ 0x40
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 faeb 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e006      	b.n	8003622 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	e000      	b.n	8003622 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	4613      	mov	r3, r2
 8003636:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b20      	cmp	r3, #32
 8003642:	d112      	bne.n	800366a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_UART_Receive_IT+0x26>
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e00b      	b.n	800366c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	461a      	mov	r2, r3
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fb12 	bl	8003c8a <UART_Start_Receive_IT>
 8003666:	4603      	mov	r3, r0
 8003668:	e000      	b.n	800366c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800366a:	2302      	movs	r3, #2
  }
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b0ba      	sub	sp, #232	@ 0xe8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10f      	bne.n	80036da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_UART_IRQHandler+0x66>
 80036c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fbf2 	bl	8003ebc <UART_Receive_IT>
      return;
 80036d8:	e25b      	b.n	8003b92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80de 	beq.w	80038a0 <HAL_UART_IRQHandler+0x22c>
 80036e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80d1 	beq.w	80038a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_UART_IRQHandler+0xae>
 800370a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800370e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_UART_IRQHandler+0xd2>
 800372e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	f043 0202 	orr.w	r2, r3, #2
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_UART_IRQHandler+0xf6>
 8003752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	f043 0204 	orr.w	r2, r3, #4
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d011      	beq.n	800379a <HAL_UART_IRQHandler+0x126>
 8003776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d105      	bne.n	800378e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003792:	f043 0208 	orr.w	r2, r3, #8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 81f2 	beq.w	8003b88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_UART_IRQHandler+0x14e>
 80037b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fb7d 	bl	8003ebc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037cc:	2b40      	cmp	r3, #64	@ 0x40
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_UART_IRQHandler+0x17a>
 80037e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d04f      	beq.n	800388e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa85 	bl	8003cfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fe:	2b40      	cmp	r3, #64	@ 0x40
 8003800:	d141      	bne.n	8003886 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3314      	adds	r3, #20
 8003808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003818:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800381c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3314      	adds	r3, #20
 800382a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800382e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003832:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800383a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1d9      	bne.n	8003802 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d013      	beq.n	800387e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a54 <HAL_UART_IRQHandler+0x3e0>)
 800385c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fa82 	bl	8001d6c <HAL_DMA_Abort_IT>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003878:	4610      	mov	r0, r2
 800387a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387c:	e00e      	b.n	800389c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f994 	bl	8003bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003884:	e00a      	b.n	800389c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f990 	bl	8003bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388c:	e006      	b.n	800389c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f98c 	bl	8003bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800389a:	e175      	b.n	8003b88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	bf00      	nop
    return;
 800389e:	e173      	b.n	8003b88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	f040 814f 	bne.w	8003b48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 8148 	beq.w	8003b48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8141 	beq.w	8003b48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e6:	2b40      	cmp	r3, #64	@ 0x40
 80038e8:	f040 80b6 	bne.w	8003a58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 8145 	beq.w	8003b8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800390a:	429a      	cmp	r2, r3
 800390c:	f080 813e 	bcs.w	8003b8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003916:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003922:	f000 8088 	beq.w	8003a36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800393c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003952:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003956:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800395e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800396a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1d9      	bne.n	8003926 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3314      	adds	r3, #20
 8003978:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3314      	adds	r3, #20
 8003992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003996:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800399a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800399e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e1      	bne.n	8003972 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3314      	adds	r3, #20
 80039b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3314      	adds	r3, #20
 80039ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e3      	bne.n	80039ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a06:	f023 0310 	bic.w	r3, r3, #16
 8003a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e3      	bne.n	80039f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe f92b 	bl	8001c8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f8b7 	bl	8003bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a52:	e09b      	b.n	8003b8c <HAL_UART_IRQHandler+0x518>
 8003a54:	08003dc5 	.word	0x08003dc5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 808e 	beq.w	8003b90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8089 	beq.w	8003b90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	330c      	adds	r3, #12
 8003a84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003aa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003aa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e3      	bne.n	8003a7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3314      	adds	r3, #20
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ada:	633a      	str	r2, [r7, #48]	@ 0x30
 8003adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e3      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0310 	bic.w	r3, r3, #16
 8003b12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b20:	61fa      	str	r2, [r7, #28]
 8003b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	69b9      	ldr	r1, [r7, #24]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e3      	bne.n	8003afc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f83d 	bl	8003bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b46:	e023      	b.n	8003b90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_UART_IRQHandler+0x4f4>
 8003b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f943 	bl	8003dec <UART_Transmit_IT>
    return;
 8003b66:	e014      	b.n	8003b92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <HAL_UART_IRQHandler+0x51e>
 8003b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f983 	bl	8003e8c <UART_EndTransmit_IT>
    return;
 8003b86:	e004      	b.n	8003b92 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b88:	bf00      	nop
 8003b8a:	e002      	b.n	8003b92 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b8c:	bf00      	nop
 8003b8e:	e000      	b.n	8003b92 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b90:	bf00      	nop
  }
}
 8003b92:	37e8      	adds	r7, #232	@ 0xe8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be8:	e03b      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d037      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fd fefd 	bl	80019f0 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	6a3a      	ldr	r2, [r7, #32]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e03a      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d023      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b80      	cmp	r3, #128	@ 0x80
 8003c1e:	d020      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b40      	cmp	r3, #64	@ 0x40
 8003c24:	d01d      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d116      	bne.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f857 	bl	8003cfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2208      	movs	r2, #8
 8003c54:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e00f      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	bf0c      	ite	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	2300      	movne	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d0b4      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	4613      	mov	r3, r2
 8003c96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	88fa      	ldrh	r2, [r7, #6]
 8003ca2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2222      	movs	r2, #34	@ 0x22
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0220 	orr.w	r2, r2, #32
 8003cee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b095      	sub	sp, #84	@ 0x54
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d26:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e5      	bne.n	8003d06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3314      	adds	r3, #20
 8003d58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e5      	bne.n	8003d3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d119      	bne.n	8003daa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f023 0310 	bic.w	r3, r3, #16
 8003d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d96:	61ba      	str	r2, [r7, #24]
 8003d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6979      	ldr	r1, [r7, #20]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	613b      	str	r3, [r7, #16]
   return(result);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e5      	bne.n	8003d76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003db8:	bf00      	nop
 8003dba:	3754      	adds	r7, #84	@ 0x54
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff fee4 	bl	8003bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b21      	cmp	r3, #33	@ 0x21
 8003dfe:	d13e      	bne.n	8003e7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e08:	d114      	bne.n	8003e34 <UART_Transmit_IT+0x48>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d110      	bne.n	8003e34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	621a      	str	r2, [r3, #32]
 8003e32:	e008      	b.n	8003e46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	1c59      	adds	r1, r3, #1
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6211      	str	r1, [r2, #32]
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4619      	mov	r1, r3
 8003e54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10f      	bne.n	8003e7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e000      	b.n	8003e80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
  }
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff fe73 	bl	8003b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08c      	sub	sp, #48	@ 0x30
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b22      	cmp	r3, #34	@ 0x22
 8003ece:	f040 80ae 	bne.w	800402e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eda:	d117      	bne.n	8003f0c <UART_Receive_IT+0x50>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d113      	bne.n	8003f0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	1c9a      	adds	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f0a:	e026      	b.n	8003f5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1e:	d007      	beq.n	8003f30 <UART_Receive_IT+0x74>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <UART_Receive_IT+0x82>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e008      	b.n	8003f50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4619      	mov	r1, r3
 8003f68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d15d      	bne.n	800402a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0220 	bic.w	r2, r2, #32
 8003f7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d135      	bne.n	8004020 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f023 0310 	bic.w	r3, r3, #16
 8003fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	330c      	adds	r3, #12
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fda:	623a      	str	r2, [r7, #32]
 8003fdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	69f9      	ldr	r1, [r7, #28]
 8003fe0:	6a3a      	ldr	r2, [r7, #32]
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e5      	bne.n	8003fba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d10a      	bne.n	8004012 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004016:	4619      	mov	r1, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fdd1 	bl	8003bc0 <HAL_UARTEx_RxEventCallback>
 800401e:	e002      	b.n	8004026 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fd fae1 	bl	80015e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e002      	b.n	8004030 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	e000      	b.n	8004030 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800402e:	2302      	movs	r3, #2
  }
}
 8004030:	4618      	mov	r0, r3
 8004032:	3730      	adds	r7, #48	@ 0x30
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800403c:	b0c0      	sub	sp, #256	@ 0x100
 800403e:	af00      	add	r7, sp, #0
 8004040:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	68d9      	ldr	r1, [r3, #12]
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	ea40 0301 	orr.w	r3, r0, r1
 8004060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	431a      	orrs	r2, r3
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	431a      	orrs	r2, r3
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004090:	f021 010c 	bic.w	r1, r1, #12
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800409e:	430b      	orrs	r3, r1
 80040a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	6999      	ldr	r1, [r3, #24]
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	ea40 0301 	orr.w	r3, r0, r1
 80040be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004304 <UART_SetConfig+0x2cc>)
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d005      	beq.n	80040d8 <UART_SetConfig+0xa0>
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004308 <UART_SetConfig+0x2d0>)
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d104      	bne.n	80040e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040d8:	f7fe f91e 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 80040dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040e0:	e003      	b.n	80040ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040e2:	f7fe f905 	bl	80022f0 <HAL_RCC_GetPCLK1Freq>
 80040e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f4:	f040 810c 	bne.w	8004310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004102:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800410a:	4622      	mov	r2, r4
 800410c:	462b      	mov	r3, r5
 800410e:	1891      	adds	r1, r2, r2
 8004110:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004112:	415b      	adcs	r3, r3
 8004114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800411a:	4621      	mov	r1, r4
 800411c:	eb12 0801 	adds.w	r8, r2, r1
 8004120:	4629      	mov	r1, r5
 8004122:	eb43 0901 	adc.w	r9, r3, r1
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800413a:	4690      	mov	r8, r2
 800413c:	4699      	mov	r9, r3
 800413e:	4623      	mov	r3, r4
 8004140:	eb18 0303 	adds.w	r3, r8, r3
 8004144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004148:	462b      	mov	r3, r5
 800414a:	eb49 0303 	adc.w	r3, r9, r3
 800414e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800415e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004166:	460b      	mov	r3, r1
 8004168:	18db      	adds	r3, r3, r3
 800416a:	653b      	str	r3, [r7, #80]	@ 0x50
 800416c:	4613      	mov	r3, r2
 800416e:	eb42 0303 	adc.w	r3, r2, r3
 8004172:	657b      	str	r3, [r7, #84]	@ 0x54
 8004174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800417c:	f7fc f8a0 	bl	80002c0 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4b61      	ldr	r3, [pc, #388]	@ (800430c <UART_SetConfig+0x2d4>)
 8004186:	fba3 2302 	umull	r2, r3, r3, r2
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	011c      	lsls	r4, r3, #4
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004198:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800419c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041a8:	415b      	adcs	r3, r3
 80041aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041b0:	4641      	mov	r1, r8
 80041b2:	eb12 0a01 	adds.w	sl, r2, r1
 80041b6:	4649      	mov	r1, r9
 80041b8:	eb43 0b01 	adc.w	fp, r3, r1
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d0:	4692      	mov	sl, r2
 80041d2:	469b      	mov	fp, r3
 80041d4:	4643      	mov	r3, r8
 80041d6:	eb1a 0303 	adds.w	r3, sl, r3
 80041da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041de:	464b      	mov	r3, r9
 80041e0:	eb4b 0303 	adc.w	r3, fp, r3
 80041e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041fc:	460b      	mov	r3, r1
 80041fe:	18db      	adds	r3, r3, r3
 8004200:	643b      	str	r3, [r7, #64]	@ 0x40
 8004202:	4613      	mov	r3, r2
 8004204:	eb42 0303 	adc.w	r3, r2, r3
 8004208:	647b      	str	r3, [r7, #68]	@ 0x44
 800420a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800420e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004212:	f7fc f855 	bl	80002c0 <__aeabi_uldivmod>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4611      	mov	r1, r2
 800421c:	4b3b      	ldr	r3, [pc, #236]	@ (800430c <UART_SetConfig+0x2d4>)
 800421e:	fba3 2301 	umull	r2, r3, r3, r1
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2264      	movs	r2, #100	@ 0x64
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	1acb      	subs	r3, r1, r3
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004232:	4b36      	ldr	r3, [pc, #216]	@ (800430c <UART_SetConfig+0x2d4>)
 8004234:	fba3 2302 	umull	r2, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004240:	441c      	add	r4, r3
 8004242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800424c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	1891      	adds	r1, r2, r2
 800425a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800425c:	415b      	adcs	r3, r3
 800425e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004264:	4641      	mov	r1, r8
 8004266:	1851      	adds	r1, r2, r1
 8004268:	6339      	str	r1, [r7, #48]	@ 0x30
 800426a:	4649      	mov	r1, r9
 800426c:	414b      	adcs	r3, r1
 800426e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800427c:	4659      	mov	r1, fp
 800427e:	00cb      	lsls	r3, r1, #3
 8004280:	4651      	mov	r1, sl
 8004282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004286:	4651      	mov	r1, sl
 8004288:	00ca      	lsls	r2, r1, #3
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	4603      	mov	r3, r0
 8004290:	4642      	mov	r2, r8
 8004292:	189b      	adds	r3, r3, r2
 8004294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004298:	464b      	mov	r3, r9
 800429a:	460a      	mov	r2, r1
 800429c:	eb42 0303 	adc.w	r3, r2, r3
 80042a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042b8:	460b      	mov	r3, r1
 80042ba:	18db      	adds	r3, r3, r3
 80042bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042be:	4613      	mov	r3, r2
 80042c0:	eb42 0303 	adc.w	r3, r2, r3
 80042c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042ce:	f7fb fff7 	bl	80002c0 <__aeabi_uldivmod>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <UART_SetConfig+0x2d4>)
 80042d8:	fba3 1302 	umull	r1, r3, r3, r2
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	2164      	movs	r1, #100	@ 0x64
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	3332      	adds	r3, #50	@ 0x32
 80042ea:	4a08      	ldr	r2, [pc, #32]	@ (800430c <UART_SetConfig+0x2d4>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	f003 0207 	and.w	r2, r3, #7
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4422      	add	r2, r4
 80042fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004300:	e106      	b.n	8004510 <UART_SetConfig+0x4d8>
 8004302:	bf00      	nop
 8004304:	40011000 	.word	0x40011000
 8004308:	40011400 	.word	0x40011400
 800430c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800431a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800431e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004322:	4642      	mov	r2, r8
 8004324:	464b      	mov	r3, r9
 8004326:	1891      	adds	r1, r2, r2
 8004328:	6239      	str	r1, [r7, #32]
 800432a:	415b      	adcs	r3, r3
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
 800432e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004332:	4641      	mov	r1, r8
 8004334:	1854      	adds	r4, r2, r1
 8004336:	4649      	mov	r1, r9
 8004338:	eb43 0501 	adc.w	r5, r3, r1
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	00eb      	lsls	r3, r5, #3
 8004346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800434a:	00e2      	lsls	r2, r4, #3
 800434c:	4614      	mov	r4, r2
 800434e:	461d      	mov	r5, r3
 8004350:	4643      	mov	r3, r8
 8004352:	18e3      	adds	r3, r4, r3
 8004354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004358:	464b      	mov	r3, r9
 800435a:	eb45 0303 	adc.w	r3, r5, r3
 800435e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800436e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800437e:	4629      	mov	r1, r5
 8004380:	008b      	lsls	r3, r1, #2
 8004382:	4621      	mov	r1, r4
 8004384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004388:	4621      	mov	r1, r4
 800438a:	008a      	lsls	r2, r1, #2
 800438c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004390:	f7fb ff96 	bl	80002c0 <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4b60      	ldr	r3, [pc, #384]	@ (800451c <UART_SetConfig+0x4e4>)
 800439a:	fba3 2302 	umull	r2, r3, r3, r2
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	011c      	lsls	r4, r3, #4
 80043a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	61b9      	str	r1, [r7, #24]
 80043bc:	415b      	adcs	r3, r3
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c4:	4641      	mov	r1, r8
 80043c6:	1851      	adds	r1, r2, r1
 80043c8:	6139      	str	r1, [r7, #16]
 80043ca:	4649      	mov	r1, r9
 80043cc:	414b      	adcs	r3, r1
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043dc:	4659      	mov	r1, fp
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	4651      	mov	r1, sl
 80043e8:	00ca      	lsls	r2, r1, #3
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	4642      	mov	r2, r8
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043f8:	464b      	mov	r3, r9
 80043fa:	460a      	mov	r2, r1
 80043fc:	eb42 0303 	adc.w	r3, r2, r3
 8004400:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800440e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800441c:	4649      	mov	r1, r9
 800441e:	008b      	lsls	r3, r1, #2
 8004420:	4641      	mov	r1, r8
 8004422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004426:	4641      	mov	r1, r8
 8004428:	008a      	lsls	r2, r1, #2
 800442a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800442e:	f7fb ff47 	bl	80002c0 <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4611      	mov	r1, r2
 8004438:	4b38      	ldr	r3, [pc, #224]	@ (800451c <UART_SetConfig+0x4e4>)
 800443a:	fba3 2301 	umull	r2, r3, r3, r1
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	2264      	movs	r2, #100	@ 0x64
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	1acb      	subs	r3, r1, r3
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	3332      	adds	r3, #50	@ 0x32
 800444c:	4a33      	ldr	r2, [pc, #204]	@ (800451c <UART_SetConfig+0x4e4>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004458:	441c      	add	r4, r3
 800445a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800445e:	2200      	movs	r2, #0
 8004460:	673b      	str	r3, [r7, #112]	@ 0x70
 8004462:	677a      	str	r2, [r7, #116]	@ 0x74
 8004464:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	1891      	adds	r1, r2, r2
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	415b      	adcs	r3, r3
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004478:	4641      	mov	r1, r8
 800447a:	1851      	adds	r1, r2, r1
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	4649      	mov	r1, r9
 8004480:	414b      	adcs	r3, r1
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004490:	4659      	mov	r1, fp
 8004492:	00cb      	lsls	r3, r1, #3
 8004494:	4651      	mov	r1, sl
 8004496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800449a:	4651      	mov	r1, sl
 800449c:	00ca      	lsls	r2, r1, #3
 800449e:	4610      	mov	r0, r2
 80044a0:	4619      	mov	r1, r3
 80044a2:	4603      	mov	r3, r0
 80044a4:	4642      	mov	r2, r8
 80044a6:	189b      	adds	r3, r3, r2
 80044a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044aa:	464b      	mov	r3, r9
 80044ac:	460a      	mov	r2, r1
 80044ae:	eb42 0303 	adc.w	r3, r2, r3
 80044b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80044be:	667a      	str	r2, [r7, #100]	@ 0x64
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044cc:	4649      	mov	r1, r9
 80044ce:	008b      	lsls	r3, r1, #2
 80044d0:	4641      	mov	r1, r8
 80044d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d6:	4641      	mov	r1, r8
 80044d8:	008a      	lsls	r2, r1, #2
 80044da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044de:	f7fb feef 	bl	80002c0 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <UART_SetConfig+0x4e4>)
 80044e8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	2164      	movs	r1, #100	@ 0x64
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	3332      	adds	r3, #50	@ 0x32
 80044fa:	4a08      	ldr	r2, [pc, #32]	@ (800451c <UART_SetConfig+0x4e4>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	f003 020f 	and.w	r2, r3, #15
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4422      	add	r2, r4
 800450e:	609a      	str	r2, [r3, #8]
}
 8004510:	bf00      	nop
 8004512:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004516:	46bd      	mov	sp, r7
 8004518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451c:	51eb851f 	.word	0x51eb851f

08004520 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004524:	4904      	ldr	r1, [pc, #16]	@ (8004538 <MX_FATFS_Init+0x18>)
 8004526:	4805      	ldr	r0, [pc, #20]	@ (800453c <MX_FATFS_Init+0x1c>)
 8004528:	f002 fee2 	bl	80072f0 <FATFS_LinkDriver>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	4b03      	ldr	r3, [pc, #12]	@ (8004540 <MX_FATFS_Init+0x20>)
 8004532:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004534:	bf00      	nop
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20002220 	.word	0x20002220
 800453c:	20000010 	.word	0x20000010
 8004540:	2000221c 	.word	0x2000221c

08004544 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004548:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	4618      	mov	r0, r3
 8004562:	f7fc f9d9 	bl	8000918 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8004566:	bf00      	nop
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status (pdrv);
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fc fab1 	bl	8000ae4 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8004582:	bf00      	nop
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4603      	mov	r3, r0
 800459a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read (pdrv, buff, sector, count);
 800459c:	7bf8      	ldrb	r0, [r7, #15]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	f7fc fab4 	bl	8000b10 <SD_disk_read>
  /* USER CODE END READ */
}
 80045a8:	bf00      	nop
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	4603      	mov	r3, r0
 80045c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector, count);
 80045c2:	7bf8      	ldrb	r0, [r7, #15]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	f7fc fb0b 	bl	8000be4 <SD_disk_write>
  /* USER CODE END WRITE */
}
 80045ce:	bf00      	nop
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	603a      	str	r2, [r7, #0]
 80045e2:	71fb      	strb	r3, [r7, #7]
 80045e4:	460b      	mov	r3, r1
 80045e6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	79b9      	ldrb	r1, [r7, #6]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fc fb7c 	bl	8000cec <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80045f4:	bf00      	nop
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	4a08      	ldr	r2, [pc, #32]	@ (8004630 <disk_status+0x30>)
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	79fa      	ldrb	r2, [r7, #7]
 8004618:	4905      	ldr	r1, [pc, #20]	@ (8004630 <disk_status+0x30>)
 800461a:	440a      	add	r2, r1
 800461c:	7a12      	ldrb	r2, [r2, #8]
 800461e:	4610      	mov	r0, r2
 8004620:	4798      	blx	r3
 8004622:	4603      	mov	r3, r0
 8004624:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	2000244c 	.word	0x2000244c

08004634 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	4a0e      	ldr	r2, [pc, #56]	@ (8004680 <disk_initialize+0x4c>)
 8004646:	5cd3      	ldrb	r3, [r2, r3]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d114      	bne.n	8004676 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	4a0c      	ldr	r2, [pc, #48]	@ (8004680 <disk_initialize+0x4c>)
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	79fa      	ldrb	r2, [r7, #7]
 800465a:	4909      	ldr	r1, [pc, #36]	@ (8004680 <disk_initialize+0x4c>)
 800465c:	440a      	add	r2, r1
 800465e:	7a12      	ldrb	r2, [r2, #8]
 8004660:	4610      	mov	r0, r2
 8004662:	4798      	blx	r3
 8004664:	4603      	mov	r3, r0
 8004666:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	4a03      	ldr	r2, [pc, #12]	@ (8004680 <disk_initialize+0x4c>)
 8004672:	2101      	movs	r1, #1
 8004674:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	2000244c 	.word	0x2000244c

08004684 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4603      	mov	r3, r0
 8004692:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	4a0a      	ldr	r2, [pc, #40]	@ (80046c0 <disk_read+0x3c>)
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	689c      	ldr	r4, [r3, #8]
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	4a07      	ldr	r2, [pc, #28]	@ (80046c0 <disk_read+0x3c>)
 80046a4:	4413      	add	r3, r2
 80046a6:	7a18      	ldrb	r0, [r3, #8]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	47a0      	blx	r4
 80046b0:	4603      	mov	r3, r0
 80046b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd90      	pop	{r4, r7, pc}
 80046be:	bf00      	nop
 80046c0:	2000244c 	.word	0x2000244c

080046c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	4603      	mov	r3, r0
 80046d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004700 <disk_write+0x3c>)
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68dc      	ldr	r4, [r3, #12]
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	4a07      	ldr	r2, [pc, #28]	@ (8004700 <disk_write+0x3c>)
 80046e4:	4413      	add	r3, r2
 80046e6:	7a18      	ldrb	r0, [r3, #8]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	47a0      	blx	r4
 80046f0:	4603      	mov	r3, r0
 80046f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80046f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd90      	pop	{r4, r7, pc}
 80046fe:	bf00      	nop
 8004700:	2000244c 	.word	0x2000244c

08004704 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	603a      	str	r2, [r7, #0]
 800470e:	71fb      	strb	r3, [r7, #7]
 8004710:	460b      	mov	r3, r1
 8004712:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	4a09      	ldr	r2, [pc, #36]	@ (800473c <disk_ioctl+0x38>)
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	79fa      	ldrb	r2, [r7, #7]
 8004722:	4906      	ldr	r1, [pc, #24]	@ (800473c <disk_ioctl+0x38>)
 8004724:	440a      	add	r2, r1
 8004726:	7a10      	ldrb	r0, [r2, #8]
 8004728:	79b9      	ldrb	r1, [r7, #6]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	4798      	blx	r3
 800472e:	4603      	mov	r3, r0
 8004730:	73fb      	strb	r3, [r7, #15]
  return res;
 8004732:	7bfb      	ldrb	r3, [r7, #15]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	2000244c 	.word	0x2000244c

08004740 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3301      	adds	r3, #1
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004750:	89fb      	ldrh	r3, [r7, #14]
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	b21a      	sxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	b21b      	sxth	r3, r3
 800475c:	4313      	orrs	r3, r2
 800475e:	b21b      	sxth	r3, r3
 8004760:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004762:	89fb      	ldrh	r3, [r7, #14]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3303      	adds	r3, #3
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	3202      	adds	r2, #2
 8004788:	7812      	ldrb	r2, [r2, #0]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	3201      	adds	r2, #1
 8004796:	7812      	ldrb	r2, [r2, #0]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	021b      	lsls	r3, r3, #8
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	7812      	ldrb	r2, [r2, #0]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	887a      	ldrh	r2, [r7, #2]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	887b      	ldrh	r3, [r7, #2]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	887a      	ldrh	r2, [r7, #2]
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	701a      	strb	r2, [r3, #0]
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	0a1b      	lsrs	r3, r3, #8
 800482a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	607a      	str	r2, [r7, #4]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00d      	beq.n	800487a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	1c53      	adds	r3, r2, #1
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	1c59      	adds	r1, r3, #1
 8004868:	6179      	str	r1, [r7, #20]
 800486a:	7812      	ldrb	r2, [r2, #0]
 800486c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3b01      	subs	r3, #1
 8004872:	607b      	str	r3, [r7, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f1      	bne.n	800485e <mem_cpy+0x1a>
	}
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004886:	b480      	push	{r7}
 8004888:	b087      	sub	sp, #28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	617a      	str	r2, [r7, #20]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f3      	bne.n	8004896 <mem_set+0x10>
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	@ 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	61fa      	str	r2, [r7, #28]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	4619      	mov	r1, r3
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	61ba      	str	r2, [r7, #24]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	1acb      	subs	r3, r1, r3
 80048e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <mem_cmp+0x40>
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0eb      	beq.n	80048d4 <mem_cmp+0x18>

	return r;
 80048fc:	697b      	ldr	r3, [r7, #20]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3724      	adds	r7, #36	@ 0x24
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004914:	e002      	b.n	800491c <chk_chr+0x12>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3301      	adds	r3, #1
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <chk_chr+0x26>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	4293      	cmp	r3, r2
 800492e:	d1f2      	bne.n	8004916 <chk_chr+0xc>
	return *str;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	781b      	ldrb	r3, [r3, #0]
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e029      	b.n	80049a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004954:	4a27      	ldr	r2, [pc, #156]	@ (80049f4 <chk_lock+0xb4>)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	4413      	add	r3, r2
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01d      	beq.n	800499e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004962:	4a24      	ldr	r2, [pc, #144]	@ (80049f4 <chk_lock+0xb4>)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	4413      	add	r3, r2
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d116      	bne.n	80049a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004974:	4a1f      	ldr	r2, [pc, #124]	@ (80049f4 <chk_lock+0xb4>)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	4413      	add	r3, r2
 800497c:	3304      	adds	r3, #4
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004984:	429a      	cmp	r2, r3
 8004986:	d10c      	bne.n	80049a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004988:	4a1a      	ldr	r2, [pc, #104]	@ (80049f4 <chk_lock+0xb4>)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	4413      	add	r3, r2
 8004990:	3308      	adds	r3, #8
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004998:	429a      	cmp	r2, r3
 800499a:	d102      	bne.n	80049a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800499c:	e007      	b.n	80049ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3301      	adds	r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d9d2      	bls.n	8004954 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d109      	bne.n	80049c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <chk_lock+0x80>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d101      	bne.n	80049c4 <chk_lock+0x84>
 80049c0:	2300      	movs	r3, #0
 80049c2:	e010      	b.n	80049e6 <chk_lock+0xa6>
 80049c4:	2312      	movs	r3, #18
 80049c6:	e00e      	b.n	80049e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d108      	bne.n	80049e0 <chk_lock+0xa0>
 80049ce:	4a09      	ldr	r2, [pc, #36]	@ (80049f4 <chk_lock+0xb4>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	4413      	add	r3, r2
 80049d6:	330c      	adds	r3, #12
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049de:	d101      	bne.n	80049e4 <chk_lock+0xa4>
 80049e0:	2310      	movs	r3, #16
 80049e2:	e000      	b.n	80049e6 <chk_lock+0xa6>
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	2000222c 	.word	0x2000222c

080049f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	e002      	b.n	8004a0a <enq_lock+0x12>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3301      	adds	r3, #1
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d806      	bhi.n	8004a1e <enq_lock+0x26>
 8004a10:	4a09      	ldr	r2, [pc, #36]	@ (8004a38 <enq_lock+0x40>)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	4413      	add	r3, r2
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f2      	bne.n	8004a04 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	2000222c 	.word	0x2000222c

08004a3c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	e01f      	b.n	8004a8c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004a4c:	4a41      	ldr	r2, [pc, #260]	@ (8004b54 <inc_lock+0x118>)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	4413      	add	r3, r2
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d113      	bne.n	8004a86 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8004b54 <inc_lock+0x118>)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	4413      	add	r3, r2
 8004a66:	3304      	adds	r3, #4
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d109      	bne.n	8004a86 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004a72:	4a38      	ldr	r2, [pc, #224]	@ (8004b54 <inc_lock+0x118>)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	4413      	add	r3, r2
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d006      	beq.n	8004a94 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d9dc      	bls.n	8004a4c <inc_lock+0x10>
 8004a92:	e000      	b.n	8004a96 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004a94:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d132      	bne.n	8004b02 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e002      	b.n	8004aa8 <inc_lock+0x6c>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d806      	bhi.n	8004abc <inc_lock+0x80>
 8004aae:	4a29      	ldr	r2, [pc, #164]	@ (8004b54 <inc_lock+0x118>)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	4413      	add	r3, r2
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f2      	bne.n	8004aa2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d101      	bne.n	8004ac6 <inc_lock+0x8a>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e040      	b.n	8004b48 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4922      	ldr	r1, [pc, #136]	@ (8004b54 <inc_lock+0x118>)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	440b      	add	r3, r1
 8004ad2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	491e      	ldr	r1, [pc, #120]	@ (8004b54 <inc_lock+0x118>)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	440b      	add	r3, r1
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	491a      	ldr	r1, [pc, #104]	@ (8004b54 <inc_lock+0x118>)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	440b      	add	r3, r1
 8004af0:	3308      	adds	r3, #8
 8004af2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004af4:	4a17      	ldr	r2, [pc, #92]	@ (8004b54 <inc_lock+0x118>)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	4413      	add	r3, r2
 8004afc:	330c      	adds	r3, #12
 8004afe:	2200      	movs	r2, #0
 8004b00:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <inc_lock+0xe0>
 8004b08:	4a12      	ldr	r2, [pc, #72]	@ (8004b54 <inc_lock+0x118>)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	4413      	add	r3, r2
 8004b10:	330c      	adds	r3, #12
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <inc_lock+0xe0>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e015      	b.n	8004b48 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d108      	bne.n	8004b34 <inc_lock+0xf8>
 8004b22:	4a0c      	ldr	r2, [pc, #48]	@ (8004b54 <inc_lock+0x118>)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	4413      	add	r3, r2
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	e001      	b.n	8004b38 <inc_lock+0xfc>
 8004b34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b38:	4906      	ldr	r1, [pc, #24]	@ (8004b54 <inc_lock+0x118>)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	440b      	add	r3, r1
 8004b40:	330c      	adds	r3, #12
 8004b42:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	2000222c 	.word	0x2000222c

08004b58 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d825      	bhi.n	8004bb8 <dec_lock+0x60>
		n = Files[i].ctr;
 8004b6c:	4a17      	ldr	r2, [pc, #92]	@ (8004bcc <dec_lock+0x74>)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	4413      	add	r3, r2
 8004b74:	330c      	adds	r3, #12
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b80:	d101      	bne.n	8004b86 <dec_lock+0x2e>
 8004b82:	2300      	movs	r3, #0
 8004b84:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004b86:	89fb      	ldrh	r3, [r7, #14]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <dec_lock+0x3a>
 8004b8c:	89fb      	ldrh	r3, [r7, #14]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004b92:	4a0e      	ldr	r2, [pc, #56]	@ (8004bcc <dec_lock+0x74>)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	4413      	add	r3, r2
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	89fa      	ldrh	r2, [r7, #14]
 8004b9e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004ba0:	89fb      	ldrh	r3, [r7, #14]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d105      	bne.n	8004bb2 <dec_lock+0x5a>
 8004ba6:	4a09      	ldr	r2, [pc, #36]	@ (8004bcc <dec_lock+0x74>)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	4413      	add	r3, r2
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	737b      	strb	r3, [r7, #13]
 8004bb6:	e001      	b.n	8004bbc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004bb8:	2302      	movs	r3, #2
 8004bba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004bbc:	7b7b      	ldrb	r3, [r7, #13]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	2000222c 	.word	0x2000222c

08004bd0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e010      	b.n	8004c00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004bde:	4a0d      	ldr	r2, [pc, #52]	@ (8004c14 <clear_lock+0x44>)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	4413      	add	r3, r2
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d105      	bne.n	8004bfa <clear_lock+0x2a>
 8004bee:	4a09      	ldr	r2, [pc, #36]	@ (8004c14 <clear_lock+0x44>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	4413      	add	r3, r2
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d9eb      	bls.n	8004bde <clear_lock+0xe>
	}
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	2000222c 	.word	0x2000222c

08004c18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	78db      	ldrb	r3, [r3, #3]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d034      	beq.n	8004c96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	7858      	ldrb	r0, [r3, #1]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	f7ff fd40 	bl	80046c4 <disk_write>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
 8004c4e:	e022      	b.n	8004c96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	1ad2      	subs	r2, r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d217      	bcs.n	8004c96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	789b      	ldrb	r3, [r3, #2]
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	e010      	b.n	8004c90 <sync_window+0x78>
					wsect += fs->fsize;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4413      	add	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	7858      	ldrb	r0, [r3, #1]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004c82:	2301      	movs	r3, #1
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	f7ff fd1d 	bl	80046c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d8eb      	bhi.n	8004c6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d01b      	beq.n	8004cf0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff ffad 	bl	8004c18 <sync_window>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d113      	bne.n	8004cf0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	7858      	ldrb	r0, [r3, #1]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	f7ff fcd5 	bl	8004684 <disk_read>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff87 	bl	8004c18 <sync_window>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d159      	bne.n	8004dc8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d149      	bne.n	8004db0 <sync_fs+0xb4>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	791b      	ldrb	r3, [r3, #4]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d145      	bne.n	8004db0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	899b      	ldrh	r3, [r3, #12]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2100      	movs	r1, #0
 8004d32:	f7ff fda8 	bl	8004886 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3338      	adds	r3, #56	@ 0x38
 8004d3a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004d3e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fd37 	bl	80047b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3338      	adds	r3, #56	@ 0x38
 8004d4c:	4921      	ldr	r1, [pc, #132]	@ (8004dd4 <sync_fs+0xd8>)
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fd4c 	bl	80047ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3338      	adds	r3, #56	@ 0x38
 8004d58:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004d5c:	491e      	ldr	r1, [pc, #120]	@ (8004dd8 <sync_fs+0xdc>)
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fd44 	bl	80047ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3338      	adds	r3, #56	@ 0x38
 8004d68:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f7ff fd3a 	bl	80047ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3338      	adds	r3, #56	@ 0x38
 8004d7c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f7ff fd30 	bl	80047ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	7858      	ldrb	r0, [r3, #1]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004da4:	2301      	movs	r3, #1
 8004da6:	f7ff fc8d 	bl	80046c4 <disk_write>
			fs->fsi_flag = 0;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2100      	movs	r1, #0
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fca3 	bl	8004704 <disk_ioctl>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <sync_fs+0xcc>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	41615252 	.word	0x41615252
 8004dd8:	61417272 	.word	0x61417272

08004ddc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	3b02      	subs	r3, #2
 8004dea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	3b02      	subs	r3, #2
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d301      	bcc.n	8004dfc <clust2sect+0x20>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e008      	b.n	8004e0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	895b      	ldrh	r3, [r3, #10]
 8004e00:	461a      	mov	r2, r3
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	fb03 f202 	mul.w	r2, r3, r2
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	4413      	add	r3, r2
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b086      	sub	sp, #24
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d904      	bls.n	8004e3a <get_fat+0x20>
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d302      	bcc.n	8004e40 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e0ba      	b.n	8004fb6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295
 8004e44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	f000 8082 	beq.w	8004f54 <get_fat+0x13a>
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	f300 80a6 	bgt.w	8004fa2 <get_fat+0x188>
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d002      	beq.n	8004e60 <get_fat+0x46>
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d055      	beq.n	8004f0a <get_fat+0xf0>
 8004e5e:	e0a0      	b.n	8004fa2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	899b      	ldrh	r3, [r3, #12]
 8004e76:	4619      	mov	r1, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e7e:	4413      	add	r3, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	6938      	ldr	r0, [r7, #16]
 8004e84:	f7ff ff0c 	bl	8004ca0 <move_window>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f040 808c 	bne.w	8004fa8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	60fa      	str	r2, [r7, #12]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	8992      	ldrh	r2, [r2, #12]
 8004e9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e9e:	fb01 f202 	mul.w	r2, r1, r2
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004eac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	899b      	ldrh	r3, [r3, #12]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ebe:	4413      	add	r3, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6938      	ldr	r0, [r7, #16]
 8004ec4:	f7ff feec 	bl	8004ca0 <move_window>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d16e      	bne.n	8004fac <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	899b      	ldrh	r3, [r3, #12]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004eda:	fb01 f202 	mul.w	r2, r1, r2
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <get_fat+0xe6>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	e002      	b.n	8004f06 <get_fat+0xec>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f06:	617b      	str	r3, [r7, #20]
			break;
 8004f08:	e055      	b.n	8004fb6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	899b      	ldrh	r3, [r3, #12]
 8004f12:	085b      	lsrs	r3, r3, #1
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	4619      	mov	r1, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f1e:	4413      	add	r3, r2
 8004f20:	4619      	mov	r1, r3
 8004f22:	6938      	ldr	r0, [r7, #16]
 8004f24:	f7ff febc 	bl	8004ca0 <move_window>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d140      	bne.n	8004fb0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	8992      	ldrh	r2, [r2, #12]
 8004f3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f40:	fb00 f202 	mul.w	r2, r0, r2
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	440b      	add	r3, r1
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fbf9 	bl	8004740 <ld_word>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	617b      	str	r3, [r7, #20]
			break;
 8004f52:	e030      	b.n	8004fb6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	899b      	ldrh	r3, [r3, #12]
 8004f5c:	089b      	lsrs	r3, r3, #2
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	4619      	mov	r1, r3
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f68:	4413      	add	r3, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6938      	ldr	r0, [r7, #16]
 8004f6e:	f7ff fe97 	bl	8004ca0 <move_window>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d11d      	bne.n	8004fb4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	8992      	ldrh	r2, [r2, #12]
 8004f86:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f8a:	fb00 f202 	mul.w	r2, r0, r2
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	440b      	add	r3, r1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fbec 	bl	8004770 <ld_dword>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f9e:	617b      	str	r3, [r7, #20]
			break;
 8004fa0:	e009      	b.n	8004fb6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e006      	b.n	8004fb6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fa8:	bf00      	nop
 8004faa:	e004      	b.n	8004fb6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fac:	bf00      	nop
 8004fae:	e002      	b.n	8004fb6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004fb0:	bf00      	nop
 8004fb2:	e000      	b.n	8004fb6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004fb4:	bf00      	nop
		}
	}

	return val;
 8004fb6:	697b      	ldr	r3, [r7, #20]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b089      	sub	sp, #36	@ 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	f240 8109 	bls.w	80051ea <put_fat+0x22a>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	f080 8103 	bcs.w	80051ea <put_fat+0x22a>
		switch (fs->fs_type) {
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	f000 80b6 	beq.w	800515a <put_fat+0x19a>
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	f300 80fb 	bgt.w	80051ea <put_fat+0x22a>
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d003      	beq.n	8005000 <put_fat+0x40>
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	f000 8083 	beq.w	8005104 <put_fat+0x144>
 8004ffe:	e0f4      	b.n	80051ea <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4413      	add	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	899b      	ldrh	r3, [r3, #12]
 8005016:	4619      	mov	r1, r3
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	fbb3 f3f1 	udiv	r3, r3, r1
 800501e:	4413      	add	r3, r2
 8005020:	4619      	mov	r1, r3
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff fe3c 	bl	8004ca0 <move_window>
 8005028:	4603      	mov	r3, r0
 800502a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800502c:	7ffb      	ldrb	r3, [r7, #31]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 80d4 	bne.w	80051dc <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	61ba      	str	r2, [r7, #24]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	8992      	ldrh	r2, [r2, #12]
 8005044:	fbb3 f0f2 	udiv	r0, r3, r2
 8005048:	fb00 f202 	mul.w	r2, r0, r2
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	440b      	add	r3, r1
 8005050:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00d      	beq.n	8005078 <put_fat+0xb8>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b25b      	sxtb	r3, r3
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	b25a      	sxtb	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	b25b      	sxtb	r3, r3
 8005070:	4313      	orrs	r3, r2
 8005072:	b25b      	sxtb	r3, r3
 8005074:	b2db      	uxtb	r3, r3
 8005076:	e001      	b.n	800507c <put_fat+0xbc>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	899b      	ldrh	r3, [r3, #12]
 800508e:	4619      	mov	r1, r3
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	fbb3 f3f1 	udiv	r3, r3, r1
 8005096:	4413      	add	r3, r2
 8005098:	4619      	mov	r1, r3
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff fe00 	bl	8004ca0 <move_window>
 80050a0:	4603      	mov	r3, r0
 80050a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80050a4:	7ffb      	ldrb	r3, [r7, #31]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f040 809a 	bne.w	80051e0 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	899b      	ldrh	r3, [r3, #12]
 80050b6:	461a      	mov	r2, r3
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80050be:	fb00 f202 	mul.w	r2, r0, r2
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	440b      	add	r3, r1
 80050c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <put_fat+0x11a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	091b      	lsrs	r3, r3, #4
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	e00e      	b.n	80050f8 <put_fat+0x138>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	b25b      	sxtb	r3, r3
 80050e0:	f023 030f 	bic.w	r3, r3, #15
 80050e4:	b25a      	sxtb	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	b25b      	sxtb	r3, r3
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	b25b      	sxtb	r3, r3
 80050f2:	4313      	orrs	r3, r2
 80050f4:	b25b      	sxtb	r3, r3
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	70da      	strb	r2, [r3, #3]
			break;
 8005102:	e072      	b.n	80051ea <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	899b      	ldrh	r3, [r3, #12]
 800510c:	085b      	lsrs	r3, r3, #1
 800510e:	b29b      	uxth	r3, r3
 8005110:	4619      	mov	r1, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	fbb3 f3f1 	udiv	r3, r3, r1
 8005118:	4413      	add	r3, r2
 800511a:	4619      	mov	r1, r3
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7ff fdbf 	bl	8004ca0 <move_window>
 8005122:	4603      	mov	r3, r0
 8005124:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005126:	7ffb      	ldrb	r3, [r7, #31]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d15b      	bne.n	80051e4 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	8992      	ldrh	r2, [r2, #12]
 800513a:	fbb3 f0f2 	udiv	r0, r3, r2
 800513e:	fb00 f202 	mul.w	r2, r0, r2
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	440b      	add	r3, r1
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	b292      	uxth	r2, r2
 800514a:	4611      	mov	r1, r2
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fb32 	bl	80047b6 <st_word>
			fs->wflag = 1;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	70da      	strb	r2, [r3, #3]
			break;
 8005158:	e047      	b.n	80051ea <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	899b      	ldrh	r3, [r3, #12]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	b29b      	uxth	r3, r3
 8005166:	4619      	mov	r1, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	fbb3 f3f1 	udiv	r3, r3, r1
 800516e:	4413      	add	r3, r2
 8005170:	4619      	mov	r1, r3
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff fd94 	bl	8004ca0 <move_window>
 8005178:	4603      	mov	r3, r0
 800517a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800517c:	7ffb      	ldrb	r3, [r7, #31]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d132      	bne.n	80051e8 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	8992      	ldrh	r2, [r2, #12]
 8005196:	fbb3 f0f2 	udiv	r0, r3, r2
 800519a:	fb00 f202 	mul.w	r2, r0, r2
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	440b      	add	r3, r1
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fae4 	bl	8004770 <ld_dword>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80051ae:	4323      	orrs	r3, r4
 80051b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	8992      	ldrh	r2, [r2, #12]
 80051c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80051c4:	fb00 f202 	mul.w	r2, r0, r2
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	440b      	add	r3, r1
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fb0c 	bl	80047ec <st_dword>
			fs->wflag = 1;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	70da      	strb	r2, [r3, #3]
			break;
 80051da:	e006      	b.n	80051ea <put_fat+0x22a>
			if (res != FR_OK) break;
 80051dc:	bf00      	nop
 80051de:	e004      	b.n	80051ea <put_fat+0x22a>
			if (res != FR_OK) break;
 80051e0:	bf00      	nop
 80051e2:	e002      	b.n	80051ea <put_fat+0x22a>
			if (res != FR_OK) break;
 80051e4:	bf00      	nop
 80051e6:	e000      	b.n	80051ea <put_fat+0x22a>
			if (res != FR_OK) break;
 80051e8:	bf00      	nop
		}
	}
	return res;
 80051ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3724      	adds	r7, #36	@ 0x24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd90      	pop	{r4, r7, pc}

080051f4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d904      	bls.n	800521a <remove_chain+0x26>
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	d301      	bcc.n	800521e <remove_chain+0x2a>
 800521a:	2302      	movs	r3, #2
 800521c:	e04b      	b.n	80052b6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005224:	f04f 32ff 	mov.w	r2, #4294967295
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	69b8      	ldr	r0, [r7, #24]
 800522c:	f7ff fec8 	bl	8004fc0 <put_fat>
 8005230:	4603      	mov	r3, r0
 8005232:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005234:	7ffb      	ldrb	r3, [r7, #31]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <remove_chain+0x4a>
 800523a:	7ffb      	ldrb	r3, [r7, #31]
 800523c:	e03b      	b.n	80052b6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7ff fdea 	bl	8004e1a <get_fat>
 8005246:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d031      	beq.n	80052b2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <remove_chain+0x64>
 8005254:	2302      	movs	r3, #2
 8005256:	e02e      	b.n	80052b6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d101      	bne.n	8005264 <remove_chain+0x70>
 8005260:	2301      	movs	r3, #1
 8005262:	e028      	b.n	80052b6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005264:	2200      	movs	r2, #0
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	69b8      	ldr	r0, [r7, #24]
 800526a:	f7ff fea9 	bl	8004fc0 <put_fat>
 800526e:	4603      	mov	r3, r0
 8005270:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005272:	7ffb      	ldrb	r3, [r7, #31]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <remove_chain+0x88>
 8005278:	7ffb      	ldrb	r3, [r7, #31]
 800527a:	e01c      	b.n	80052b6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	699a      	ldr	r2, [r3, #24]
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	3b02      	subs	r3, #2
 8005286:	429a      	cmp	r2, r3
 8005288:	d20b      	bcs.n	80052a2 <remove_chain+0xae>
			fs->free_clst++;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	791b      	ldrb	r3, [r3, #4]
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	b2da      	uxtb	r2, r3
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d3c6      	bcc.n	800523e <remove_chain+0x4a>
 80052b0:	e000      	b.n	80052b4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80052b2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b088      	sub	sp, #32
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10d      	bne.n	80052f0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <create_chain+0x2c>
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d31b      	bcc.n	8005322 <create_chain+0x64>
 80052ea:	2301      	movs	r3, #1
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	e018      	b.n	8005322 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff fd91 	bl	8004e1a <get_fat>
 80052f8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d801      	bhi.n	8005304 <create_chain+0x46>
 8005300:	2301      	movs	r3, #1
 8005302:	e070      	b.n	80053e6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d101      	bne.n	8005310 <create_chain+0x52>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	e06a      	b.n	80053e6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	429a      	cmp	r2, r3
 8005318:	d201      	bcs.n	800531e <create_chain+0x60>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	e063      	b.n	80053e6 <create_chain+0x128>
		scl = clst;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	429a      	cmp	r2, r3
 8005334:	d307      	bcc.n	8005346 <create_chain+0x88>
				ncl = 2;
 8005336:	2302      	movs	r3, #2
 8005338:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	429a      	cmp	r2, r3
 8005340:	d901      	bls.n	8005346 <create_chain+0x88>
 8005342:	2300      	movs	r3, #0
 8005344:	e04f      	b.n	80053e6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005346:	69f9      	ldr	r1, [r7, #28]
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff fd66 	bl	8004e1a <get_fat>
 800534e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00e      	beq.n	8005374 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d003      	beq.n	8005364 <create_chain+0xa6>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d101      	bne.n	8005368 <create_chain+0xaa>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	e03e      	b.n	80053e6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	429a      	cmp	r2, r3
 800536e:	d1da      	bne.n	8005326 <create_chain+0x68>
 8005370:	2300      	movs	r3, #0
 8005372:	e038      	b.n	80053e6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005374:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005376:	f04f 32ff 	mov.w	r2, #4294967295
 800537a:	69f9      	ldr	r1, [r7, #28]
 800537c:	6938      	ldr	r0, [r7, #16]
 800537e:	f7ff fe1f 	bl	8004fc0 <put_fat>
 8005382:	4603      	mov	r3, r0
 8005384:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005386:	7dfb      	ldrb	r3, [r7, #23]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <create_chain+0xe2>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d006      	beq.n	80053a0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	6938      	ldr	r0, [r7, #16]
 8005398:	f7ff fe12 	bl	8004fc0 <put_fat>
 800539c:	4603      	mov	r3, r0
 800539e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d116      	bne.n	80053d4 <create_chain+0x116>
		fs->last_clst = ncl;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	3b02      	subs	r3, #2
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d804      	bhi.n	80053c4 <create_chain+0x106>
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	1e5a      	subs	r2, r3, #1
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	791b      	ldrb	r3, [r3, #4]
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	711a      	strb	r2, [r3, #4]
 80053d2:	e007      	b.n	80053e4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d102      	bne.n	80053e0 <create_chain+0x122>
 80053da:	f04f 33ff 	mov.w	r3, #4294967295
 80053de:	e000      	b.n	80053e2 <create_chain+0x124>
 80053e0:	2301      	movs	r3, #1
 80053e2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80053e4:	69fb      	ldr	r3, [r7, #28]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b087      	sub	sp, #28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005402:	3304      	adds	r3, #4
 8005404:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	899b      	ldrh	r3, [r3, #12]
 800540a:	461a      	mov	r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	8952      	ldrh	r2, [r2, #10]
 8005416:	fbb3 f3f2 	udiv	r3, r3, r2
 800541a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1d1a      	adds	r2, r3, #4
 8005420:	613a      	str	r2, [r7, #16]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <clmt_clust+0x42>
 800542c:	2300      	movs	r3, #0
 800542e:	e010      	b.n	8005452 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	429a      	cmp	r2, r3
 8005436:	d307      	bcc.n	8005448 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	3304      	adds	r3, #4
 8005444:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005446:	e7e9      	b.n	800541c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005448:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	4413      	add	r3, r2
}
 8005452:	4618      	mov	r0, r3
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005474:	d204      	bcs.n	8005480 <dir_sdi+0x22>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	f003 031f 	and.w	r3, r3, #31
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005480:	2302      	movs	r3, #2
 8005482:	e071      	b.n	8005568 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <dir_sdi+0x46>
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d902      	bls.n	80054a4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10c      	bne.n	80054c4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	8912      	ldrh	r2, [r2, #8]
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d301      	bcc.n	80054ba <dir_sdi+0x5c>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e056      	b.n	8005568 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	61da      	str	r2, [r3, #28]
 80054c2:	e02d      	b.n	8005520 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	895b      	ldrh	r3, [r3, #10]
 80054c8:	461a      	mov	r2, r3
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	899b      	ldrh	r3, [r3, #12]
 80054ce:	fb02 f303 	mul.w	r3, r2, r3
 80054d2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80054d4:	e019      	b.n	800550a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6979      	ldr	r1, [r7, #20]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff fc9d 	bl	8004e1a <get_fat>
 80054e0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d101      	bne.n	80054ee <dir_sdi+0x90>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e03c      	b.n	8005568 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d904      	bls.n	80054fe <dir_sdi+0xa0>
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d301      	bcc.n	8005502 <dir_sdi+0xa4>
 80054fe:	2302      	movs	r3, #2
 8005500:	e032      	b.n	8005568 <dir_sdi+0x10a>
			ofs -= csz;
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	429a      	cmp	r2, r3
 8005510:	d2e1      	bcs.n	80054d6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005512:	6979      	ldr	r1, [r7, #20]
 8005514:	6938      	ldr	r0, [r7, #16]
 8005516:	f7ff fc61 	bl	8004ddc <clust2sect>
 800551a:	4602      	mov	r2, r0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <dir_sdi+0xd4>
 800552e:	2302      	movs	r3, #2
 8005530:	e01a      	b.n	8005568 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	899b      	ldrh	r3, [r3, #12]
 800553a:	4619      	mov	r1, r3
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005542:	441a      	add	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	899b      	ldrh	r3, [r3, #12]
 8005552:	461a      	mov	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	fbb3 f0f2 	udiv	r0, r3, r2
 800555a:	fb00 f202 	mul.w	r2, r0, r2
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	18ca      	adds	r2, r1, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	3320      	adds	r3, #32
 8005586:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <dir_next+0x28>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005596:	d301      	bcc.n	800559c <dir_next+0x2c>
 8005598:	2304      	movs	r3, #4
 800559a:	e0bb      	b.n	8005714 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	899b      	ldrh	r3, [r3, #12]
 80055a0:	461a      	mov	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80055a8:	fb01 f202 	mul.w	r2, r1, r2
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f040 809d 	bne.w	80056ee <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10b      	bne.n	80055de <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	8912      	ldrh	r2, [r2, #8]
 80055ce:	4293      	cmp	r3, r2
 80055d0:	f0c0 808d 	bcc.w	80056ee <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	61da      	str	r2, [r3, #28]
 80055da:	2304      	movs	r3, #4
 80055dc:	e09a      	b.n	8005714 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	899b      	ldrh	r3, [r3, #12]
 80055e2:	461a      	mov	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	8952      	ldrh	r2, [r2, #10]
 80055ee:	3a01      	subs	r2, #1
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d17b      	bne.n	80056ee <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f7ff fc0b 	bl	8004e1a <get_fat>
 8005604:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d801      	bhi.n	8005610 <dir_next+0xa0>
 800560c:	2302      	movs	r3, #2
 800560e:	e081      	b.n	8005714 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005616:	d101      	bne.n	800561c <dir_next+0xac>
 8005618:	2301      	movs	r3, #1
 800561a:	e07b      	b.n	8005714 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	429a      	cmp	r2, r3
 8005624:	d359      	bcc.n	80056da <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	61da      	str	r2, [r3, #28]
 8005632:	2304      	movs	r3, #4
 8005634:	e06e      	b.n	8005714 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7ff fe3d 	bl	80052be <create_chain>
 8005644:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <dir_next+0xe0>
 800564c:	2307      	movs	r3, #7
 800564e:	e061      	b.n	8005714 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <dir_next+0xea>
 8005656:	2302      	movs	r3, #2
 8005658:	e05c      	b.n	8005714 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005660:	d101      	bne.n	8005666 <dir_next+0xf6>
 8005662:	2301      	movs	r3, #1
 8005664:	e056      	b.n	8005714 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff fad6 	bl	8004c18 <sync_window>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <dir_next+0x106>
 8005672:	2301      	movs	r3, #1
 8005674:	e04e      	b.n	8005714 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	899b      	ldrh	r3, [r3, #12]
 8005680:	461a      	mov	r2, r3
 8005682:	2100      	movs	r1, #0
 8005684:	f7ff f8ff 	bl	8004886 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	6979      	ldr	r1, [r7, #20]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f7ff fba4 	bl	8004ddc <clust2sect>
 8005694:	4602      	mov	r2, r0
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	635a      	str	r2, [r3, #52]	@ 0x34
 800569a:	e012      	b.n	80056c2 <dir_next+0x152>
						fs->wflag = 1;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff fab8 	bl	8004c18 <sync_window>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <dir_next+0x142>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e030      	b.n	8005714 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3301      	adds	r3, #1
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	895b      	ldrh	r3, [r3, #10]
 80056c6:	461a      	mov	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d3e6      	bcc.n	800569c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad2      	subs	r2, r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80056e0:	6979      	ldr	r1, [r7, #20]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7ff fb7a 	bl	8004ddc <clust2sect>
 80056e8:	4602      	mov	r2, r0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	899b      	ldrh	r3, [r3, #12]
 80056fe:	461a      	mov	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	fbb3 f0f2 	udiv	r0, r3, r2
 8005706:	fb00 f202 	mul.w	r2, r0, r2
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	18ca      	adds	r2, r1, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800572c:	2100      	movs	r1, #0
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fe95 	bl	800545e <dir_sdi>
 8005734:	4603      	mov	r3, r0
 8005736:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005738:	7dfb      	ldrb	r3, [r7, #23]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d12b      	bne.n	8005796 <dir_alloc+0x7a>
		n = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	4619      	mov	r1, r3
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f7ff faa9 	bl	8004ca0 <move_window>
 800574e:	4603      	mov	r3, r0
 8005750:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005752:	7dfb      	ldrb	r3, [r7, #23]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d11d      	bne.n	8005794 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2be5      	cmp	r3, #229	@ 0xe5
 8005760:	d004      	beq.n	800576c <dir_alloc+0x50>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d107      	bne.n	800577c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	3301      	adds	r3, #1
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d102      	bne.n	8005780 <dir_alloc+0x64>
 800577a:	e00c      	b.n	8005796 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800577c:	2300      	movs	r3, #0
 800577e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005780:	2101      	movs	r1, #1
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff fef4 	bl	8005570 <dir_next>
 8005788:	4603      	mov	r3, r0
 800578a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0d7      	beq.n	8005742 <dir_alloc+0x26>
 8005792:	e000      	b.n	8005796 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005794:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005796:	7dfb      	ldrb	r3, [r7, #23]
 8005798:	2b04      	cmp	r3, #4
 800579a:	d101      	bne.n	80057a0 <dir_alloc+0x84>
 800579c:	2307      	movs	r3, #7
 800579e:	75fb      	strb	r3, [r7, #23]
	return res;
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	331a      	adds	r3, #26
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fe ffc1 	bl	8004740 <ld_word>
 80057be:	4603      	mov	r3, r0
 80057c0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d109      	bne.n	80057de <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	3314      	adds	r3, #20
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe ffb6 	bl	8004740 <ld_word>
 80057d4:	4603      	mov	r3, r0
 80057d6:	041b      	lsls	r3, r3, #16
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80057de:	68fb      	ldr	r3, [r7, #12]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	331a      	adds	r3, #26
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	b292      	uxth	r2, r2
 80057fc:	4611      	mov	r1, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe ffd9 	bl	80047b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d109      	bne.n	8005820 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f103 0214 	add.w	r2, r3, #20
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	0c1b      	lsrs	r3, r3, #16
 8005816:	b29b      	uxth	r3, r3
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f7fe ffcb 	bl	80047b6 <st_word>
	}
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	331a      	adds	r3, #26
 8005836:	4618      	mov	r0, r3
 8005838:	f7fe ff82 	bl	8004740 <ld_word>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <cmp_lfn+0x1e>
 8005842:	2300      	movs	r3, #0
 8005844:	e059      	b.n	80058fa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	4613      	mov	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800585c:	2301      	movs	r3, #1
 800585e:	81fb      	strh	r3, [r7, #14]
 8005860:	2300      	movs	r3, #0
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	e033      	b.n	80058ce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005866:	4a27      	ldr	r2, [pc, #156]	@ (8005904 <cmp_lfn+0xdc>)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	4413      	add	r3, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe ff63 	bl	8004740 <ld_word>
 800587a:	4603      	mov	r3, r0
 800587c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800587e:	89fb      	ldrh	r3, [r7, #14]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01a      	beq.n	80058ba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2bfe      	cmp	r3, #254	@ 0xfe
 8005888:	d812      	bhi.n	80058b0 <cmp_lfn+0x88>
 800588a:	89bb      	ldrh	r3, [r7, #12]
 800588c:	4618      	mov	r0, r3
 800588e:	f001 fd7b 	bl	8007388 <ff_wtoupper>
 8005892:	4603      	mov	r3, r0
 8005894:	461c      	mov	r4, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	617a      	str	r2, [r7, #20]
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4413      	add	r3, r2
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 fd6f 	bl	8007388 <ff_wtoupper>
 80058aa:	4603      	mov	r3, r0
 80058ac:	429c      	cmp	r4, r3
 80058ae:	d001      	beq.n	80058b4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80058b0:	2300      	movs	r3, #0
 80058b2:	e022      	b.n	80058fa <cmp_lfn+0xd2>
			}
			wc = uc;
 80058b4:	89bb      	ldrh	r3, [r7, #12]
 80058b6:	81fb      	strh	r3, [r7, #14]
 80058b8:	e006      	b.n	80058c8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80058ba:	89bb      	ldrh	r3, [r7, #12]
 80058bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d001      	beq.n	80058c8 <cmp_lfn+0xa0>
 80058c4:	2300      	movs	r3, #0
 80058c6:	e018      	b.n	80058fa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	3301      	adds	r3, #1
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b0c      	cmp	r3, #12
 80058d2:	d9c8      	bls.n	8005866 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00b      	beq.n	80058f8 <cmp_lfn+0xd0>
 80058e0:	89fb      	ldrh	r3, [r7, #14]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d008      	beq.n	80058f8 <cmp_lfn+0xd0>
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <cmp_lfn+0xd0>
 80058f4:	2300      	movs	r3, #0
 80058f6:	e000      	b.n	80058fa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80058f8:	2301      	movs	r3, #1
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd90      	pop	{r4, r7, pc}
 8005902:	bf00      	nop
 8005904:	0800803c 	.word	0x0800803c

08005908 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	4611      	mov	r1, r2
 8005914:	461a      	mov	r2, r3
 8005916:	460b      	mov	r3, r1
 8005918:	71fb      	strb	r3, [r7, #7]
 800591a:	4613      	mov	r3, r2
 800591c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	330d      	adds	r3, #13
 8005922:	79ba      	ldrb	r2, [r7, #6]
 8005924:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	330b      	adds	r3, #11
 800592a:	220f      	movs	r2, #15
 800592c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	330c      	adds	r3, #12
 8005932:	2200      	movs	r2, #0
 8005934:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	331a      	adds	r3, #26
 800593a:	2100      	movs	r1, #0
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe ff3a 	bl	80047b6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	1e5a      	subs	r2, r3, #1
 8005946:	4613      	mov	r3, r2
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	82fb      	strh	r3, [r7, #22]
 8005956:	2300      	movs	r3, #0
 8005958:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800595a:	8afb      	ldrh	r3, [r7, #22]
 800595c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005960:	4293      	cmp	r3, r2
 8005962:	d007      	beq.n	8005974 <put_lfn+0x6c>
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	61fa      	str	r2, [r7, #28]
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005974:	4a17      	ldr	r2, [pc, #92]	@ (80059d4 <put_lfn+0xcc>)
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	4413      	add	r3, r2
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4413      	add	r3, r2
 8005982:	8afa      	ldrh	r2, [r7, #22]
 8005984:	4611      	mov	r1, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe ff15 	bl	80047b6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800598c:	8afb      	ldrh	r3, [r7, #22]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <put_lfn+0x90>
 8005992:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005996:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	3301      	adds	r3, #1
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2b0c      	cmp	r3, #12
 80059a2:	d9da      	bls.n	800595a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80059a4:	8afb      	ldrh	r3, [r7, #22]
 80059a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d006      	beq.n	80059bc <put_lfn+0xb4>
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <put_lfn+0xbc>
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059c2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	79fa      	ldrb	r2, [r7, #7]
 80059c8:	701a      	strb	r2, [r3, #0]
}
 80059ca:	bf00      	nop
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	0800803c 	.word	0x0800803c

080059d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08c      	sub	sp, #48	@ 0x30
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80059e6:	220b      	movs	r2, #11
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7fe ff2a 	bl	8004844 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b05      	cmp	r3, #5
 80059f4:	d92b      	bls.n	8005a4e <gen_numname+0x76>
		sr = seq;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80059fa:	e022      	b.n	8005a42 <gen_numname+0x6a>
			wc = *lfn++;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	1c9a      	adds	r2, r3, #2
 8005a00:	607a      	str	r2, [r7, #4]
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005a06:	2300      	movs	r3, #0
 8005a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a0a:	e017      	b.n	8005a3c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	005a      	lsls	r2, r3, #1
 8005a10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	4413      	add	r3, r2
 8005a18:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005a1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <gen_numname+0x5e>
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005a30:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005a34:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	3301      	adds	r3, #1
 8005a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3e:	2b0f      	cmp	r3, #15
 8005a40:	d9e4      	bls.n	8005a0c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1d8      	bne.n	80059fc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005a4e:	2307      	movs	r3, #7
 8005a50:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	3330      	adds	r3, #48	@ 0x30
 8005a5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005a62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a66:	2b39      	cmp	r3, #57	@ 0x39
 8005a68:	d904      	bls.n	8005a74 <gen_numname+0x9c>
 8005a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a6e:	3307      	adds	r3, #7
 8005a70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a76:	1e5a      	subs	r2, r3, #1
 8005a78:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a7a:	3330      	adds	r3, #48	@ 0x30
 8005a7c:	443b      	add	r3, r7
 8005a7e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005a82:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1df      	bne.n	8005a52 <gen_numname+0x7a>
	ns[i] = '~';
 8005a92:	f107 0214 	add.w	r2, r7, #20
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	4413      	add	r3, r2
 8005a9a:	227e      	movs	r2, #126	@ 0x7e
 8005a9c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa2:	e002      	b.n	8005aaa <gen_numname+0xd2>
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d205      	bcs.n	8005abe <gen_numname+0xe6>
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	4413      	add	r3, r2
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d1f2      	bne.n	8005aa4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	2b07      	cmp	r3, #7
 8005ac2:	d807      	bhi.n	8005ad4 <gen_numname+0xfc>
 8005ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005aca:	3330      	adds	r3, #48	@ 0x30
 8005acc:	443b      	add	r3, r7
 8005ace:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005ad2:	e000      	b.n	8005ad6 <gen_numname+0xfe>
 8005ad4:	2120      	movs	r1, #32
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	627a      	str	r2, [r7, #36]	@ 0x24
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	460a      	mov	r2, r1
 8005ae2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	2b07      	cmp	r3, #7
 8005ae8:	d9e9      	bls.n	8005abe <gen_numname+0xe6>
}
 8005aea:	bf00      	nop
 8005aec:	bf00      	nop
 8005aee:	3730      	adds	r7, #48	@ 0x30
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005b00:	230b      	movs	r3, #11
 8005b02:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	0852      	lsrs	r2, r2, #1
 8005b0a:	01db      	lsls	r3, r3, #7
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	1c59      	adds	r1, r3, #1
 8005b14:	6079      	str	r1, [r7, #4]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	4413      	add	r3, r2
 8005b1a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	60bb      	str	r3, [r7, #8]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1ed      	bne.n	8005b04 <sum_sfn+0x10>
	return sum;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b086      	sub	sp, #24
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005b44:	2100      	movs	r1, #0
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff fc89 	bl	800545e <dir_sdi>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <dir_find+0x24>
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
 8005b58:	e0a9      	b.n	8005cae <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005b5a:	23ff      	movs	r3, #255	@ 0xff
 8005b5c:	753b      	strb	r3, [r7, #20]
 8005b5e:	7d3b      	ldrb	r3, [r7, #20]
 8005b60:	757b      	strb	r3, [r7, #21]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f04f 32ff 	mov.w	r2, #4294967295
 8005b68:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6938      	ldr	r0, [r7, #16]
 8005b72:	f7ff f895 	bl	8004ca0 <move_window>
 8005b76:	4603      	mov	r3, r0
 8005b78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f040 8090 	bne.w	8005ca2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005b8a:	7dbb      	ldrb	r3, [r7, #22]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <dir_find+0x60>
 8005b90:	2304      	movs	r3, #4
 8005b92:	75fb      	strb	r3, [r7, #23]
 8005b94:	e08a      	b.n	8005cac <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	330b      	adds	r3, #11
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	7bfa      	ldrb	r2, [r7, #15]
 8005ba8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005baa:	7dbb      	ldrb	r3, [r7, #22]
 8005bac:	2be5      	cmp	r3, #229	@ 0xe5
 8005bae:	d007      	beq.n	8005bc0 <dir_find+0x8a>
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <dir_find+0x98>
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	2b0f      	cmp	r3, #15
 8005bbe:	d006      	beq.n	8005bce <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005bc0:	23ff      	movs	r3, #255	@ 0xff
 8005bc2:	757b      	strb	r3, [r7, #21]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bca:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bcc:	e05e      	b.n	8005c8c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b0f      	cmp	r3, #15
 8005bd2:	d136      	bne.n	8005c42 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d154      	bne.n	8005c8c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005be2:	7dbb      	ldrb	r3, [r7, #22]
 8005be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	7b5b      	ldrb	r3, [r3, #13]
 8005bf2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005bf4:	7dbb      	ldrb	r3, [r7, #22]
 8005bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bfa:	75bb      	strb	r3, [r7, #22]
 8005bfc:	7dbb      	ldrb	r3, [r7, #22]
 8005bfe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005c08:	7dba      	ldrb	r2, [r7, #22]
 8005c0a:	7d7b      	ldrb	r3, [r7, #21]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d115      	bne.n	8005c3c <dir_find+0x106>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	330d      	adds	r3, #13
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	7d3a      	ldrb	r2, [r7, #20]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d10e      	bne.n	8005c3c <dir_find+0x106>
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	691a      	ldr	r2, [r3, #16]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f7ff fdfd 	bl	8005828 <cmp_lfn>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <dir_find+0x106>
 8005c34:	7d7b      	ldrb	r3, [r7, #21]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	e000      	b.n	8005c3e <dir_find+0x108>
 8005c3c:	23ff      	movs	r3, #255	@ 0xff
 8005c3e:	757b      	strb	r3, [r7, #21]
 8005c40:	e024      	b.n	8005c8c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005c42:	7d7b      	ldrb	r3, [r7, #21]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <dir_find+0x126>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff ff51 	bl	8005af4 <sum_sfn>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	7d3b      	ldrb	r3, [r7, #20]
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d024      	beq.n	8005ca6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10a      	bne.n	8005c80 <dir_find+0x14a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a18      	ldr	r0, [r3, #32]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	3324      	adds	r3, #36	@ 0x24
 8005c72:	220b      	movs	r2, #11
 8005c74:	4619      	mov	r1, r3
 8005c76:	f7fe fe21 	bl	80048bc <mem_cmp>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d014      	beq.n	8005caa <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005c80:	23ff      	movs	r3, #255	@ 0xff
 8005c82:	757b      	strb	r3, [r7, #21]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff fc6e 	bl	8005570 <dir_next>
 8005c94:	4603      	mov	r3, r0
 8005c96:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f43f af65 	beq.w	8005b6a <dir_find+0x34>
 8005ca0:	e004      	b.n	8005cac <dir_find+0x176>
		if (res != FR_OK) break;
 8005ca2:	bf00      	nop
 8005ca4:	e002      	b.n	8005cac <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005ca6:	bf00      	nop
 8005ca8:	e000      	b.n	8005cac <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005caa:	bf00      	nop

	return res;
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08c      	sub	sp, #48	@ 0x30
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005ccc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <dir_register+0x20>
 8005cd4:	2306      	movs	r3, #6
 8005cd6:	e0e0      	b.n	8005e9a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005cd8:	2300      	movs	r3, #0
 8005cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cdc:	e002      	b.n	8005ce4 <dir_register+0x2c>
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	4413      	add	r3, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1f4      	bne.n	8005cde <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8005cfa:	f107 030c 	add.w	r3, r7, #12
 8005cfe:	220c      	movs	r2, #12
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe fd9f 	bl	8004844 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d032      	beq.n	8005d76 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2240      	movs	r2, #64	@ 0x40
 8005d14:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005d18:	2301      	movs	r3, #1
 8005d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d1c:	e016      	b.n	8005d4c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	f107 010c 	add.w	r1, r7, #12
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	f7ff fe53 	bl	80059d8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff feff 	bl	8005b36 <dir_find>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005d3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	3301      	adds	r3, #1
 8005d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	2b63      	cmp	r3, #99	@ 0x63
 8005d50:	d9e5      	bls.n	8005d1e <dir_register+0x66>
 8005d52:	e000      	b.n	8005d56 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005d54:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d58:	2b64      	cmp	r3, #100	@ 0x64
 8005d5a:	d101      	bne.n	8005d60 <dir_register+0xa8>
 8005d5c:	2307      	movs	r3, #7
 8005d5e:	e09c      	b.n	8005e9a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005d60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d64:	2b04      	cmp	r3, #4
 8005d66:	d002      	beq.n	8005d6e <dir_register+0xb6>
 8005d68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d6c:	e095      	b.n	8005e9a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005d6e:	7dfa      	ldrb	r2, [r7, #23]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <dir_register+0xd8>
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	330c      	adds	r3, #12
 8005d84:	4a47      	ldr	r2, [pc, #284]	@ (8005ea4 <dir_register+0x1ec>)
 8005d86:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8a:	089b      	lsrs	r3, r3, #2
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	e000      	b.n	8005d92 <dir_register+0xda>
 8005d90:	2301      	movs	r3, #1
 8005d92:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005d94:	6a39      	ldr	r1, [r7, #32]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff fcc0 	bl	800571c <dir_alloc>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005da2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d148      	bne.n	8005e3c <dir_register+0x184>
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	623b      	str	r3, [r7, #32]
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d042      	beq.n	8005e3c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	015b      	lsls	r3, r3, #5
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fb4b 	bl	800545e <dir_sdi>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005dce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d132      	bne.n	8005e3c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3324      	adds	r3, #36	@ 0x24
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fe8a 	bl	8005af4 <sum_sfn>
 8005de0:	4603      	mov	r3, r0
 8005de2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	4619      	mov	r1, r3
 8005dea:	69f8      	ldr	r0, [r7, #28]
 8005dec:	f7fe ff58 	bl	8004ca0 <move_window>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005df6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d11d      	bne.n	8005e3a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	6918      	ldr	r0, [r3, #16]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a19      	ldr	r1, [r3, #32]
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	7efb      	ldrb	r3, [r7, #27]
 8005e0c:	f7ff fd7c 	bl	8005908 <put_lfn>
				fs->wflag = 1;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	2201      	movs	r2, #1
 8005e14:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005e16:	2100      	movs	r1, #0
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fba9 	bl	8005570 <dir_next>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005e24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d107      	bne.n	8005e3c <dir_register+0x184>
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1d5      	bne.n	8005de4 <dir_register+0x12c>
 8005e38:	e000      	b.n	8005e3c <dir_register+0x184>
				if (res != FR_OK) break;
 8005e3a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d128      	bne.n	8005e96 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	69f8      	ldr	r0, [r7, #28]
 8005e4c:	f7fe ff28 	bl	8004ca0 <move_window>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005e56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d11b      	bne.n	8005e96 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	2220      	movs	r2, #32
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe fd0d 	bl	8004886 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a18      	ldr	r0, [r3, #32]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3324      	adds	r3, #36	@ 0x24
 8005e74:	220b      	movs	r2, #11
 8005e76:	4619      	mov	r1, r3
 8005e78:	f7fe fce4 	bl	8004844 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	330c      	adds	r3, #12
 8005e88:	f002 0218 	and.w	r2, r2, #24
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2201      	movs	r2, #1
 8005e94:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005e96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3730      	adds	r7, #48	@ 0x30
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	4ec4ec4f 	.word	0x4ec4ec4f

08005ea8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	@ 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	613b      	str	r3, [r7, #16]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	61ba      	str	r2, [r7, #24]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005ed6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ed8:	2b1f      	cmp	r3, #31
 8005eda:	d940      	bls.n	8005f5e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005edc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ede:	2b2f      	cmp	r3, #47	@ 0x2f
 8005ee0:	d006      	beq.n	8005ef0 <create_name+0x48>
 8005ee2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ee4:	2b5c      	cmp	r3, #92	@ 0x5c
 8005ee6:	d110      	bne.n	8005f0a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005ee8:	e002      	b.n	8005ef0 <create_name+0x48>
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	3301      	adds	r3, #1
 8005eee:	61bb      	str	r3, [r7, #24]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005efa:	d0f6      	beq.n	8005eea <create_name+0x42>
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	4413      	add	r3, r2
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f06:	d0f0      	beq.n	8005eea <create_name+0x42>
			break;
 8005f08:	e02a      	b.n	8005f60 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2bfe      	cmp	r3, #254	@ 0xfe
 8005f0e:	d901      	bls.n	8005f14 <create_name+0x6c>
 8005f10:	2306      	movs	r3, #6
 8005f12:	e17d      	b.n	8006210 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005f14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005f1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 f9f6 	bl	8007310 <ff_convert>
 8005f24:	4603      	mov	r3, r0
 8005f26:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005f28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <create_name+0x8a>
 8005f2e:	2306      	movs	r3, #6
 8005f30:	e16e      	b.n	8006210 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005f32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f34:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f36:	d809      	bhi.n	8005f4c <create_name+0xa4>
 8005f38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	488d      	ldr	r0, [pc, #564]	@ (8006174 <create_name+0x2cc>)
 8005f3e:	f7fe fce4 	bl	800490a <chk_chr>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <create_name+0xa4>
 8005f48:	2306      	movs	r3, #6
 8005f4a:	e161      	b.n	8006210 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	617a      	str	r2, [r7, #20]
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f5a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005f5c:	e7b4      	b.n	8005ec8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005f5e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	441a      	add	r2, r3
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005f6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f6c:	2b1f      	cmp	r3, #31
 8005f6e:	d801      	bhi.n	8005f74 <create_name+0xcc>
 8005f70:	2304      	movs	r3, #4
 8005f72:	e000      	b.n	8005f76 <create_name+0xce>
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005f7a:	e011      	b.n	8005fa0 <create_name+0xf8>
		w = lfn[di - 1];
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005f82:	3b01      	subs	r3, #1
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8005f8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	d002      	beq.n	8005f9a <create_name+0xf2>
 8005f94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f96:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f98:	d106      	bne.n	8005fa8 <create_name+0x100>
		di--;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1ea      	bne.n	8005f7c <create_name+0xd4>
 8005fa6:	e000      	b.n	8005faa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005fa8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <create_name+0x118>
 8005fbc:	2306      	movs	r3, #6
 8005fbe:	e127      	b.n	8006210 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3324      	adds	r3, #36	@ 0x24
 8005fc4:	220b      	movs	r2, #11
 8005fc6:	2120      	movs	r1, #32
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe fc5c 	bl	8004886 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	e002      	b.n	8005fda <create_name+0x132>
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d0f5      	beq.n	8005fd4 <create_name+0x12c>
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ff4:	d0ee      	beq.n	8005fd4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <create_name+0x168>
 8005ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006000:	f043 0303 	orr.w	r3, r3, #3
 8006004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006008:	e002      	b.n	8006010 <create_name+0x168>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	3b01      	subs	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <create_name+0x182>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800601c:	3b01      	subs	r3, #1
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	2b2e      	cmp	r3, #46	@ 0x2e
 8006028:	d1ef      	bne.n	800600a <create_name+0x162>

	i = b = 0; ni = 8;
 800602a:	2300      	movs	r3, #0
 800602c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006030:	2300      	movs	r3, #0
 8006032:	623b      	str	r3, [r7, #32]
 8006034:	2308      	movs	r3, #8
 8006036:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	61ba      	str	r2, [r7, #24]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 8090 	beq.w	8006170 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006050:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006052:	2b20      	cmp	r3, #32
 8006054:	d006      	beq.n	8006064 <create_name+0x1bc>
 8006056:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006058:	2b2e      	cmp	r3, #46	@ 0x2e
 800605a:	d10a      	bne.n	8006072 <create_name+0x1ca>
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	429a      	cmp	r2, r3
 8006062:	d006      	beq.n	8006072 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006068:	f043 0303 	orr.w	r3, r3, #3
 800606c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006070:	e07d      	b.n	800616e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006072:	6a3a      	ldr	r2, [r7, #32]
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	429a      	cmp	r2, r3
 8006078:	d203      	bcs.n	8006082 <create_name+0x1da>
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	429a      	cmp	r2, r3
 8006080:	d123      	bne.n	80060ca <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b0b      	cmp	r3, #11
 8006086:	d106      	bne.n	8006096 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800608c:	f043 0303 	orr.w	r3, r3, #3
 8006090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006094:	e075      	b.n	8006182 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	429a      	cmp	r2, r3
 800609c:	d005      	beq.n	80060aa <create_name+0x202>
 800609e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060a2:	f043 0303 	orr.w	r3, r3, #3
 80060a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d866      	bhi.n	8006180 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	2308      	movs	r3, #8
 80060b8:	623b      	str	r3, [r7, #32]
 80060ba:	230b      	movs	r3, #11
 80060bc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80060be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80060c8:	e051      	b.n	800616e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80060ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80060ce:	d914      	bls.n	80060fa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80060d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060d2:	2100      	movs	r1, #0
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 f91b 	bl	8007310 <ff_convert>
 80060da:	4603      	mov	r3, r0
 80060dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80060de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <create_name+0x246>
 80060e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060e6:	3b80      	subs	r3, #128	@ 0x80
 80060e8:	4a23      	ldr	r2, [pc, #140]	@ (8006178 <create_name+0x2d0>)
 80060ea:	5cd3      	ldrb	r3, [r2, r3]
 80060ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80060ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060f2:	f043 0302 	orr.w	r3, r3, #2
 80060f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80060fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <create_name+0x268>
 8006100:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006102:	4619      	mov	r1, r3
 8006104:	481d      	ldr	r0, [pc, #116]	@ (800617c <create_name+0x2d4>)
 8006106:	f7fe fc00 	bl	800490a <chk_chr>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006110:	235f      	movs	r3, #95	@ 0x5f
 8006112:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006118:	f043 0303 	orr.w	r3, r3, #3
 800611c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006120:	e01b      	b.n	800615a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006122:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006124:	2b40      	cmp	r3, #64	@ 0x40
 8006126:	d909      	bls.n	800613c <create_name+0x294>
 8006128:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800612a:	2b5a      	cmp	r3, #90	@ 0x5a
 800612c:	d806      	bhi.n	800613c <create_name+0x294>
					b |= 2;
 800612e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006132:	f043 0302 	orr.w	r3, r3, #2
 8006136:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800613a:	e00e      	b.n	800615a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800613c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800613e:	2b60      	cmp	r3, #96	@ 0x60
 8006140:	d90b      	bls.n	800615a <create_name+0x2b2>
 8006142:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006144:	2b7a      	cmp	r3, #122	@ 0x7a
 8006146:	d808      	bhi.n	800615a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006148:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800614c:	f043 0301 	orr.w	r3, r3, #1
 8006150:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006154:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006156:	3b20      	subs	r3, #32
 8006158:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	623a      	str	r2, [r7, #32]
 8006160:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006162:	b2d1      	uxtb	r1, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	4413      	add	r3, r2
 8006168:	460a      	mov	r2, r1
 800616a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800616e:	e763      	b.n	8006038 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006170:	bf00      	nop
 8006172:	e006      	b.n	8006182 <create_name+0x2da>
 8006174:	08007f5c 	.word	0x08007f5c
 8006178:	08007fbc 	.word	0x08007fbc
 800617c:	08007f68 	.word	0x08007f68
			if (si > di) break;			/* No extension */
 8006180:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006188:	2be5      	cmp	r3, #229	@ 0xe5
 800618a:	d103      	bne.n	8006194 <create_name+0x2ec>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2205      	movs	r2, #5
 8006190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	2b08      	cmp	r3, #8
 8006198:	d104      	bne.n	80061a4 <create_name+0x2fc>
 800619a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80061a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061a8:	f003 030c 	and.w	r3, r3, #12
 80061ac:	2b0c      	cmp	r3, #12
 80061ae:	d005      	beq.n	80061bc <create_name+0x314>
 80061b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d105      	bne.n	80061c8 <create_name+0x320>
 80061bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061c0:	f043 0302 	orr.w	r3, r3, #2
 80061c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80061c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d117      	bne.n	8006204 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80061d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d105      	bne.n	80061ec <create_name+0x344>
 80061e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061e4:	f043 0310 	orr.w	r3, r3, #16
 80061e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80061ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061f0:	f003 030c 	and.w	r3, r3, #12
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d105      	bne.n	8006204 <create_name+0x35c>
 80061f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061fc:	f043 0308 	orr.w	r3, r3, #8
 8006200:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800620a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800620e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006210:	4618      	mov	r0, r3
 8006212:	3728      	adds	r7, #40	@ 0x28
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800622c:	e002      	b.n	8006234 <follow_path+0x1c>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b2f      	cmp	r3, #47	@ 0x2f
 800623a:	d0f8      	beq.n	800622e <follow_path+0x16>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b5c      	cmp	r3, #92	@ 0x5c
 8006242:	d0f4      	beq.n	800622e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2200      	movs	r2, #0
 8006248:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b1f      	cmp	r3, #31
 8006250:	d80a      	bhi.n	8006268 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2280      	movs	r2, #128	@ 0x80
 8006256:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800625a:	2100      	movs	r1, #0
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff f8fe 	bl	800545e <dir_sdi>
 8006262:	4603      	mov	r3, r0
 8006264:	75fb      	strb	r3, [r7, #23]
 8006266:	e048      	b.n	80062fa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006268:	463b      	mov	r3, r7
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff fe1b 	bl	8005ea8 <create_name>
 8006272:	4603      	mov	r3, r0
 8006274:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d139      	bne.n	80062f0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff fc5a 	bl	8005b36 <dir_find>
 8006282:	4603      	mov	r3, r0
 8006284:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800628c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	2b04      	cmp	r3, #4
 8006298:	d12c      	bne.n	80062f4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800629a:	7afb      	ldrb	r3, [r7, #11]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d127      	bne.n	80062f4 <follow_path+0xdc>
 80062a4:	2305      	movs	r3, #5
 80062a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80062a8:	e024      	b.n	80062f4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80062aa:	7afb      	ldrb	r3, [r7, #11]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d121      	bne.n	80062f8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	799b      	ldrb	r3, [r3, #6]
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80062c0:	2305      	movs	r3, #5
 80062c2:	75fb      	strb	r3, [r7, #23]
 80062c4:	e019      	b.n	80062fa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	8992      	ldrh	r2, [r2, #12]
 80062d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80062d8:	fb00 f202 	mul.w	r2, r0, r2
 80062dc:	1a9b      	subs	r3, r3, r2
 80062de:	440b      	add	r3, r1
 80062e0:	4619      	mov	r1, r3
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7ff fa61 	bl	80057aa <ld_clust>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80062ee:	e7bb      	b.n	8006268 <follow_path+0x50>
			if (res != FR_OK) break;
 80062f0:	bf00      	nop
 80062f2:	e002      	b.n	80062fa <follow_path+0xe2>
				break;
 80062f4:	bf00      	nop
 80062f6:	e000      	b.n	80062fa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80062f8:	bf00      	nop
			}
		}
	}

	return res;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
 8006310:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d031      	beq.n	800637e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	e002      	b.n	8006328 <get_ldnumber+0x24>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	3301      	adds	r3, #1
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b1f      	cmp	r3, #31
 800632e:	d903      	bls.n	8006338 <get_ldnumber+0x34>
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b3a      	cmp	r3, #58	@ 0x3a
 8006336:	d1f4      	bne.n	8006322 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b3a      	cmp	r3, #58	@ 0x3a
 800633e:	d11c      	bne.n	800637a <get_ldnumber+0x76>
			tp = *path;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	60fa      	str	r2, [r7, #12]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	3b30      	subs	r3, #48	@ 0x30
 8006350:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b09      	cmp	r3, #9
 8006356:	d80e      	bhi.n	8006376 <get_ldnumber+0x72>
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	429a      	cmp	r2, r3
 800635e:	d10a      	bne.n	8006376 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d107      	bne.n	8006376 <get_ldnumber+0x72>
					vol = (int)i;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	3301      	adds	r3, #1
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	e002      	b.n	8006380 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800637a:	2300      	movs	r3, #0
 800637c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800637e:	693b      	ldr	r3, [r7, #16]
}
 8006380:	4618      	mov	r0, r3
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	70da      	strb	r2, [r3, #3]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f04f 32ff 	mov.w	r2, #4294967295
 80063a2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fe fc7a 	bl	8004ca0 <move_window>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <check_fs+0x2a>
 80063b2:	2304      	movs	r3, #4
 80063b4:	e038      	b.n	8006428 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3338      	adds	r3, #56	@ 0x38
 80063ba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe f9be 	bl	8004740 <ld_word>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d001      	beq.n	80063d4 <check_fs+0x48>
 80063d0:	2303      	movs	r3, #3
 80063d2:	e029      	b.n	8006428 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80063da:	2be9      	cmp	r3, #233	@ 0xe9
 80063dc:	d009      	beq.n	80063f2 <check_fs+0x66>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80063e4:	2beb      	cmp	r3, #235	@ 0xeb
 80063e6:	d11e      	bne.n	8006426 <check_fs+0x9a>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80063ee:	2b90      	cmp	r3, #144	@ 0x90
 80063f0:	d119      	bne.n	8006426 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3338      	adds	r3, #56	@ 0x38
 80063f6:	3336      	adds	r3, #54	@ 0x36
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe f9b9 	bl	8004770 <ld_dword>
 80063fe:	4603      	mov	r3, r0
 8006400:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006404:	4a0a      	ldr	r2, [pc, #40]	@ (8006430 <check_fs+0xa4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d101      	bne.n	800640e <check_fs+0x82>
 800640a:	2300      	movs	r3, #0
 800640c:	e00c      	b.n	8006428 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3338      	adds	r3, #56	@ 0x38
 8006412:	3352      	adds	r3, #82	@ 0x52
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe f9ab 	bl	8004770 <ld_dword>
 800641a:	4603      	mov	r3, r0
 800641c:	4a05      	ldr	r2, [pc, #20]	@ (8006434 <check_fs+0xa8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d101      	bne.n	8006426 <check_fs+0x9a>
 8006422:	2300      	movs	r3, #0
 8006424:	e000      	b.n	8006428 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006426:	2302      	movs	r3, #2
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	00544146 	.word	0x00544146
 8006434:	33544146 	.word	0x33544146

08006438 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b096      	sub	sp, #88	@ 0x58
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	4613      	mov	r3, r2
 8006444:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7ff ff59 	bl	8006304 <get_ldnumber>
 8006452:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006456:	2b00      	cmp	r3, #0
 8006458:	da01      	bge.n	800645e <find_volume+0x26>
 800645a:	230b      	movs	r3, #11
 800645c:	e265      	b.n	800692a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800645e:	4a9f      	ldr	r2, [pc, #636]	@ (80066dc <find_volume+0x2a4>)
 8006460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006466:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <find_volume+0x3a>
 800646e:	230c      	movs	r3, #12
 8006470:	e25b      	b.n	800692a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006476:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	f023 0301 	bic.w	r3, r3, #1
 800647e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01a      	beq.n	80064be <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe f8b7 	bl	8004600 <disk_status>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006498:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10c      	bne.n	80064be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <find_volume+0x82>
 80064aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80064b6:	230a      	movs	r3, #10
 80064b8:	e237      	b.n	800692a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80064ba:	2300      	movs	r3, #0
 80064bc:	e235      	b.n	800692a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80064be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c0:	2200      	movs	r2, #0
 80064c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80064c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80064cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ce:	785b      	ldrb	r3, [r3, #1]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fe f8af 	bl	8004634 <disk_initialize>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80064dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80064e8:	2303      	movs	r3, #3
 80064ea:	e21e      	b.n	800692a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d007      	beq.n	8006502 <find_volume+0xca>
 80064f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80064fe:	230a      	movs	r3, #10
 8006500:	e213      	b.n	800692a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006504:	7858      	ldrb	r0, [r3, #1]
 8006506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006508:	330c      	adds	r3, #12
 800650a:	461a      	mov	r2, r3
 800650c:	2102      	movs	r1, #2
 800650e:	f7fe f8f9 	bl	8004704 <disk_ioctl>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <find_volume+0xe4>
 8006518:	2301      	movs	r3, #1
 800651a:	e206      	b.n	800692a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800651c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651e:	899b      	ldrh	r3, [r3, #12]
 8006520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006524:	d80d      	bhi.n	8006542 <find_volume+0x10a>
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	899b      	ldrh	r3, [r3, #12]
 800652a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800652e:	d308      	bcc.n	8006542 <find_volume+0x10a>
 8006530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006532:	899b      	ldrh	r3, [r3, #12]
 8006534:	461a      	mov	r2, r3
 8006536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006538:	899b      	ldrh	r3, [r3, #12]
 800653a:	3b01      	subs	r3, #1
 800653c:	4013      	ands	r3, r2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <find_volume+0x10e>
 8006542:	2301      	movs	r3, #1
 8006544:	e1f1      	b.n	800692a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800654a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800654c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800654e:	f7ff ff1d 	bl	800638c <check_fs>
 8006552:	4603      	mov	r3, r0
 8006554:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006558:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800655c:	2b02      	cmp	r3, #2
 800655e:	d149      	bne.n	80065f4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006560:	2300      	movs	r3, #0
 8006562:	643b      	str	r3, [r7, #64]	@ 0x40
 8006564:	e01e      	b.n	80065a4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006568:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800656c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006574:	4413      	add	r3, r2
 8006576:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657a:	3304      	adds	r3, #4
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d006      	beq.n	8006590 <find_volume+0x158>
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	3308      	adds	r3, #8
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe f8f2 	bl	8004770 <ld_dword>
 800658c:	4602      	mov	r2, r0
 800658e:	e000      	b.n	8006592 <find_volume+0x15a>
 8006590:	2200      	movs	r2, #0
 8006592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	3358      	adds	r3, #88	@ 0x58
 8006598:	443b      	add	r3, r7
 800659a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800659e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a0:	3301      	adds	r3, #1
 80065a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80065a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d9dd      	bls.n	8006566 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80065aa:	2300      	movs	r3, #0
 80065ac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80065ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <find_volume+0x182>
 80065b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b6:	3b01      	subs	r3, #1
 80065b8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80065ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	3358      	adds	r3, #88	@ 0x58
 80065c0:	443b      	add	r3, r7
 80065c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80065c6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80065c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <find_volume+0x1a2>
 80065ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80065d2:	f7ff fedb 	bl	800638c <check_fs>
 80065d6:	4603      	mov	r3, r0
 80065d8:	e000      	b.n	80065dc <find_volume+0x1a4>
 80065da:	2303      	movs	r3, #3
 80065dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80065e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d905      	bls.n	80065f4 <find_volume+0x1bc>
 80065e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ea:	3301      	adds	r3, #1
 80065ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80065ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d9e2      	bls.n	80065ba <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80065f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d101      	bne.n	8006600 <find_volume+0x1c8>
 80065fc:	2301      	movs	r3, #1
 80065fe:	e194      	b.n	800692a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006600:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006604:	2b01      	cmp	r3, #1
 8006606:	d901      	bls.n	800660c <find_volume+0x1d4>
 8006608:	230d      	movs	r3, #13
 800660a:	e18e      	b.n	800692a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800660c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660e:	3338      	adds	r3, #56	@ 0x38
 8006610:	330b      	adds	r3, #11
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe f894 	bl	8004740 <ld_word>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661e:	899b      	ldrh	r3, [r3, #12]
 8006620:	429a      	cmp	r2, r3
 8006622:	d001      	beq.n	8006628 <find_volume+0x1f0>
 8006624:	230d      	movs	r3, #13
 8006626:	e180      	b.n	800692a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662a:	3338      	adds	r3, #56	@ 0x38
 800662c:	3316      	adds	r3, #22
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe f886 	bl	8004740 <ld_word>
 8006634:	4603      	mov	r3, r0
 8006636:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <find_volume+0x214>
 800663e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006640:	3338      	adds	r3, #56	@ 0x38
 8006642:	3324      	adds	r3, #36	@ 0x24
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe f893 	bl	8004770 <ld_dword>
 800664a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006650:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006654:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665e:	789b      	ldrb	r3, [r3, #2]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d005      	beq.n	8006670 <find_volume+0x238>
 8006664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006666:	789b      	ldrb	r3, [r3, #2]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d001      	beq.n	8006670 <find_volume+0x238>
 800666c:	230d      	movs	r3, #13
 800666e:	e15c      	b.n	800692a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006672:	789b      	ldrb	r3, [r3, #2]
 8006674:	461a      	mov	r2, r3
 8006676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006678:	fb02 f303 	mul.w	r3, r2, r3
 800667c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800667e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006684:	461a      	mov	r2, r3
 8006686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006688:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800668a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668c:	895b      	ldrh	r3, [r3, #10]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d008      	beq.n	80066a4 <find_volume+0x26c>
 8006692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006694:	895b      	ldrh	r3, [r3, #10]
 8006696:	461a      	mov	r2, r3
 8006698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669a:	895b      	ldrh	r3, [r3, #10]
 800669c:	3b01      	subs	r3, #1
 800669e:	4013      	ands	r3, r2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <find_volume+0x270>
 80066a4:	230d      	movs	r3, #13
 80066a6:	e140      	b.n	800692a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	3338      	adds	r3, #56	@ 0x38
 80066ac:	3311      	adds	r3, #17
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe f846 	bl	8004740 <ld_word>
 80066b4:	4603      	mov	r3, r0
 80066b6:	461a      	mov	r2, r3
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80066bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066be:	891b      	ldrh	r3, [r3, #8]
 80066c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066c2:	8992      	ldrh	r2, [r2, #12]
 80066c4:	0952      	lsrs	r2, r2, #5
 80066c6:	b292      	uxth	r2, r2
 80066c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80066cc:	fb01 f202 	mul.w	r2, r1, r2
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <find_volume+0x2a8>
 80066d8:	230d      	movs	r3, #13
 80066da:	e126      	b.n	800692a <find_volume+0x4f2>
 80066dc:	20002224 	.word	0x20002224

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80066e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e2:	3338      	adds	r3, #56	@ 0x38
 80066e4:	3313      	adds	r3, #19
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe f82a 	bl	8004740 <ld_word>
 80066ec:	4603      	mov	r3, r0
 80066ee:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80066f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <find_volume+0x2cc>
 80066f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f8:	3338      	adds	r3, #56	@ 0x38
 80066fa:	3320      	adds	r3, #32
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe f837 	bl	8004770 <ld_dword>
 8006702:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	3338      	adds	r3, #56	@ 0x38
 8006708:	330e      	adds	r3, #14
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe f818 	bl	8004740 <ld_word>
 8006710:	4603      	mov	r3, r0
 8006712:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006714:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <find_volume+0x2e6>
 800671a:	230d      	movs	r3, #13
 800671c:	e105      	b.n	800692a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800671e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006722:	4413      	add	r3, r2
 8006724:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006726:	8911      	ldrh	r1, [r2, #8]
 8006728:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800672a:	8992      	ldrh	r2, [r2, #12]
 800672c:	0952      	lsrs	r2, r2, #5
 800672e:	b292      	uxth	r2, r2
 8006730:	fbb1 f2f2 	udiv	r2, r1, r2
 8006734:	b292      	uxth	r2, r2
 8006736:	4413      	add	r3, r2
 8006738:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800673a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800673c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673e:	429a      	cmp	r2, r3
 8006740:	d201      	bcs.n	8006746 <find_volume+0x30e>
 8006742:	230d      	movs	r3, #13
 8006744:	e0f1      	b.n	800692a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800674e:	8952      	ldrh	r2, [r2, #10]
 8006750:	fbb3 f3f2 	udiv	r3, r3, r2
 8006754:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <find_volume+0x328>
 800675c:	230d      	movs	r3, #13
 800675e:	e0e4      	b.n	800692a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006760:	2303      	movs	r3, #3
 8006762:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800676c:	4293      	cmp	r3, r2
 800676e:	d802      	bhi.n	8006776 <find_volume+0x33e>
 8006770:	2302      	movs	r3, #2
 8006772:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800677c:	4293      	cmp	r3, r2
 800677e:	d802      	bhi.n	8006786 <find_volume+0x34e>
 8006780:	2301      	movs	r3, #1
 8006782:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	1c9a      	adds	r2, r3, #2
 800678a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800678e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006790:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006792:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006794:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006798:	441a      	add	r2, r3
 800679a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800679e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	441a      	add	r2, r3
 80067a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80067a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d11e      	bne.n	80067ee <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80067b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b2:	3338      	adds	r3, #56	@ 0x38
 80067b4:	332a      	adds	r3, #42	@ 0x2a
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fd ffc2 	bl	8004740 <ld_word>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <find_volume+0x38e>
 80067c2:	230d      	movs	r3, #13
 80067c4:	e0b1      	b.n	800692a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80067c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c8:	891b      	ldrh	r3, [r3, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <find_volume+0x39a>
 80067ce:	230d      	movs	r3, #13
 80067d0:	e0ab      	b.n	800692a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80067d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d4:	3338      	adds	r3, #56	@ 0x38
 80067d6:	332c      	adds	r3, #44	@ 0x2c
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fd ffc9 	bl	8004770 <ld_dword>
 80067de:	4602      	mov	r2, r0
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80067e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ec:	e01f      	b.n	800682e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80067ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f0:	891b      	ldrh	r3, [r3, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <find_volume+0x3c2>
 80067f6:	230d      	movs	r3, #13
 80067f8:	e097      	b.n	800692a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006800:	441a      	add	r2, r3
 8006802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006804:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006806:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800680a:	2b02      	cmp	r3, #2
 800680c:	d103      	bne.n	8006816 <find_volume+0x3de>
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	e00a      	b.n	800682c <find_volume+0x3f4>
 8006816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006818:	69da      	ldr	r2, [r3, #28]
 800681a:	4613      	mov	r3, r2
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	4413      	add	r3, r2
 8006820:	085a      	lsrs	r2, r3, #1
 8006822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800682c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800682e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006830:	6a1a      	ldr	r2, [r3, #32]
 8006832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006834:	899b      	ldrh	r3, [r3, #12]
 8006836:	4619      	mov	r1, r3
 8006838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800683a:	440b      	add	r3, r1
 800683c:	3b01      	subs	r3, #1
 800683e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006840:	8989      	ldrh	r1, [r1, #12]
 8006842:	fbb3 f3f1 	udiv	r3, r3, r1
 8006846:	429a      	cmp	r2, r3
 8006848:	d201      	bcs.n	800684e <find_volume+0x416>
 800684a:	230d      	movs	r3, #13
 800684c:	e06d      	b.n	800692a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800684e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006850:	f04f 32ff 	mov.w	r2, #4294967295
 8006854:	619a      	str	r2, [r3, #24]
 8006856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800685e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006860:	2280      	movs	r2, #128	@ 0x80
 8006862:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006864:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006868:	2b03      	cmp	r3, #3
 800686a:	d149      	bne.n	8006900 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800686c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686e:	3338      	adds	r3, #56	@ 0x38
 8006870:	3330      	adds	r3, #48	@ 0x30
 8006872:	4618      	mov	r0, r3
 8006874:	f7fd ff64 	bl	8004740 <ld_word>
 8006878:	4603      	mov	r3, r0
 800687a:	2b01      	cmp	r3, #1
 800687c:	d140      	bne.n	8006900 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800687e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006880:	3301      	adds	r3, #1
 8006882:	4619      	mov	r1, r3
 8006884:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006886:	f7fe fa0b 	bl	8004ca0 <move_window>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d137      	bne.n	8006900 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006892:	2200      	movs	r2, #0
 8006894:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006898:	3338      	adds	r3, #56	@ 0x38
 800689a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd ff4e 	bl	8004740 <ld_word>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d127      	bne.n	8006900 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80068b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b2:	3338      	adds	r3, #56	@ 0x38
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fd ff5b 	bl	8004770 <ld_dword>
 80068ba:	4603      	mov	r3, r0
 80068bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006934 <find_volume+0x4fc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d11e      	bne.n	8006900 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80068c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c4:	3338      	adds	r3, #56	@ 0x38
 80068c6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fd ff50 	bl	8004770 <ld_dword>
 80068d0:	4603      	mov	r3, r0
 80068d2:	4a19      	ldr	r2, [pc, #100]	@ (8006938 <find_volume+0x500>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d113      	bne.n	8006900 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80068d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068da:	3338      	adds	r3, #56	@ 0x38
 80068dc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fd ff45 	bl	8004770 <ld_dword>
 80068e6:	4602      	mov	r2, r0
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80068ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ee:	3338      	adds	r3, #56	@ 0x38
 80068f0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fd ff3b 	bl	8004770 <ld_dword>
 80068fa:	4602      	mov	r2, r0
 80068fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fe:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006902:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006906:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006908:	4b0c      	ldr	r3, [pc, #48]	@ (800693c <find_volume+0x504>)
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	3301      	adds	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <find_volume+0x504>)
 8006912:	801a      	strh	r2, [r3, #0]
 8006914:	4b09      	ldr	r3, [pc, #36]	@ (800693c <find_volume+0x504>)
 8006916:	881a      	ldrh	r2, [r3, #0]
 8006918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691e:	4a08      	ldr	r2, [pc, #32]	@ (8006940 <find_volume+0x508>)
 8006920:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006922:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006924:	f7fe f954 	bl	8004bd0 <clear_lock>
#endif
	return FR_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3758      	adds	r7, #88	@ 0x58
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	41615252 	.word	0x41615252
 8006938:	61417272 	.word	0x61417272
 800693c:	20002228 	.word	0x20002228
 8006940:	2000224c 	.word	0x2000224c

08006944 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800694e:	2309      	movs	r3, #9
 8006950:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01c      	beq.n	8006992 <validate+0x4e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d018      	beq.n	8006992 <validate+0x4e>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d013      	beq.n	8006992 <validate+0x4e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	889a      	ldrh	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	88db      	ldrh	r3, [r3, #6]
 8006974:	429a      	cmp	r2, r3
 8006976:	d10c      	bne.n	8006992 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	785b      	ldrb	r3, [r3, #1]
 800697e:	4618      	mov	r0, r3
 8006980:	f7fd fe3e 	bl	8004600 <disk_status>
 8006984:	4603      	mov	r3, r0
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <validate+0x4e>
			res = FR_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d102      	bne.n	800699e <validate+0x5a>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	e000      	b.n	80069a0 <validate+0x5c>
 800699e:	2300      	movs	r3, #0
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	6013      	str	r3, [r2, #0]
	return res;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80069c2:	f107 0310 	add.w	r3, r7, #16
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff fc9c 	bl	8006304 <get_ldnumber>
 80069cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	da01      	bge.n	80069d8 <f_mount+0x28>
 80069d4:	230b      	movs	r3, #11
 80069d6:	e02b      	b.n	8006a30 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80069d8:	4a17      	ldr	r2, [pc, #92]	@ (8006a38 <f_mount+0x88>)
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80069e8:	69b8      	ldr	r0, [r7, #24]
 80069ea:	f7fe f8f1 	bl	8004bd0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	490d      	ldr	r1, [pc, #52]	@ (8006a38 <f_mount+0x88>)
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <f_mount+0x66>
 8006a10:	79fb      	ldrb	r3, [r7, #7]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d001      	beq.n	8006a1a <f_mount+0x6a>
 8006a16:	2300      	movs	r3, #0
 8006a18:	e00a      	b.n	8006a30 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006a1a:	f107 010c 	add.w	r1, r7, #12
 8006a1e:	f107 0308 	add.w	r3, r7, #8
 8006a22:	2200      	movs	r2, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7ff fd07 	bl	8006438 <find_volume>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20002224 	.word	0x20002224

08006a3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b09a      	sub	sp, #104	@ 0x68
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <f_open+0x18>
 8006a50:	2309      	movs	r3, #9
 8006a52:	e1b7      	b.n	8006dc4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006a54:	79fb      	ldrb	r3, [r7, #7]
 8006a56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a5a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006a5c:	79fa      	ldrb	r2, [r7, #7]
 8006a5e:	f107 0114 	add.w	r1, r7, #20
 8006a62:	f107 0308 	add.w	r3, r7, #8
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff fce6 	bl	8006438 <find_volume>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006a72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f040 819b 	bne.w	8006db2 <f_open+0x376>
		dj.obj.fs = fs;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	f107 0318 	add.w	r3, r7, #24
 8006a86:	4611      	mov	r1, r2
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff fbc5 	bl	8006218 <follow_path>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006a94:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d118      	bne.n	8006ace <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006a9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006aa0:	b25b      	sxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	da03      	bge.n	8006aae <f_open+0x72>
				res = FR_INVALID_NAME;
 8006aa6:	2306      	movs	r3, #6
 8006aa8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006aac:	e00f      	b.n	8006ace <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	bf8c      	ite	hi
 8006ab4:	2301      	movhi	r3, #1
 8006ab6:	2300      	movls	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	f107 0318 	add.w	r3, r7, #24
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fd ff3c 	bl	8004940 <chk_lock>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	f003 031c 	and.w	r3, r3, #28
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d07f      	beq.n	8006bd8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006ad8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d017      	beq.n	8006b10 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006ae0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d10e      	bne.n	8006b06 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006ae8:	f7fd ff86 	bl	80049f8 <enq_lock>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d006      	beq.n	8006b00 <f_open+0xc4>
 8006af2:	f107 0318 	add.w	r3, r7, #24
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff f8de 	bl	8005cb8 <dir_register>
 8006afc:	4603      	mov	r3, r0
 8006afe:	e000      	b.n	8006b02 <f_open+0xc6>
 8006b00:	2312      	movs	r3, #18
 8006b02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	f043 0308 	orr.w	r3, r3, #8
 8006b0c:	71fb      	strb	r3, [r7, #7]
 8006b0e:	e010      	b.n	8006b32 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006b10:	7fbb      	ldrb	r3, [r7, #30]
 8006b12:	f003 0311 	and.w	r3, r3, #17
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <f_open+0xe6>
					res = FR_DENIED;
 8006b1a:	2307      	movs	r3, #7
 8006b1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006b20:	e007      	b.n	8006b32 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <f_open+0xf6>
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006b32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d168      	bne.n	8006c0c <f_open+0x1d0>
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	f003 0308 	and.w	r3, r3, #8
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d063      	beq.n	8006c0c <f_open+0x1d0>
				dw = GET_FATTIME();
 8006b44:	f7fd fcfe 	bl	8004544 <get_fattime>
 8006b48:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4c:	330e      	adds	r3, #14
 8006b4e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fd fe4b 	bl	80047ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b58:	3316      	adds	r3, #22
 8006b5a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fd fe45 	bl	80047ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b64:	330b      	adds	r3, #11
 8006b66:	2220      	movs	r2, #32
 8006b68:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b6e:	4611      	mov	r1, r2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fe fe1a 	bl	80057aa <ld_clust>
 8006b76:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fe32 	bl	80057e8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b86:	331c      	adds	r3, #28
 8006b88:	2100      	movs	r1, #0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fd fe2e 	bl	80047ec <st_dword>
					fs->wflag = 1;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2201      	movs	r2, #1
 8006b94:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d037      	beq.n	8006c0c <f_open+0x1d0>
						dw = fs->winsect;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006ba2:	f107 0318 	add.w	r3, r7, #24
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fe fb22 	bl	80051f4 <remove_chain>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006bb6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d126      	bne.n	8006c0c <f_open+0x1d0>
							res = move_window(fs, dw);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe f86c 	bl	8004ca0 <move_window>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006bd2:	3a01      	subs	r2, #1
 8006bd4:	615a      	str	r2, [r3, #20]
 8006bd6:	e019      	b.n	8006c0c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006bd8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d115      	bne.n	8006c0c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006be0:	7fbb      	ldrb	r3, [r7, #30]
 8006be2:	f003 0310 	and.w	r3, r3, #16
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8006bea:	2304      	movs	r3, #4
 8006bec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006bf0:	e00c      	b.n	8006c0c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <f_open+0x1d0>
 8006bfc:	7fbb      	ldrb	r3, [r7, #30]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <f_open+0x1d0>
						res = FR_DENIED;
 8006c06:	2307      	movs	r3, #7
 8006c08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006c0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d126      	bne.n	8006c62 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c24:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006c2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	bf8c      	ite	hi
 8006c3a:	2301      	movhi	r3, #1
 8006c3c:	2300      	movls	r3, #0
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	f107 0318 	add.w	r3, r7, #24
 8006c46:	4611      	mov	r1, r2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fd fef7 	bl	8004a3c <inc_lock>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <f_open+0x226>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006c62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f040 80a3 	bne.w	8006db2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c70:	4611      	mov	r1, r2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fd99 	bl	80057aa <ld_clust>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	331c      	adds	r3, #28
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fd fd74 	bl	8004770 <ld_dword>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	88da      	ldrh	r2, [r3, #6]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	79fa      	ldrb	r2, [r7, #7]
 8006ca6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3330      	adds	r3, #48	@ 0x30
 8006cbe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fd fdde 	bl	8004886 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d06e      	beq.n	8006db2 <f_open+0x376>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d06a      	beq.n	8006db2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	895b      	ldrh	r3, [r3, #10]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	899b      	ldrh	r3, [r3, #12]
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d00:	e016      	b.n	8006d30 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe f887 	bl	8004e1a <get_fat>
 8006d0c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d802      	bhi.n	8006d1a <f_open+0x2de>
 8006d14:	2302      	movs	r3, #2
 8006d16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d20:	d102      	bne.n	8006d28 <f_open+0x2ec>
 8006d22:	2301      	movs	r3, #1
 8006d24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006d28:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d103      	bne.n	8006d40 <f_open+0x304>
 8006d38:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d8e0      	bhi.n	8006d02 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d44:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006d46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d131      	bne.n	8006db2 <f_open+0x376>
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	899b      	ldrh	r3, [r3, #12]
 8006d52:	461a      	mov	r2, r3
 8006d54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d56:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d5a:	fb01 f202 	mul.w	r2, r1, r2
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d026      	beq.n	8006db2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe f837 	bl	8004ddc <clust2sect>
 8006d6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d103      	bne.n	8006d7e <f_open+0x342>
						res = FR_INT_ERR;
 8006d76:	2302      	movs	r3, #2
 8006d78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006d7c:	e019      	b.n	8006db2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	899b      	ldrh	r3, [r3, #12]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d86:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d8c:	441a      	add	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	7858      	ldrb	r0, [r3, #1]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a1a      	ldr	r2, [r3, #32]
 8006da0:	2301      	movs	r3, #1
 8006da2:	f7fd fc6f 	bl	8004684 <disk_read>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <f_open+0x376>
 8006dac:	2301      	movs	r3, #1
 8006dae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006db2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <f_open+0x384>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006dc0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3768      	adds	r7, #104	@ 0x68
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08e      	sub	sp, #56	@ 0x38
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f107 0214 	add.w	r2, r7, #20
 8006dea:	4611      	mov	r1, r2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fda9 	bl	8006944 <validate>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006df8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d107      	bne.n	8006e10 <f_read+0x44>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	7d5b      	ldrb	r3, [r3, #21]
 8006e04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006e08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <f_read+0x4a>
 8006e10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e14:	e135      	b.n	8007082 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	7d1b      	ldrb	r3, [r3, #20]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <f_read+0x5a>
 8006e22:	2307      	movs	r3, #7
 8006e24:	e12d      	b.n	8007082 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	f240 811e 	bls.w	8007078 <f_read+0x2ac>
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006e40:	e11a      	b.n	8007078 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	8992      	ldrh	r2, [r2, #12]
 8006e4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e4e:	fb01 f202 	mul.w	r2, r1, r2
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 80d5 	bne.w	8007004 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	8992      	ldrh	r2, [r2, #12]
 8006e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	8952      	ldrh	r2, [r2, #10]
 8006e6a:	3a01      	subs	r2, #1
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d12f      	bne.n	8006ed6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d103      	bne.n	8006e86 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e84:	e013      	b.n	8006eae <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	4619      	mov	r1, r3
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7fe faaa 	bl	80053ee <clmt_clust>
 8006e9a:	6338      	str	r0, [r7, #48]	@ 0x30
 8006e9c:	e007      	b.n	8006eae <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	f7fd ffb7 	bl	8004e1a <get_fat>
 8006eac:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d804      	bhi.n	8006ebe <f_read+0xf2>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	755a      	strb	r2, [r3, #21]
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e0e1      	b.n	8007082 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d104      	bne.n	8006ed0 <f_read+0x104>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	755a      	strb	r2, [r3, #21]
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e0d8      	b.n	8007082 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ed4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	4619      	mov	r1, r3
 8006ede:	4610      	mov	r0, r2
 8006ee0:	f7fd ff7c 	bl	8004ddc <clust2sect>
 8006ee4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <f_read+0x12a>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	755a      	strb	r2, [r3, #21]
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e0c5      	b.n	8007082 <f_read+0x2b6>
			sect += csect;
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	899b      	ldrh	r3, [r3, #12]
 8006f02:	461a      	mov	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d041      	beq.n	8006f96 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	4413      	add	r3, r2
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	8952      	ldrh	r2, [r2, #10]
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d905      	bls.n	8006f2c <f_read+0x160>
					cc = fs->csize - csect;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	895b      	ldrh	r3, [r3, #10]
 8006f24:	461a      	mov	r2, r3
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	7858      	ldrb	r0, [r3, #1]
 8006f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f36:	f7fd fba5 	bl	8004684 <disk_read>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <f_read+0x17e>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	755a      	strb	r2, [r3, #21]
 8006f46:	2301      	movs	r3, #1
 8006f48:	e09b      	b.n	8007082 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	7d1b      	ldrb	r3, [r3, #20]
 8006f4e:	b25b      	sxtb	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da18      	bge.n	8006f86 <f_read+0x1ba>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a1a      	ldr	r2, [r3, #32]
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d911      	bls.n	8006f86 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a1a      	ldr	r2, [r3, #32]
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	8992      	ldrh	r2, [r2, #12]
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f74:	18d0      	adds	r0, r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	899b      	ldrh	r3, [r3, #12]
 8006f80:	461a      	mov	r2, r3
 8006f82:	f7fd fc5f 	bl	8004844 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	899b      	ldrh	r3, [r3, #12]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8e:	fb02 f303 	mul.w	r3, r2, r3
 8006f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006f94:	e05c      	b.n	8007050 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d02e      	beq.n	8006ffe <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	7d1b      	ldrb	r3, [r3, #20]
 8006fa4:	b25b      	sxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da18      	bge.n	8006fdc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	7858      	ldrb	r0, [r3, #1]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a1a      	ldr	r2, [r3, #32]
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f7fd fb83 	bl	80046c4 <disk_write>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d004      	beq.n	8006fce <f_read+0x202>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	755a      	strb	r2, [r3, #21]
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e059      	b.n	8007082 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	7d1b      	ldrb	r3, [r3, #20]
 8006fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	7858      	ldrb	r0, [r3, #1]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	f7fd fb4b 	bl	8004684 <disk_read>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d004      	beq.n	8006ffe <f_read+0x232>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	755a      	strb	r2, [r3, #21]
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e041      	b.n	8007082 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	899b      	ldrh	r3, [r3, #12]
 8007008:	4618      	mov	r0, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	8992      	ldrh	r2, [r2, #12]
 8007012:	fbb3 f1f2 	udiv	r1, r3, r2
 8007016:	fb01 f202 	mul.w	r2, r1, r2
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	1ac3      	subs	r3, r0, r3
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	429a      	cmp	r2, r3
 8007026:	d901      	bls.n	800702c <f_read+0x260>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	8992      	ldrh	r2, [r2, #12]
 800703a:	fbb3 f0f2 	udiv	r0, r3, r2
 800703e:	fb00 f202 	mul.w	r2, r0, r2
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	440b      	add	r3, r1
 8007046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007048:	4619      	mov	r1, r3
 800704a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800704c:	f7fd fbfa 	bl	8004844 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007054:	4413      	add	r3, r2
 8007056:	627b      	str	r3, [r7, #36]	@ 0x24
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	699a      	ldr	r2, [r3, #24]
 800705c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705e:	441a      	add	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	619a      	str	r2, [r3, #24]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706a:	441a      	add	r2, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f47f aee1 	bne.w	8006e42 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3738      	adds	r7, #56	@ 0x38
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b086      	sub	sp, #24
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f107 0208 	add.w	r2, r7, #8
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fc52 	bl	8006944 <validate>
 80070a0:	4603      	mov	r3, r0
 80070a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d168      	bne.n	800717c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7d1b      	ldrb	r3, [r3, #20]
 80070ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d062      	beq.n	800717c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	7d1b      	ldrb	r3, [r3, #20]
 80070ba:	b25b      	sxtb	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	da15      	bge.n	80070ec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	7858      	ldrb	r0, [r3, #1]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1a      	ldr	r2, [r3, #32]
 80070ce:	2301      	movs	r3, #1
 80070d0:	f7fd faf8 	bl	80046c4 <disk_write>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <f_sync+0x54>
 80070da:	2301      	movs	r3, #1
 80070dc:	e04f      	b.n	800717e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	7d1b      	ldrb	r3, [r3, #20]
 80070e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80070ec:	f7fd fa2a 	bl	8004544 <get_fattime>
 80070f0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	4619      	mov	r1, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	f7fd fdd0 	bl	8004ca0 <move_window>
 8007100:	4603      	mov	r3, r0
 8007102:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d138      	bne.n	800717c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	330b      	adds	r3, #11
 8007114:	781a      	ldrb	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	330b      	adds	r3, #11
 800711a:	f042 0220 	orr.w	r2, r2, #32
 800711e:	b2d2      	uxtb	r2, r2
 8007120:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	461a      	mov	r2, r3
 800712c:	68f9      	ldr	r1, [r7, #12]
 800712e:	f7fe fb5b 	bl	80057e8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f103 021c 	add.w	r2, r3, #28
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	4619      	mov	r1, r3
 800713e:	4610      	mov	r0, r2
 8007140:	f7fd fb54 	bl	80047ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3316      	adds	r3, #22
 8007148:	6939      	ldr	r1, [r7, #16]
 800714a:	4618      	mov	r0, r3
 800714c:	f7fd fb4e 	bl	80047ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3312      	adds	r3, #18
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f7fd fb2d 	bl	80047b6 <st_word>
					fs->wflag = 1;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2201      	movs	r2, #1
 8007160:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4618      	mov	r0, r3
 8007166:	f7fd fdc9 	bl	8004cfc <sync_fs>
 800716a:	4603      	mov	r3, r0
 800716c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	7d1b      	ldrb	r3, [r3, #20]
 8007172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007176:	b2da      	uxtb	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800717c:	7dfb      	ldrb	r3, [r7, #23]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff ff7b 	bl	800708a <f_sync>
 8007194:	4603      	mov	r3, r0
 8007196:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d118      	bne.n	80071d0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f107 0208 	add.w	r2, r7, #8
 80071a4:	4611      	mov	r1, r2
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fbcc 	bl	8006944 <validate>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10c      	bne.n	80071d0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fd fccc 	bl	8004b58 <dec_lock>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d102      	bne.n	80071d0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b088      	sub	sp, #32
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
	int n = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80071ee:	e01c      	b.n	800722a <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80071f0:	f107 0310 	add.w	r3, r7, #16
 80071f4:	f107 0114 	add.w	r1, r7, #20
 80071f8:	2201      	movs	r2, #1
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff fde6 	bl	8006dcc <f_read>
		if (rc != 1) break;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d117      	bne.n	8007236 <f_gets+0x5c>
		c = s[0];
 8007206:	7d3b      	ldrb	r3, [r7, #20]
 8007208:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800720a:	7dfb      	ldrb	r3, [r7, #23]
 800720c:	2b0d      	cmp	r3, #13
 800720e:	d00b      	beq.n	8007228 <f_gets+0x4e>
		*p++ = c;
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	61ba      	str	r2, [r7, #24]
 8007216:	7dfa      	ldrb	r2, [r7, #23]
 8007218:	701a      	strb	r2, [r3, #0]
		n++;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	3301      	adds	r3, #1
 800721e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	2b0a      	cmp	r3, #10
 8007224:	d009      	beq.n	800723a <f_gets+0x60>
 8007226:	e000      	b.n	800722a <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007228:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	3b01      	subs	r3, #1
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	429a      	cmp	r2, r3
 8007232:	dbdd      	blt.n	80071f0 <f_gets+0x16>
 8007234:	e002      	b.n	800723c <f_gets+0x62>
		if (rc != 1) break;
 8007236:	bf00      	nop
 8007238:	e000      	b.n	800723c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800723a:	bf00      	nop
	}
	*p = 0;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <f_gets+0x72>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	e000      	b.n	800724e <f_gets+0x74>
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800726e:	4b1f      	ldr	r3, [pc, #124]	@ (80072ec <FATFS_LinkDriverEx+0x94>)
 8007270:	7a5b      	ldrb	r3, [r3, #9]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d131      	bne.n	80072dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007278:	4b1c      	ldr	r3, [pc, #112]	@ (80072ec <FATFS_LinkDriverEx+0x94>)
 800727a:	7a5b      	ldrb	r3, [r3, #9]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	461a      	mov	r2, r3
 8007280:	4b1a      	ldr	r3, [pc, #104]	@ (80072ec <FATFS_LinkDriverEx+0x94>)
 8007282:	2100      	movs	r1, #0
 8007284:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007286:	4b19      	ldr	r3, [pc, #100]	@ (80072ec <FATFS_LinkDriverEx+0x94>)
 8007288:	7a5b      	ldrb	r3, [r3, #9]
 800728a:	b2db      	uxtb	r3, r3
 800728c:	4a17      	ldr	r2, [pc, #92]	@ (80072ec <FATFS_LinkDriverEx+0x94>)
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007296:	4b15      	ldr	r3, [pc, #84]	@ (80072ec <FATFS_LinkDriverEx+0x94>)
 8007298:	7a5b      	ldrb	r3, [r3, #9]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	461a      	mov	r2, r3
 800729e:	4b13      	ldr	r3, [pc, #76]	@ (80072ec <FATFS_LinkDriverEx+0x94>)
 80072a0:	4413      	add	r3, r2
 80072a2:	79fa      	ldrb	r2, [r7, #7]
 80072a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80072a6:	4b11      	ldr	r3, [pc, #68]	@ (80072ec <FATFS_LinkDriverEx+0x94>)
 80072a8:	7a5b      	ldrb	r3, [r3, #9]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	b2d1      	uxtb	r1, r2
 80072b0:	4a0e      	ldr	r2, [pc, #56]	@ (80072ec <FATFS_LinkDriverEx+0x94>)
 80072b2:	7251      	strb	r1, [r2, #9]
 80072b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80072b6:	7dbb      	ldrb	r3, [r7, #22]
 80072b8:	3330      	adds	r3, #48	@ 0x30
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	3301      	adds	r3, #1
 80072c4:	223a      	movs	r2, #58	@ 0x3a
 80072c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	3302      	adds	r3, #2
 80072cc:	222f      	movs	r2, #47	@ 0x2f
 80072ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	3303      	adds	r3, #3
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	2000244c 	.word	0x2000244c

080072f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80072fa:	2200      	movs	r2, #0
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff ffaa 	bl	8007258 <FATFS_LinkDriverEx>
 8007304:	4603      	mov	r3, r0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	6039      	str	r1, [r7, #0]
 800731a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800731c:	88fb      	ldrh	r3, [r7, #6]
 800731e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007320:	d802      	bhi.n	8007328 <ff_convert+0x18>
		c = chr;
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	81fb      	strh	r3, [r7, #14]
 8007326:	e025      	b.n	8007374 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	2bff      	cmp	r3, #255	@ 0xff
 8007332:	d805      	bhi.n	8007340 <ff_convert+0x30>
 8007334:	88fb      	ldrh	r3, [r7, #6]
 8007336:	3b80      	subs	r3, #128	@ 0x80
 8007338:	4a12      	ldr	r2, [pc, #72]	@ (8007384 <ff_convert+0x74>)
 800733a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800733e:	e000      	b.n	8007342 <ff_convert+0x32>
 8007340:	2300      	movs	r3, #0
 8007342:	81fb      	strh	r3, [r7, #14]
 8007344:	e016      	b.n	8007374 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007346:	2300      	movs	r3, #0
 8007348:	81fb      	strh	r3, [r7, #14]
 800734a:	e009      	b.n	8007360 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800734c:	89fb      	ldrh	r3, [r7, #14]
 800734e:	4a0d      	ldr	r2, [pc, #52]	@ (8007384 <ff_convert+0x74>)
 8007350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007354:	88fa      	ldrh	r2, [r7, #6]
 8007356:	429a      	cmp	r2, r3
 8007358:	d006      	beq.n	8007368 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800735a:	89fb      	ldrh	r3, [r7, #14]
 800735c:	3301      	adds	r3, #1
 800735e:	81fb      	strh	r3, [r7, #14]
 8007360:	89fb      	ldrh	r3, [r7, #14]
 8007362:	2b7f      	cmp	r3, #127	@ 0x7f
 8007364:	d9f2      	bls.n	800734c <ff_convert+0x3c>
 8007366:	e000      	b.n	800736a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007368:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800736a:	89fb      	ldrh	r3, [r7, #14]
 800736c:	3380      	adds	r3, #128	@ 0x80
 800736e:	b29b      	uxth	r3, r3
 8007370:	b2db      	uxtb	r3, r3
 8007372:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007374:	89fb      	ldrh	r3, [r7, #14]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	0800804c 	.word	0x0800804c

08007388 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007398:	d201      	bcs.n	800739e <ff_wtoupper+0x16>
 800739a:	4b3e      	ldr	r3, [pc, #248]	@ (8007494 <ff_wtoupper+0x10c>)
 800739c:	e000      	b.n	80073a0 <ff_wtoupper+0x18>
 800739e:	4b3e      	ldr	r3, [pc, #248]	@ (8007498 <ff_wtoupper+0x110>)
 80073a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	1c9a      	adds	r2, r3, #2
 80073a6:	617a      	str	r2, [r7, #20]
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80073ac:	8a7b      	ldrh	r3, [r7, #18]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d068      	beq.n	8007484 <ff_wtoupper+0xfc>
 80073b2:	88fa      	ldrh	r2, [r7, #6]
 80073b4:	8a7b      	ldrh	r3, [r7, #18]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d364      	bcc.n	8007484 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	1c9a      	adds	r2, r3, #2
 80073be:	617a      	str	r2, [r7, #20]
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	823b      	strh	r3, [r7, #16]
 80073c4:	8a3b      	ldrh	r3, [r7, #16]
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	81fb      	strh	r3, [r7, #14]
 80073ca:	8a3b      	ldrh	r3, [r7, #16]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80073d0:	88fa      	ldrh	r2, [r7, #6]
 80073d2:	8a79      	ldrh	r1, [r7, #18]
 80073d4:	8a3b      	ldrh	r3, [r7, #16]
 80073d6:	440b      	add	r3, r1
 80073d8:	429a      	cmp	r2, r3
 80073da:	da49      	bge.n	8007470 <ff_wtoupper+0xe8>
			switch (cmd) {
 80073dc:	89fb      	ldrh	r3, [r7, #14]
 80073de:	2b08      	cmp	r3, #8
 80073e0:	d84f      	bhi.n	8007482 <ff_wtoupper+0xfa>
 80073e2:	a201      	add	r2, pc, #4	@ (adr r2, 80073e8 <ff_wtoupper+0x60>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	0800740d 	.word	0x0800740d
 80073ec:	0800741f 	.word	0x0800741f
 80073f0:	08007435 	.word	0x08007435
 80073f4:	0800743d 	.word	0x0800743d
 80073f8:	08007445 	.word	0x08007445
 80073fc:	0800744d 	.word	0x0800744d
 8007400:	08007455 	.word	0x08007455
 8007404:	0800745d 	.word	0x0800745d
 8007408:	08007465 	.word	0x08007465
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800740c:	88fa      	ldrh	r2, [r7, #6]
 800740e:	8a7b      	ldrh	r3, [r7, #18]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4413      	add	r3, r2
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	80fb      	strh	r3, [r7, #6]
 800741c:	e027      	b.n	800746e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800741e:	88fa      	ldrh	r2, [r7, #6]
 8007420:	8a7b      	ldrh	r3, [r7, #18]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	b29b      	uxth	r3, r3
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	b29b      	uxth	r3, r3
 800742c:	88fa      	ldrh	r2, [r7, #6]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	80fb      	strh	r3, [r7, #6]
 8007432:	e01c      	b.n	800746e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	3b10      	subs	r3, #16
 8007438:	80fb      	strh	r3, [r7, #6]
 800743a:	e018      	b.n	800746e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800743c:	88fb      	ldrh	r3, [r7, #6]
 800743e:	3b20      	subs	r3, #32
 8007440:	80fb      	strh	r3, [r7, #6]
 8007442:	e014      	b.n	800746e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	3b30      	subs	r3, #48	@ 0x30
 8007448:	80fb      	strh	r3, [r7, #6]
 800744a:	e010      	b.n	800746e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	3b1a      	subs	r3, #26
 8007450:	80fb      	strh	r3, [r7, #6]
 8007452:	e00c      	b.n	800746e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	3308      	adds	r3, #8
 8007458:	80fb      	strh	r3, [r7, #6]
 800745a:	e008      	b.n	800746e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800745c:	88fb      	ldrh	r3, [r7, #6]
 800745e:	3b50      	subs	r3, #80	@ 0x50
 8007460:	80fb      	strh	r3, [r7, #6]
 8007462:	e004      	b.n	800746e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007464:	88fb      	ldrh	r3, [r7, #6]
 8007466:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800746a:	80fb      	strh	r3, [r7, #6]
 800746c:	bf00      	nop
			}
			break;
 800746e:	e008      	b.n	8007482 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007470:	89fb      	ldrh	r3, [r7, #14]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d195      	bne.n	80073a2 <ff_wtoupper+0x1a>
 8007476:	8a3b      	ldrh	r3, [r7, #16]
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	4413      	add	r3, r2
 800747e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007480:	e78f      	b.n	80073a2 <ff_wtoupper+0x1a>
			break;
 8007482:	bf00      	nop
	}

	return chr;
 8007484:	88fb      	ldrh	r3, [r7, #6]
}
 8007486:	4618      	mov	r0, r3
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	0800814c 	.word	0x0800814c
 8007498:	08008340 	.word	0x08008340

0800749c <siprintf>:
 800749c:	b40e      	push	{r1, r2, r3}
 800749e:	b500      	push	{lr}
 80074a0:	b09c      	sub	sp, #112	@ 0x70
 80074a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80074a4:	9002      	str	r0, [sp, #8]
 80074a6:	9006      	str	r0, [sp, #24]
 80074a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80074ac:	4809      	ldr	r0, [pc, #36]	@ (80074d4 <siprintf+0x38>)
 80074ae:	9107      	str	r1, [sp, #28]
 80074b0:	9104      	str	r1, [sp, #16]
 80074b2:	4909      	ldr	r1, [pc, #36]	@ (80074d8 <siprintf+0x3c>)
 80074b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b8:	9105      	str	r1, [sp, #20]
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	a902      	add	r1, sp, #8
 80074c0:	f000 f994 	bl	80077ec <_svfiprintf_r>
 80074c4:	9b02      	ldr	r3, [sp, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	b01c      	add	sp, #112	@ 0x70
 80074cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074d0:	b003      	add	sp, #12
 80074d2:	4770      	bx	lr
 80074d4:	20000024 	.word	0x20000024
 80074d8:	ffff0208 	.word	0xffff0208

080074dc <memset>:
 80074dc:	4402      	add	r2, r0
 80074de:	4603      	mov	r3, r0
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d100      	bne.n	80074e6 <memset+0xa>
 80074e4:	4770      	bx	lr
 80074e6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ea:	e7f9      	b.n	80074e0 <memset+0x4>

080074ec <__errno>:
 80074ec:	4b01      	ldr	r3, [pc, #4]	@ (80074f4 <__errno+0x8>)
 80074ee:	6818      	ldr	r0, [r3, #0]
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20000024 	.word	0x20000024

080074f8 <__libc_init_array>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4d0d      	ldr	r5, [pc, #52]	@ (8007530 <__libc_init_array+0x38>)
 80074fc:	4c0d      	ldr	r4, [pc, #52]	@ (8007534 <__libc_init_array+0x3c>)
 80074fe:	1b64      	subs	r4, r4, r5
 8007500:	10a4      	asrs	r4, r4, #2
 8007502:	2600      	movs	r6, #0
 8007504:	42a6      	cmp	r6, r4
 8007506:	d109      	bne.n	800751c <__libc_init_array+0x24>
 8007508:	4d0b      	ldr	r5, [pc, #44]	@ (8007538 <__libc_init_array+0x40>)
 800750a:	4c0c      	ldr	r4, [pc, #48]	@ (800753c <__libc_init_array+0x44>)
 800750c:	f000 fc66 	bl	8007ddc <_init>
 8007510:	1b64      	subs	r4, r4, r5
 8007512:	10a4      	asrs	r4, r4, #2
 8007514:	2600      	movs	r6, #0
 8007516:	42a6      	cmp	r6, r4
 8007518:	d105      	bne.n	8007526 <__libc_init_array+0x2e>
 800751a:	bd70      	pop	{r4, r5, r6, pc}
 800751c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007520:	4798      	blx	r3
 8007522:	3601      	adds	r6, #1
 8007524:	e7ee      	b.n	8007504 <__libc_init_array+0xc>
 8007526:	f855 3b04 	ldr.w	r3, [r5], #4
 800752a:	4798      	blx	r3
 800752c:	3601      	adds	r6, #1
 800752e:	e7f2      	b.n	8007516 <__libc_init_array+0x1e>
 8007530:	08008438 	.word	0x08008438
 8007534:	08008438 	.word	0x08008438
 8007538:	08008438 	.word	0x08008438
 800753c:	0800843c 	.word	0x0800843c

08007540 <__retarget_lock_acquire_recursive>:
 8007540:	4770      	bx	lr

08007542 <__retarget_lock_release_recursive>:
 8007542:	4770      	bx	lr

08007544 <_free_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4605      	mov	r5, r0
 8007548:	2900      	cmp	r1, #0
 800754a:	d041      	beq.n	80075d0 <_free_r+0x8c>
 800754c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007550:	1f0c      	subs	r4, r1, #4
 8007552:	2b00      	cmp	r3, #0
 8007554:	bfb8      	it	lt
 8007556:	18e4      	addlt	r4, r4, r3
 8007558:	f000 f8e0 	bl	800771c <__malloc_lock>
 800755c:	4a1d      	ldr	r2, [pc, #116]	@ (80075d4 <_free_r+0x90>)
 800755e:	6813      	ldr	r3, [r2, #0]
 8007560:	b933      	cbnz	r3, 8007570 <_free_r+0x2c>
 8007562:	6063      	str	r3, [r4, #4]
 8007564:	6014      	str	r4, [r2, #0]
 8007566:	4628      	mov	r0, r5
 8007568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800756c:	f000 b8dc 	b.w	8007728 <__malloc_unlock>
 8007570:	42a3      	cmp	r3, r4
 8007572:	d908      	bls.n	8007586 <_free_r+0x42>
 8007574:	6820      	ldr	r0, [r4, #0]
 8007576:	1821      	adds	r1, r4, r0
 8007578:	428b      	cmp	r3, r1
 800757a:	bf01      	itttt	eq
 800757c:	6819      	ldreq	r1, [r3, #0]
 800757e:	685b      	ldreq	r3, [r3, #4]
 8007580:	1809      	addeq	r1, r1, r0
 8007582:	6021      	streq	r1, [r4, #0]
 8007584:	e7ed      	b.n	8007562 <_free_r+0x1e>
 8007586:	461a      	mov	r2, r3
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	b10b      	cbz	r3, 8007590 <_free_r+0x4c>
 800758c:	42a3      	cmp	r3, r4
 800758e:	d9fa      	bls.n	8007586 <_free_r+0x42>
 8007590:	6811      	ldr	r1, [r2, #0]
 8007592:	1850      	adds	r0, r2, r1
 8007594:	42a0      	cmp	r0, r4
 8007596:	d10b      	bne.n	80075b0 <_free_r+0x6c>
 8007598:	6820      	ldr	r0, [r4, #0]
 800759a:	4401      	add	r1, r0
 800759c:	1850      	adds	r0, r2, r1
 800759e:	4283      	cmp	r3, r0
 80075a0:	6011      	str	r1, [r2, #0]
 80075a2:	d1e0      	bne.n	8007566 <_free_r+0x22>
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	6053      	str	r3, [r2, #4]
 80075aa:	4408      	add	r0, r1
 80075ac:	6010      	str	r0, [r2, #0]
 80075ae:	e7da      	b.n	8007566 <_free_r+0x22>
 80075b0:	d902      	bls.n	80075b8 <_free_r+0x74>
 80075b2:	230c      	movs	r3, #12
 80075b4:	602b      	str	r3, [r5, #0]
 80075b6:	e7d6      	b.n	8007566 <_free_r+0x22>
 80075b8:	6820      	ldr	r0, [r4, #0]
 80075ba:	1821      	adds	r1, r4, r0
 80075bc:	428b      	cmp	r3, r1
 80075be:	bf04      	itt	eq
 80075c0:	6819      	ldreq	r1, [r3, #0]
 80075c2:	685b      	ldreq	r3, [r3, #4]
 80075c4:	6063      	str	r3, [r4, #4]
 80075c6:	bf04      	itt	eq
 80075c8:	1809      	addeq	r1, r1, r0
 80075ca:	6021      	streq	r1, [r4, #0]
 80075cc:	6054      	str	r4, [r2, #4]
 80075ce:	e7ca      	b.n	8007566 <_free_r+0x22>
 80075d0:	bd38      	pop	{r3, r4, r5, pc}
 80075d2:	bf00      	nop
 80075d4:	2000259c 	.word	0x2000259c

080075d8 <sbrk_aligned>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	4e0f      	ldr	r6, [pc, #60]	@ (8007618 <sbrk_aligned+0x40>)
 80075dc:	460c      	mov	r4, r1
 80075de:	6831      	ldr	r1, [r6, #0]
 80075e0:	4605      	mov	r5, r0
 80075e2:	b911      	cbnz	r1, 80075ea <sbrk_aligned+0x12>
 80075e4:	f000 fba6 	bl	8007d34 <_sbrk_r>
 80075e8:	6030      	str	r0, [r6, #0]
 80075ea:	4621      	mov	r1, r4
 80075ec:	4628      	mov	r0, r5
 80075ee:	f000 fba1 	bl	8007d34 <_sbrk_r>
 80075f2:	1c43      	adds	r3, r0, #1
 80075f4:	d103      	bne.n	80075fe <sbrk_aligned+0x26>
 80075f6:	f04f 34ff 	mov.w	r4, #4294967295
 80075fa:	4620      	mov	r0, r4
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
 80075fe:	1cc4      	adds	r4, r0, #3
 8007600:	f024 0403 	bic.w	r4, r4, #3
 8007604:	42a0      	cmp	r0, r4
 8007606:	d0f8      	beq.n	80075fa <sbrk_aligned+0x22>
 8007608:	1a21      	subs	r1, r4, r0
 800760a:	4628      	mov	r0, r5
 800760c:	f000 fb92 	bl	8007d34 <_sbrk_r>
 8007610:	3001      	adds	r0, #1
 8007612:	d1f2      	bne.n	80075fa <sbrk_aligned+0x22>
 8007614:	e7ef      	b.n	80075f6 <sbrk_aligned+0x1e>
 8007616:	bf00      	nop
 8007618:	20002598 	.word	0x20002598

0800761c <_malloc_r>:
 800761c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007620:	1ccd      	adds	r5, r1, #3
 8007622:	f025 0503 	bic.w	r5, r5, #3
 8007626:	3508      	adds	r5, #8
 8007628:	2d0c      	cmp	r5, #12
 800762a:	bf38      	it	cc
 800762c:	250c      	movcc	r5, #12
 800762e:	2d00      	cmp	r5, #0
 8007630:	4606      	mov	r6, r0
 8007632:	db01      	blt.n	8007638 <_malloc_r+0x1c>
 8007634:	42a9      	cmp	r1, r5
 8007636:	d904      	bls.n	8007642 <_malloc_r+0x26>
 8007638:	230c      	movs	r3, #12
 800763a:	6033      	str	r3, [r6, #0]
 800763c:	2000      	movs	r0, #0
 800763e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007642:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007718 <_malloc_r+0xfc>
 8007646:	f000 f869 	bl	800771c <__malloc_lock>
 800764a:	f8d8 3000 	ldr.w	r3, [r8]
 800764e:	461c      	mov	r4, r3
 8007650:	bb44      	cbnz	r4, 80076a4 <_malloc_r+0x88>
 8007652:	4629      	mov	r1, r5
 8007654:	4630      	mov	r0, r6
 8007656:	f7ff ffbf 	bl	80075d8 <sbrk_aligned>
 800765a:	1c43      	adds	r3, r0, #1
 800765c:	4604      	mov	r4, r0
 800765e:	d158      	bne.n	8007712 <_malloc_r+0xf6>
 8007660:	f8d8 4000 	ldr.w	r4, [r8]
 8007664:	4627      	mov	r7, r4
 8007666:	2f00      	cmp	r7, #0
 8007668:	d143      	bne.n	80076f2 <_malloc_r+0xd6>
 800766a:	2c00      	cmp	r4, #0
 800766c:	d04b      	beq.n	8007706 <_malloc_r+0xea>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	4639      	mov	r1, r7
 8007672:	4630      	mov	r0, r6
 8007674:	eb04 0903 	add.w	r9, r4, r3
 8007678:	f000 fb5c 	bl	8007d34 <_sbrk_r>
 800767c:	4581      	cmp	r9, r0
 800767e:	d142      	bne.n	8007706 <_malloc_r+0xea>
 8007680:	6821      	ldr	r1, [r4, #0]
 8007682:	1a6d      	subs	r5, r5, r1
 8007684:	4629      	mov	r1, r5
 8007686:	4630      	mov	r0, r6
 8007688:	f7ff ffa6 	bl	80075d8 <sbrk_aligned>
 800768c:	3001      	adds	r0, #1
 800768e:	d03a      	beq.n	8007706 <_malloc_r+0xea>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	442b      	add	r3, r5
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	f8d8 3000 	ldr.w	r3, [r8]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	bb62      	cbnz	r2, 80076f8 <_malloc_r+0xdc>
 800769e:	f8c8 7000 	str.w	r7, [r8]
 80076a2:	e00f      	b.n	80076c4 <_malloc_r+0xa8>
 80076a4:	6822      	ldr	r2, [r4, #0]
 80076a6:	1b52      	subs	r2, r2, r5
 80076a8:	d420      	bmi.n	80076ec <_malloc_r+0xd0>
 80076aa:	2a0b      	cmp	r2, #11
 80076ac:	d917      	bls.n	80076de <_malloc_r+0xc2>
 80076ae:	1961      	adds	r1, r4, r5
 80076b0:	42a3      	cmp	r3, r4
 80076b2:	6025      	str	r5, [r4, #0]
 80076b4:	bf18      	it	ne
 80076b6:	6059      	strne	r1, [r3, #4]
 80076b8:	6863      	ldr	r3, [r4, #4]
 80076ba:	bf08      	it	eq
 80076bc:	f8c8 1000 	streq.w	r1, [r8]
 80076c0:	5162      	str	r2, [r4, r5]
 80076c2:	604b      	str	r3, [r1, #4]
 80076c4:	4630      	mov	r0, r6
 80076c6:	f000 f82f 	bl	8007728 <__malloc_unlock>
 80076ca:	f104 000b 	add.w	r0, r4, #11
 80076ce:	1d23      	adds	r3, r4, #4
 80076d0:	f020 0007 	bic.w	r0, r0, #7
 80076d4:	1ac2      	subs	r2, r0, r3
 80076d6:	bf1c      	itt	ne
 80076d8:	1a1b      	subne	r3, r3, r0
 80076da:	50a3      	strne	r3, [r4, r2]
 80076dc:	e7af      	b.n	800763e <_malloc_r+0x22>
 80076de:	6862      	ldr	r2, [r4, #4]
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	bf0c      	ite	eq
 80076e4:	f8c8 2000 	streq.w	r2, [r8]
 80076e8:	605a      	strne	r2, [r3, #4]
 80076ea:	e7eb      	b.n	80076c4 <_malloc_r+0xa8>
 80076ec:	4623      	mov	r3, r4
 80076ee:	6864      	ldr	r4, [r4, #4]
 80076f0:	e7ae      	b.n	8007650 <_malloc_r+0x34>
 80076f2:	463c      	mov	r4, r7
 80076f4:	687f      	ldr	r7, [r7, #4]
 80076f6:	e7b6      	b.n	8007666 <_malloc_r+0x4a>
 80076f8:	461a      	mov	r2, r3
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d1fb      	bne.n	80076f8 <_malloc_r+0xdc>
 8007700:	2300      	movs	r3, #0
 8007702:	6053      	str	r3, [r2, #4]
 8007704:	e7de      	b.n	80076c4 <_malloc_r+0xa8>
 8007706:	230c      	movs	r3, #12
 8007708:	6033      	str	r3, [r6, #0]
 800770a:	4630      	mov	r0, r6
 800770c:	f000 f80c 	bl	8007728 <__malloc_unlock>
 8007710:	e794      	b.n	800763c <_malloc_r+0x20>
 8007712:	6005      	str	r5, [r0, #0]
 8007714:	e7d6      	b.n	80076c4 <_malloc_r+0xa8>
 8007716:	bf00      	nop
 8007718:	2000259c 	.word	0x2000259c

0800771c <__malloc_lock>:
 800771c:	4801      	ldr	r0, [pc, #4]	@ (8007724 <__malloc_lock+0x8>)
 800771e:	f7ff bf0f 	b.w	8007540 <__retarget_lock_acquire_recursive>
 8007722:	bf00      	nop
 8007724:	20002594 	.word	0x20002594

08007728 <__malloc_unlock>:
 8007728:	4801      	ldr	r0, [pc, #4]	@ (8007730 <__malloc_unlock+0x8>)
 800772a:	f7ff bf0a 	b.w	8007542 <__retarget_lock_release_recursive>
 800772e:	bf00      	nop
 8007730:	20002594 	.word	0x20002594

08007734 <__ssputs_r>:
 8007734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007738:	688e      	ldr	r6, [r1, #8]
 800773a:	461f      	mov	r7, r3
 800773c:	42be      	cmp	r6, r7
 800773e:	680b      	ldr	r3, [r1, #0]
 8007740:	4682      	mov	sl, r0
 8007742:	460c      	mov	r4, r1
 8007744:	4690      	mov	r8, r2
 8007746:	d82d      	bhi.n	80077a4 <__ssputs_r+0x70>
 8007748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800774c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007750:	d026      	beq.n	80077a0 <__ssputs_r+0x6c>
 8007752:	6965      	ldr	r5, [r4, #20]
 8007754:	6909      	ldr	r1, [r1, #16]
 8007756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800775a:	eba3 0901 	sub.w	r9, r3, r1
 800775e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007762:	1c7b      	adds	r3, r7, #1
 8007764:	444b      	add	r3, r9
 8007766:	106d      	asrs	r5, r5, #1
 8007768:	429d      	cmp	r5, r3
 800776a:	bf38      	it	cc
 800776c:	461d      	movcc	r5, r3
 800776e:	0553      	lsls	r3, r2, #21
 8007770:	d527      	bpl.n	80077c2 <__ssputs_r+0x8e>
 8007772:	4629      	mov	r1, r5
 8007774:	f7ff ff52 	bl	800761c <_malloc_r>
 8007778:	4606      	mov	r6, r0
 800777a:	b360      	cbz	r0, 80077d6 <__ssputs_r+0xa2>
 800777c:	6921      	ldr	r1, [r4, #16]
 800777e:	464a      	mov	r2, r9
 8007780:	f000 fae8 	bl	8007d54 <memcpy>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800778a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	6126      	str	r6, [r4, #16]
 8007792:	6165      	str	r5, [r4, #20]
 8007794:	444e      	add	r6, r9
 8007796:	eba5 0509 	sub.w	r5, r5, r9
 800779a:	6026      	str	r6, [r4, #0]
 800779c:	60a5      	str	r5, [r4, #8]
 800779e:	463e      	mov	r6, r7
 80077a0:	42be      	cmp	r6, r7
 80077a2:	d900      	bls.n	80077a6 <__ssputs_r+0x72>
 80077a4:	463e      	mov	r6, r7
 80077a6:	6820      	ldr	r0, [r4, #0]
 80077a8:	4632      	mov	r2, r6
 80077aa:	4641      	mov	r1, r8
 80077ac:	f000 faa8 	bl	8007d00 <memmove>
 80077b0:	68a3      	ldr	r3, [r4, #8]
 80077b2:	1b9b      	subs	r3, r3, r6
 80077b4:	60a3      	str	r3, [r4, #8]
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	4433      	add	r3, r6
 80077ba:	6023      	str	r3, [r4, #0]
 80077bc:	2000      	movs	r0, #0
 80077be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c2:	462a      	mov	r2, r5
 80077c4:	f000 fad4 	bl	8007d70 <_realloc_r>
 80077c8:	4606      	mov	r6, r0
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d1e0      	bne.n	8007790 <__ssputs_r+0x5c>
 80077ce:	6921      	ldr	r1, [r4, #16]
 80077d0:	4650      	mov	r0, sl
 80077d2:	f7ff feb7 	bl	8007544 <_free_r>
 80077d6:	230c      	movs	r3, #12
 80077d8:	f8ca 3000 	str.w	r3, [sl]
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077e2:	81a3      	strh	r3, [r4, #12]
 80077e4:	f04f 30ff 	mov.w	r0, #4294967295
 80077e8:	e7e9      	b.n	80077be <__ssputs_r+0x8a>
	...

080077ec <_svfiprintf_r>:
 80077ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f0:	4698      	mov	r8, r3
 80077f2:	898b      	ldrh	r3, [r1, #12]
 80077f4:	061b      	lsls	r3, r3, #24
 80077f6:	b09d      	sub	sp, #116	@ 0x74
 80077f8:	4607      	mov	r7, r0
 80077fa:	460d      	mov	r5, r1
 80077fc:	4614      	mov	r4, r2
 80077fe:	d510      	bpl.n	8007822 <_svfiprintf_r+0x36>
 8007800:	690b      	ldr	r3, [r1, #16]
 8007802:	b973      	cbnz	r3, 8007822 <_svfiprintf_r+0x36>
 8007804:	2140      	movs	r1, #64	@ 0x40
 8007806:	f7ff ff09 	bl	800761c <_malloc_r>
 800780a:	6028      	str	r0, [r5, #0]
 800780c:	6128      	str	r0, [r5, #16]
 800780e:	b930      	cbnz	r0, 800781e <_svfiprintf_r+0x32>
 8007810:	230c      	movs	r3, #12
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	f04f 30ff 	mov.w	r0, #4294967295
 8007818:	b01d      	add	sp, #116	@ 0x74
 800781a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781e:	2340      	movs	r3, #64	@ 0x40
 8007820:	616b      	str	r3, [r5, #20]
 8007822:	2300      	movs	r3, #0
 8007824:	9309      	str	r3, [sp, #36]	@ 0x24
 8007826:	2320      	movs	r3, #32
 8007828:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800782c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007830:	2330      	movs	r3, #48	@ 0x30
 8007832:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80079d0 <_svfiprintf_r+0x1e4>
 8007836:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800783a:	f04f 0901 	mov.w	r9, #1
 800783e:	4623      	mov	r3, r4
 8007840:	469a      	mov	sl, r3
 8007842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007846:	b10a      	cbz	r2, 800784c <_svfiprintf_r+0x60>
 8007848:	2a25      	cmp	r2, #37	@ 0x25
 800784a:	d1f9      	bne.n	8007840 <_svfiprintf_r+0x54>
 800784c:	ebba 0b04 	subs.w	fp, sl, r4
 8007850:	d00b      	beq.n	800786a <_svfiprintf_r+0x7e>
 8007852:	465b      	mov	r3, fp
 8007854:	4622      	mov	r2, r4
 8007856:	4629      	mov	r1, r5
 8007858:	4638      	mov	r0, r7
 800785a:	f7ff ff6b 	bl	8007734 <__ssputs_r>
 800785e:	3001      	adds	r0, #1
 8007860:	f000 80a7 	beq.w	80079b2 <_svfiprintf_r+0x1c6>
 8007864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007866:	445a      	add	r2, fp
 8007868:	9209      	str	r2, [sp, #36]	@ 0x24
 800786a:	f89a 3000 	ldrb.w	r3, [sl]
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 809f 	beq.w	80079b2 <_svfiprintf_r+0x1c6>
 8007874:	2300      	movs	r3, #0
 8007876:	f04f 32ff 	mov.w	r2, #4294967295
 800787a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800787e:	f10a 0a01 	add.w	sl, sl, #1
 8007882:	9304      	str	r3, [sp, #16]
 8007884:	9307      	str	r3, [sp, #28]
 8007886:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800788a:	931a      	str	r3, [sp, #104]	@ 0x68
 800788c:	4654      	mov	r4, sl
 800788e:	2205      	movs	r2, #5
 8007890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007894:	484e      	ldr	r0, [pc, #312]	@ (80079d0 <_svfiprintf_r+0x1e4>)
 8007896:	f7f8 fcc3 	bl	8000220 <memchr>
 800789a:	9a04      	ldr	r2, [sp, #16]
 800789c:	b9d8      	cbnz	r0, 80078d6 <_svfiprintf_r+0xea>
 800789e:	06d0      	lsls	r0, r2, #27
 80078a0:	bf44      	itt	mi
 80078a2:	2320      	movmi	r3, #32
 80078a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078a8:	0711      	lsls	r1, r2, #28
 80078aa:	bf44      	itt	mi
 80078ac:	232b      	movmi	r3, #43	@ 0x2b
 80078ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078b2:	f89a 3000 	ldrb.w	r3, [sl]
 80078b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80078b8:	d015      	beq.n	80078e6 <_svfiprintf_r+0xfa>
 80078ba:	9a07      	ldr	r2, [sp, #28]
 80078bc:	4654      	mov	r4, sl
 80078be:	2000      	movs	r0, #0
 80078c0:	f04f 0c0a 	mov.w	ip, #10
 80078c4:	4621      	mov	r1, r4
 80078c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078ca:	3b30      	subs	r3, #48	@ 0x30
 80078cc:	2b09      	cmp	r3, #9
 80078ce:	d94b      	bls.n	8007968 <_svfiprintf_r+0x17c>
 80078d0:	b1b0      	cbz	r0, 8007900 <_svfiprintf_r+0x114>
 80078d2:	9207      	str	r2, [sp, #28]
 80078d4:	e014      	b.n	8007900 <_svfiprintf_r+0x114>
 80078d6:	eba0 0308 	sub.w	r3, r0, r8
 80078da:	fa09 f303 	lsl.w	r3, r9, r3
 80078de:	4313      	orrs	r3, r2
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	46a2      	mov	sl, r4
 80078e4:	e7d2      	b.n	800788c <_svfiprintf_r+0xa0>
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	1d19      	adds	r1, r3, #4
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	9103      	str	r1, [sp, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bfbb      	ittet	lt
 80078f2:	425b      	neglt	r3, r3
 80078f4:	f042 0202 	orrlt.w	r2, r2, #2
 80078f8:	9307      	strge	r3, [sp, #28]
 80078fa:	9307      	strlt	r3, [sp, #28]
 80078fc:	bfb8      	it	lt
 80078fe:	9204      	strlt	r2, [sp, #16]
 8007900:	7823      	ldrb	r3, [r4, #0]
 8007902:	2b2e      	cmp	r3, #46	@ 0x2e
 8007904:	d10a      	bne.n	800791c <_svfiprintf_r+0x130>
 8007906:	7863      	ldrb	r3, [r4, #1]
 8007908:	2b2a      	cmp	r3, #42	@ 0x2a
 800790a:	d132      	bne.n	8007972 <_svfiprintf_r+0x186>
 800790c:	9b03      	ldr	r3, [sp, #12]
 800790e:	1d1a      	adds	r2, r3, #4
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	9203      	str	r2, [sp, #12]
 8007914:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007918:	3402      	adds	r4, #2
 800791a:	9305      	str	r3, [sp, #20]
 800791c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80079e0 <_svfiprintf_r+0x1f4>
 8007920:	7821      	ldrb	r1, [r4, #0]
 8007922:	2203      	movs	r2, #3
 8007924:	4650      	mov	r0, sl
 8007926:	f7f8 fc7b 	bl	8000220 <memchr>
 800792a:	b138      	cbz	r0, 800793c <_svfiprintf_r+0x150>
 800792c:	9b04      	ldr	r3, [sp, #16]
 800792e:	eba0 000a 	sub.w	r0, r0, sl
 8007932:	2240      	movs	r2, #64	@ 0x40
 8007934:	4082      	lsls	r2, r0
 8007936:	4313      	orrs	r3, r2
 8007938:	3401      	adds	r4, #1
 800793a:	9304      	str	r3, [sp, #16]
 800793c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007940:	4824      	ldr	r0, [pc, #144]	@ (80079d4 <_svfiprintf_r+0x1e8>)
 8007942:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007946:	2206      	movs	r2, #6
 8007948:	f7f8 fc6a 	bl	8000220 <memchr>
 800794c:	2800      	cmp	r0, #0
 800794e:	d036      	beq.n	80079be <_svfiprintf_r+0x1d2>
 8007950:	4b21      	ldr	r3, [pc, #132]	@ (80079d8 <_svfiprintf_r+0x1ec>)
 8007952:	bb1b      	cbnz	r3, 800799c <_svfiprintf_r+0x1b0>
 8007954:	9b03      	ldr	r3, [sp, #12]
 8007956:	3307      	adds	r3, #7
 8007958:	f023 0307 	bic.w	r3, r3, #7
 800795c:	3308      	adds	r3, #8
 800795e:	9303      	str	r3, [sp, #12]
 8007960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007962:	4433      	add	r3, r6
 8007964:	9309      	str	r3, [sp, #36]	@ 0x24
 8007966:	e76a      	b.n	800783e <_svfiprintf_r+0x52>
 8007968:	fb0c 3202 	mla	r2, ip, r2, r3
 800796c:	460c      	mov	r4, r1
 800796e:	2001      	movs	r0, #1
 8007970:	e7a8      	b.n	80078c4 <_svfiprintf_r+0xd8>
 8007972:	2300      	movs	r3, #0
 8007974:	3401      	adds	r4, #1
 8007976:	9305      	str	r3, [sp, #20]
 8007978:	4619      	mov	r1, r3
 800797a:	f04f 0c0a 	mov.w	ip, #10
 800797e:	4620      	mov	r0, r4
 8007980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007984:	3a30      	subs	r2, #48	@ 0x30
 8007986:	2a09      	cmp	r2, #9
 8007988:	d903      	bls.n	8007992 <_svfiprintf_r+0x1a6>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0c6      	beq.n	800791c <_svfiprintf_r+0x130>
 800798e:	9105      	str	r1, [sp, #20]
 8007990:	e7c4      	b.n	800791c <_svfiprintf_r+0x130>
 8007992:	fb0c 2101 	mla	r1, ip, r1, r2
 8007996:	4604      	mov	r4, r0
 8007998:	2301      	movs	r3, #1
 800799a:	e7f0      	b.n	800797e <_svfiprintf_r+0x192>
 800799c:	ab03      	add	r3, sp, #12
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	462a      	mov	r2, r5
 80079a2:	4b0e      	ldr	r3, [pc, #56]	@ (80079dc <_svfiprintf_r+0x1f0>)
 80079a4:	a904      	add	r1, sp, #16
 80079a6:	4638      	mov	r0, r7
 80079a8:	f3af 8000 	nop.w
 80079ac:	1c42      	adds	r2, r0, #1
 80079ae:	4606      	mov	r6, r0
 80079b0:	d1d6      	bne.n	8007960 <_svfiprintf_r+0x174>
 80079b2:	89ab      	ldrh	r3, [r5, #12]
 80079b4:	065b      	lsls	r3, r3, #25
 80079b6:	f53f af2d 	bmi.w	8007814 <_svfiprintf_r+0x28>
 80079ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079bc:	e72c      	b.n	8007818 <_svfiprintf_r+0x2c>
 80079be:	ab03      	add	r3, sp, #12
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	462a      	mov	r2, r5
 80079c4:	4b05      	ldr	r3, [pc, #20]	@ (80079dc <_svfiprintf_r+0x1f0>)
 80079c6:	a904      	add	r1, sp, #16
 80079c8:	4638      	mov	r0, r7
 80079ca:	f000 f879 	bl	8007ac0 <_printf_i>
 80079ce:	e7ed      	b.n	80079ac <_svfiprintf_r+0x1c0>
 80079d0:	080083fc 	.word	0x080083fc
 80079d4:	08008406 	.word	0x08008406
 80079d8:	00000000 	.word	0x00000000
 80079dc:	08007735 	.word	0x08007735
 80079e0:	08008402 	.word	0x08008402

080079e4 <_printf_common>:
 80079e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e8:	4616      	mov	r6, r2
 80079ea:	4698      	mov	r8, r3
 80079ec:	688a      	ldr	r2, [r1, #8]
 80079ee:	690b      	ldr	r3, [r1, #16]
 80079f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	bfb8      	it	lt
 80079f8:	4613      	movlt	r3, r2
 80079fa:	6033      	str	r3, [r6, #0]
 80079fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a00:	4607      	mov	r7, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	b10a      	cbz	r2, 8007a0a <_printf_common+0x26>
 8007a06:	3301      	adds	r3, #1
 8007a08:	6033      	str	r3, [r6, #0]
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	0699      	lsls	r1, r3, #26
 8007a0e:	bf42      	ittt	mi
 8007a10:	6833      	ldrmi	r3, [r6, #0]
 8007a12:	3302      	addmi	r3, #2
 8007a14:	6033      	strmi	r3, [r6, #0]
 8007a16:	6825      	ldr	r5, [r4, #0]
 8007a18:	f015 0506 	ands.w	r5, r5, #6
 8007a1c:	d106      	bne.n	8007a2c <_printf_common+0x48>
 8007a1e:	f104 0a19 	add.w	sl, r4, #25
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	6832      	ldr	r2, [r6, #0]
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	42ab      	cmp	r3, r5
 8007a2a:	dc26      	bgt.n	8007a7a <_printf_common+0x96>
 8007a2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a30:	6822      	ldr	r2, [r4, #0]
 8007a32:	3b00      	subs	r3, #0
 8007a34:	bf18      	it	ne
 8007a36:	2301      	movne	r3, #1
 8007a38:	0692      	lsls	r2, r2, #26
 8007a3a:	d42b      	bmi.n	8007a94 <_printf_common+0xb0>
 8007a3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a40:	4641      	mov	r1, r8
 8007a42:	4638      	mov	r0, r7
 8007a44:	47c8      	blx	r9
 8007a46:	3001      	adds	r0, #1
 8007a48:	d01e      	beq.n	8007a88 <_printf_common+0xa4>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	6922      	ldr	r2, [r4, #16]
 8007a4e:	f003 0306 	and.w	r3, r3, #6
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	bf02      	ittt	eq
 8007a56:	68e5      	ldreq	r5, [r4, #12]
 8007a58:	6833      	ldreq	r3, [r6, #0]
 8007a5a:	1aed      	subeq	r5, r5, r3
 8007a5c:	68a3      	ldr	r3, [r4, #8]
 8007a5e:	bf0c      	ite	eq
 8007a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a64:	2500      	movne	r5, #0
 8007a66:	4293      	cmp	r3, r2
 8007a68:	bfc4      	itt	gt
 8007a6a:	1a9b      	subgt	r3, r3, r2
 8007a6c:	18ed      	addgt	r5, r5, r3
 8007a6e:	2600      	movs	r6, #0
 8007a70:	341a      	adds	r4, #26
 8007a72:	42b5      	cmp	r5, r6
 8007a74:	d11a      	bne.n	8007aac <_printf_common+0xc8>
 8007a76:	2000      	movs	r0, #0
 8007a78:	e008      	b.n	8007a8c <_printf_common+0xa8>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	4652      	mov	r2, sl
 8007a7e:	4641      	mov	r1, r8
 8007a80:	4638      	mov	r0, r7
 8007a82:	47c8      	blx	r9
 8007a84:	3001      	adds	r0, #1
 8007a86:	d103      	bne.n	8007a90 <_printf_common+0xac>
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a90:	3501      	adds	r5, #1
 8007a92:	e7c6      	b.n	8007a22 <_printf_common+0x3e>
 8007a94:	18e1      	adds	r1, r4, r3
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	2030      	movs	r0, #48	@ 0x30
 8007a9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a9e:	4422      	add	r2, r4
 8007aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007aa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007aa8:	3302      	adds	r3, #2
 8007aaa:	e7c7      	b.n	8007a3c <_printf_common+0x58>
 8007aac:	2301      	movs	r3, #1
 8007aae:	4622      	mov	r2, r4
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	47c8      	blx	r9
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	d0e6      	beq.n	8007a88 <_printf_common+0xa4>
 8007aba:	3601      	adds	r6, #1
 8007abc:	e7d9      	b.n	8007a72 <_printf_common+0x8e>
	...

08007ac0 <_printf_i>:
 8007ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac4:	7e0f      	ldrb	r7, [r1, #24]
 8007ac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ac8:	2f78      	cmp	r7, #120	@ 0x78
 8007aca:	4691      	mov	r9, r2
 8007acc:	4680      	mov	r8, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	469a      	mov	sl, r3
 8007ad2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ad6:	d807      	bhi.n	8007ae8 <_printf_i+0x28>
 8007ad8:	2f62      	cmp	r7, #98	@ 0x62
 8007ada:	d80a      	bhi.n	8007af2 <_printf_i+0x32>
 8007adc:	2f00      	cmp	r7, #0
 8007ade:	f000 80d2 	beq.w	8007c86 <_printf_i+0x1c6>
 8007ae2:	2f58      	cmp	r7, #88	@ 0x58
 8007ae4:	f000 80b9 	beq.w	8007c5a <_printf_i+0x19a>
 8007ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007aec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007af0:	e03a      	b.n	8007b68 <_printf_i+0xa8>
 8007af2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007af6:	2b15      	cmp	r3, #21
 8007af8:	d8f6      	bhi.n	8007ae8 <_printf_i+0x28>
 8007afa:	a101      	add	r1, pc, #4	@ (adr r1, 8007b00 <_printf_i+0x40>)
 8007afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b00:	08007b59 	.word	0x08007b59
 8007b04:	08007b6d 	.word	0x08007b6d
 8007b08:	08007ae9 	.word	0x08007ae9
 8007b0c:	08007ae9 	.word	0x08007ae9
 8007b10:	08007ae9 	.word	0x08007ae9
 8007b14:	08007ae9 	.word	0x08007ae9
 8007b18:	08007b6d 	.word	0x08007b6d
 8007b1c:	08007ae9 	.word	0x08007ae9
 8007b20:	08007ae9 	.word	0x08007ae9
 8007b24:	08007ae9 	.word	0x08007ae9
 8007b28:	08007ae9 	.word	0x08007ae9
 8007b2c:	08007c6d 	.word	0x08007c6d
 8007b30:	08007b97 	.word	0x08007b97
 8007b34:	08007c27 	.word	0x08007c27
 8007b38:	08007ae9 	.word	0x08007ae9
 8007b3c:	08007ae9 	.word	0x08007ae9
 8007b40:	08007c8f 	.word	0x08007c8f
 8007b44:	08007ae9 	.word	0x08007ae9
 8007b48:	08007b97 	.word	0x08007b97
 8007b4c:	08007ae9 	.word	0x08007ae9
 8007b50:	08007ae9 	.word	0x08007ae9
 8007b54:	08007c2f 	.word	0x08007c2f
 8007b58:	6833      	ldr	r3, [r6, #0]
 8007b5a:	1d1a      	adds	r2, r3, #4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6032      	str	r2, [r6, #0]
 8007b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e09d      	b.n	8007ca8 <_printf_i+0x1e8>
 8007b6c:	6833      	ldr	r3, [r6, #0]
 8007b6e:	6820      	ldr	r0, [r4, #0]
 8007b70:	1d19      	adds	r1, r3, #4
 8007b72:	6031      	str	r1, [r6, #0]
 8007b74:	0606      	lsls	r6, r0, #24
 8007b76:	d501      	bpl.n	8007b7c <_printf_i+0xbc>
 8007b78:	681d      	ldr	r5, [r3, #0]
 8007b7a:	e003      	b.n	8007b84 <_printf_i+0xc4>
 8007b7c:	0645      	lsls	r5, r0, #25
 8007b7e:	d5fb      	bpl.n	8007b78 <_printf_i+0xb8>
 8007b80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b84:	2d00      	cmp	r5, #0
 8007b86:	da03      	bge.n	8007b90 <_printf_i+0xd0>
 8007b88:	232d      	movs	r3, #45	@ 0x2d
 8007b8a:	426d      	negs	r5, r5
 8007b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b90:	4859      	ldr	r0, [pc, #356]	@ (8007cf8 <_printf_i+0x238>)
 8007b92:	230a      	movs	r3, #10
 8007b94:	e011      	b.n	8007bba <_printf_i+0xfa>
 8007b96:	6821      	ldr	r1, [r4, #0]
 8007b98:	6833      	ldr	r3, [r6, #0]
 8007b9a:	0608      	lsls	r0, r1, #24
 8007b9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ba0:	d402      	bmi.n	8007ba8 <_printf_i+0xe8>
 8007ba2:	0649      	lsls	r1, r1, #25
 8007ba4:	bf48      	it	mi
 8007ba6:	b2ad      	uxthmi	r5, r5
 8007ba8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007baa:	4853      	ldr	r0, [pc, #332]	@ (8007cf8 <_printf_i+0x238>)
 8007bac:	6033      	str	r3, [r6, #0]
 8007bae:	bf14      	ite	ne
 8007bb0:	230a      	movne	r3, #10
 8007bb2:	2308      	moveq	r3, #8
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bba:	6866      	ldr	r6, [r4, #4]
 8007bbc:	60a6      	str	r6, [r4, #8]
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	bfa2      	ittt	ge
 8007bc2:	6821      	ldrge	r1, [r4, #0]
 8007bc4:	f021 0104 	bicge.w	r1, r1, #4
 8007bc8:	6021      	strge	r1, [r4, #0]
 8007bca:	b90d      	cbnz	r5, 8007bd0 <_printf_i+0x110>
 8007bcc:	2e00      	cmp	r6, #0
 8007bce:	d04b      	beq.n	8007c68 <_printf_i+0x1a8>
 8007bd0:	4616      	mov	r6, r2
 8007bd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bd6:	fb03 5711 	mls	r7, r3, r1, r5
 8007bda:	5dc7      	ldrb	r7, [r0, r7]
 8007bdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007be0:	462f      	mov	r7, r5
 8007be2:	42bb      	cmp	r3, r7
 8007be4:	460d      	mov	r5, r1
 8007be6:	d9f4      	bls.n	8007bd2 <_printf_i+0x112>
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d10b      	bne.n	8007c04 <_printf_i+0x144>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	07df      	lsls	r7, r3, #31
 8007bf0:	d508      	bpl.n	8007c04 <_printf_i+0x144>
 8007bf2:	6923      	ldr	r3, [r4, #16]
 8007bf4:	6861      	ldr	r1, [r4, #4]
 8007bf6:	4299      	cmp	r1, r3
 8007bf8:	bfde      	ittt	le
 8007bfa:	2330      	movle	r3, #48	@ 0x30
 8007bfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c04:	1b92      	subs	r2, r2, r6
 8007c06:	6122      	str	r2, [r4, #16]
 8007c08:	f8cd a000 	str.w	sl, [sp]
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	aa03      	add	r2, sp, #12
 8007c10:	4621      	mov	r1, r4
 8007c12:	4640      	mov	r0, r8
 8007c14:	f7ff fee6 	bl	80079e4 <_printf_common>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d14a      	bne.n	8007cb2 <_printf_i+0x1f2>
 8007c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c20:	b004      	add	sp, #16
 8007c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	f043 0320 	orr.w	r3, r3, #32
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	4833      	ldr	r0, [pc, #204]	@ (8007cfc <_printf_i+0x23c>)
 8007c30:	2778      	movs	r7, #120	@ 0x78
 8007c32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	6831      	ldr	r1, [r6, #0]
 8007c3a:	061f      	lsls	r7, r3, #24
 8007c3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c40:	d402      	bmi.n	8007c48 <_printf_i+0x188>
 8007c42:	065f      	lsls	r7, r3, #25
 8007c44:	bf48      	it	mi
 8007c46:	b2ad      	uxthmi	r5, r5
 8007c48:	6031      	str	r1, [r6, #0]
 8007c4a:	07d9      	lsls	r1, r3, #31
 8007c4c:	bf44      	itt	mi
 8007c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8007c52:	6023      	strmi	r3, [r4, #0]
 8007c54:	b11d      	cbz	r5, 8007c5e <_printf_i+0x19e>
 8007c56:	2310      	movs	r3, #16
 8007c58:	e7ac      	b.n	8007bb4 <_printf_i+0xf4>
 8007c5a:	4827      	ldr	r0, [pc, #156]	@ (8007cf8 <_printf_i+0x238>)
 8007c5c:	e7e9      	b.n	8007c32 <_printf_i+0x172>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	f023 0320 	bic.w	r3, r3, #32
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	e7f6      	b.n	8007c56 <_printf_i+0x196>
 8007c68:	4616      	mov	r6, r2
 8007c6a:	e7bd      	b.n	8007be8 <_printf_i+0x128>
 8007c6c:	6833      	ldr	r3, [r6, #0]
 8007c6e:	6825      	ldr	r5, [r4, #0]
 8007c70:	6961      	ldr	r1, [r4, #20]
 8007c72:	1d18      	adds	r0, r3, #4
 8007c74:	6030      	str	r0, [r6, #0]
 8007c76:	062e      	lsls	r6, r5, #24
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	d501      	bpl.n	8007c80 <_printf_i+0x1c0>
 8007c7c:	6019      	str	r1, [r3, #0]
 8007c7e:	e002      	b.n	8007c86 <_printf_i+0x1c6>
 8007c80:	0668      	lsls	r0, r5, #25
 8007c82:	d5fb      	bpl.n	8007c7c <_printf_i+0x1bc>
 8007c84:	8019      	strh	r1, [r3, #0]
 8007c86:	2300      	movs	r3, #0
 8007c88:	6123      	str	r3, [r4, #16]
 8007c8a:	4616      	mov	r6, r2
 8007c8c:	e7bc      	b.n	8007c08 <_printf_i+0x148>
 8007c8e:	6833      	ldr	r3, [r6, #0]
 8007c90:	1d1a      	adds	r2, r3, #4
 8007c92:	6032      	str	r2, [r6, #0]
 8007c94:	681e      	ldr	r6, [r3, #0]
 8007c96:	6862      	ldr	r2, [r4, #4]
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f7f8 fac0 	bl	8000220 <memchr>
 8007ca0:	b108      	cbz	r0, 8007ca6 <_printf_i+0x1e6>
 8007ca2:	1b80      	subs	r0, r0, r6
 8007ca4:	6060      	str	r0, [r4, #4]
 8007ca6:	6863      	ldr	r3, [r4, #4]
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	2300      	movs	r3, #0
 8007cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cb0:	e7aa      	b.n	8007c08 <_printf_i+0x148>
 8007cb2:	6923      	ldr	r3, [r4, #16]
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	4640      	mov	r0, r8
 8007cba:	47d0      	blx	sl
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d0ad      	beq.n	8007c1c <_printf_i+0x15c>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	079b      	lsls	r3, r3, #30
 8007cc4:	d413      	bmi.n	8007cee <_printf_i+0x22e>
 8007cc6:	68e0      	ldr	r0, [r4, #12]
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	4298      	cmp	r0, r3
 8007ccc:	bfb8      	it	lt
 8007cce:	4618      	movlt	r0, r3
 8007cd0:	e7a6      	b.n	8007c20 <_printf_i+0x160>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	4640      	mov	r0, r8
 8007cda:	47d0      	blx	sl
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d09d      	beq.n	8007c1c <_printf_i+0x15c>
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	68e3      	ldr	r3, [r4, #12]
 8007ce4:	9903      	ldr	r1, [sp, #12]
 8007ce6:	1a5b      	subs	r3, r3, r1
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	dcf2      	bgt.n	8007cd2 <_printf_i+0x212>
 8007cec:	e7eb      	b.n	8007cc6 <_printf_i+0x206>
 8007cee:	2500      	movs	r5, #0
 8007cf0:	f104 0619 	add.w	r6, r4, #25
 8007cf4:	e7f5      	b.n	8007ce2 <_printf_i+0x222>
 8007cf6:	bf00      	nop
 8007cf8:	0800840d 	.word	0x0800840d
 8007cfc:	0800841e 	.word	0x0800841e

08007d00 <memmove>:
 8007d00:	4288      	cmp	r0, r1
 8007d02:	b510      	push	{r4, lr}
 8007d04:	eb01 0402 	add.w	r4, r1, r2
 8007d08:	d902      	bls.n	8007d10 <memmove+0x10>
 8007d0a:	4284      	cmp	r4, r0
 8007d0c:	4623      	mov	r3, r4
 8007d0e:	d807      	bhi.n	8007d20 <memmove+0x20>
 8007d10:	1e43      	subs	r3, r0, #1
 8007d12:	42a1      	cmp	r1, r4
 8007d14:	d008      	beq.n	8007d28 <memmove+0x28>
 8007d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d1e:	e7f8      	b.n	8007d12 <memmove+0x12>
 8007d20:	4402      	add	r2, r0
 8007d22:	4601      	mov	r1, r0
 8007d24:	428a      	cmp	r2, r1
 8007d26:	d100      	bne.n	8007d2a <memmove+0x2a>
 8007d28:	bd10      	pop	{r4, pc}
 8007d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d32:	e7f7      	b.n	8007d24 <memmove+0x24>

08007d34 <_sbrk_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4d06      	ldr	r5, [pc, #24]	@ (8007d50 <_sbrk_r+0x1c>)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	602b      	str	r3, [r5, #0]
 8007d40:	f7f9 fd7e 	bl	8001840 <_sbrk>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d102      	bne.n	8007d4e <_sbrk_r+0x1a>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	b103      	cbz	r3, 8007d4e <_sbrk_r+0x1a>
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	bd38      	pop	{r3, r4, r5, pc}
 8007d50:	20002590 	.word	0x20002590

08007d54 <memcpy>:
 8007d54:	440a      	add	r2, r1
 8007d56:	4291      	cmp	r1, r2
 8007d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d5c:	d100      	bne.n	8007d60 <memcpy+0xc>
 8007d5e:	4770      	bx	lr
 8007d60:	b510      	push	{r4, lr}
 8007d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d6a:	4291      	cmp	r1, r2
 8007d6c:	d1f9      	bne.n	8007d62 <memcpy+0xe>
 8007d6e:	bd10      	pop	{r4, pc}

08007d70 <_realloc_r>:
 8007d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d74:	4680      	mov	r8, r0
 8007d76:	4615      	mov	r5, r2
 8007d78:	460c      	mov	r4, r1
 8007d7a:	b921      	cbnz	r1, 8007d86 <_realloc_r+0x16>
 8007d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	4611      	mov	r1, r2
 8007d82:	f7ff bc4b 	b.w	800761c <_malloc_r>
 8007d86:	b92a      	cbnz	r2, 8007d94 <_realloc_r+0x24>
 8007d88:	f7ff fbdc 	bl	8007544 <_free_r>
 8007d8c:	2400      	movs	r4, #0
 8007d8e:	4620      	mov	r0, r4
 8007d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d94:	f000 f81a 	bl	8007dcc <_malloc_usable_size_r>
 8007d98:	4285      	cmp	r5, r0
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	d802      	bhi.n	8007da4 <_realloc_r+0x34>
 8007d9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007da2:	d8f4      	bhi.n	8007d8e <_realloc_r+0x1e>
 8007da4:	4629      	mov	r1, r5
 8007da6:	4640      	mov	r0, r8
 8007da8:	f7ff fc38 	bl	800761c <_malloc_r>
 8007dac:	4607      	mov	r7, r0
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d0ec      	beq.n	8007d8c <_realloc_r+0x1c>
 8007db2:	42b5      	cmp	r5, r6
 8007db4:	462a      	mov	r2, r5
 8007db6:	4621      	mov	r1, r4
 8007db8:	bf28      	it	cs
 8007dba:	4632      	movcs	r2, r6
 8007dbc:	f7ff ffca 	bl	8007d54 <memcpy>
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	f7ff fbbe 	bl	8007544 <_free_r>
 8007dc8:	463c      	mov	r4, r7
 8007dca:	e7e0      	b.n	8007d8e <_realloc_r+0x1e>

08007dcc <_malloc_usable_size_r>:
 8007dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd0:	1f18      	subs	r0, r3, #4
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	bfbc      	itt	lt
 8007dd6:	580b      	ldrlt	r3, [r1, r0]
 8007dd8:	18c0      	addlt	r0, r0, r3
 8007dda:	4770      	bx	lr

08007ddc <_init>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	bf00      	nop
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr

08007de8 <_fini>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	bf00      	nop
 8007dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dee:	bc08      	pop	{r3}
 8007df0:	469e      	mov	lr, r3
 8007df2:	4770      	bx	lr
